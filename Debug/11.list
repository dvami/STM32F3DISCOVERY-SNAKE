
11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800aa44  0800aa44  0001aa44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae34  0800ae34  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae34  0800ae34  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae34  0800ae34  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae34  0800ae34  0001ae34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae38  0800ae38  0001ae38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800ae3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d4  2**0
                  CONTENTS
 10 .bss          0000069c  200000d4  200000d4  000200d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000770  20000770  000200d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ad71  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000303f  00000000  00000000  0003ae75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001618  00000000  00000000  0003f540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f8d  00000000  00000000  00040b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bfef  00000000  00000000  00061ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5c2d  00000000  00000000  0007dad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143701  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c68  00000000  00000000  00143754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa2c 	.word	0x0800aa2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	0800aa2c 	.word	0x0800aa2c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200000f2 	.word	0x200000f2
 800039c:	200000f4 	.word	0x200000f4
 80003a0:	200000f6 	.word	0x200000f6
 80003a4:	20000108 	.word	0x20000108
 80003a8:	200000f8 	.word	0x200000f8
 80003ac:	2000010c 	.word	0x2000010c

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f004 fe5f 	bl	8005174 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f004 fd26 	bl	8004f08 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f004 ffe6 	bl	8005498 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f004 ffde 	bl	8005498 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f004 ffd2 	bl	8005498 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f004 fcfe 	bl	8004f08 <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f004 fcf8 	bl	8004f08 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f004 fcf2 	bl	8004f08 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f004 fce3 	bl	8004f08 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f004 fcd8 	bl	8004f08 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000010c 	.word	0x2000010c
 80005a8:	2000010f 	.word	0x2000010f
 80005ac:	200000f0 	.word	0x200000f0
 80005b0:	20000000 	.word	0x20000000
 80005b4:	200000f2 	.word	0x200000f2
 80005b8:	200000f4 	.word	0x200000f4
 80005bc:	200000f6 	.word	0x200000f6
 80005c0:	200000f8 	.word	0x200000f8
 80005c4:	20000108 	.word	0x20000108
 80005c8:	2000010d 	.word	0x2000010d
 80005cc:	2000010e 	.word	0x2000010e

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	20000108 	.word	0x20000108
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000110 	.word	0x20000110

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f004 fbe0 	bl	8004f08 <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000010f 	.word	0x2000010f
 80007ac:	20000110 	.word	0x20000110

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000010d 	.word	0x2000010d

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 fddc 	bl	8005498 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f004 fdd0 	bl	8005498 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000108 	.word	0x20000108
 8000930:	200000f2 	.word	0x200000f2
 8000934:	200000f4 	.word	0x200000f4
 8000938:	2000010c 	.word	0x2000010c

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f004 fda4 	bl	8005498 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000950:	2001      	movs	r0, #1
 8000952:	f004 fad9 	bl	8004f08 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f004 fd99 	bl	8005498 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f004 face 	bl	8004f08 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f004 fd8e 	bl	8005498 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f004 fac3 	bl	8004f08 <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000108 	.word	0x20000108
 800098c:	200000f6 	.word	0x200000f6

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f004 fd6b 	bl	8005498 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000108 	.word	0x20000108
 80009e0:	200000f8 	.word	0x200000f8

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f004 fd41 	bl	8005498 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000108 	.word	0x20000108
 8000a34:	200000f8 	.word	0x200000f8

08000a38 <PWM_Change_Tones.5>:
  RTC_TimeTypeDef mytime;
  int number=0;

  TIM_HandleTypeDef *pwm_timers=&htim2;
  uint32_t pwm_channels=TIM_CHANNEL_2;
  void PWM_Change_Tones(uint16_t pwm_freq,uint16_t volume){
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	460a      	mov	r2, r1
 8000a42:	80fb      	strh	r3, [r7, #6]
 8000a44:	4613      	mov	r3, r2
 8000a46:	80bb      	strh	r3, [r7, #4]
 8000a48:	4664      	mov	r4, ip
 8000a4a:	f8c7 c000 	str.w	ip, [r7]
  	  TIM4->CCR2=10;
 8000a4e:	4b4c      	ldr	r3, [pc, #304]	; (8000b80 <PWM_Change_Tones.5+0x148>)
 8000a50:	220a      	movs	r2, #10
 8000a52:	639a      	str	r2, [r3, #56]	; 0x38
  	  if(pwm_freq==0||pwm_freq>20000){
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d004      	beq.n	8000a64 <PWM_Change_Tones.5+0x2c>
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d92c      	bls.n	8000abe <PWM_Change_Tones.5+0x86>


  		  __HAL_TIM_SET_COMPARE(pwm_timers,pwm_channels,0);
 8000a64:	69e3      	ldr	r3, [r4, #28]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d104      	bne.n	8000a74 <PWM_Change_Tones.5+0x3c>
 8000a6a:	69a3      	ldr	r3, [r4, #24]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	635a      	str	r2, [r3, #52]	; 0x34
 8000a72:	e080      	b.n	8000b76 <PWM_Change_Tones.5+0x13e>
 8000a74:	69e3      	ldr	r3, [r4, #28]
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	d104      	bne.n	8000a84 <PWM_Change_Tones.5+0x4c>
 8000a7a:	69a3      	ldr	r3, [r4, #24]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	2300      	movs	r3, #0
 8000a80:	6393      	str	r3, [r2, #56]	; 0x38
 8000a82:	e078      	b.n	8000b76 <PWM_Change_Tones.5+0x13e>
 8000a84:	69e3      	ldr	r3, [r4, #28]
 8000a86:	2b08      	cmp	r3, #8
 8000a88:	d104      	bne.n	8000a94 <PWM_Change_Tones.5+0x5c>
 8000a8a:	69a3      	ldr	r3, [r4, #24]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000a92:	e070      	b.n	8000b76 <PWM_Change_Tones.5+0x13e>
 8000a94:	69e3      	ldr	r3, [r4, #28]
 8000a96:	2b0c      	cmp	r3, #12
 8000a98:	d104      	bne.n	8000aa4 <PWM_Change_Tones.5+0x6c>
 8000a9a:	69a3      	ldr	r3, [r4, #24]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	e068      	b.n	8000b76 <PWM_Change_Tones.5+0x13e>
 8000aa4:	69e3      	ldr	r3, [r4, #28]
 8000aa6:	2b10      	cmp	r3, #16
 8000aa8:	d104      	bne.n	8000ab4 <PWM_Change_Tones.5+0x7c>
 8000aaa:	69a3      	ldr	r3, [r4, #24]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab2:	e060      	b.n	8000b76 <PWM_Change_Tones.5+0x13e>
 8000ab4:	69a3      	ldr	r3, [r4, #24]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000abc:	e05b      	b.n	8000b76 <PWM_Change_Tones.5+0x13e>


  	  }
  	  else{
  		  const uint32_t internal_Clock_freq=HAL_RCC_GetSysClockFreq();
 8000abe:	f006 f8f3 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 8000ac2:	61f8      	str	r0, [r7, #28]
  		  const uint16_t prescaler=1+internal_Clock_freq/pwm_freq/60000;
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	69fa      	ldr	r2, [r7, #28]
 8000ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000acc:	4a2d      	ldr	r2, [pc, #180]	; (8000b84 <PWM_Change_Tones.5+0x14c>)
 8000ace:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad2:	0b9b      	lsrs	r3, r3, #14
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	837b      	strh	r3, [r7, #26]
  		  const uint32_t timer_clock=internal_Clock_freq/ prescaler;
 8000ada:	8b7b      	ldrh	r3, [r7, #26]
 8000adc:	69fa      	ldr	r2, [r7, #28]
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	617b      	str	r3, [r7, #20]
  		  const uint32_t period_cycle=timer_clock/pwm_freq;
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aec:	613b      	str	r3, [r7, #16]
          const uint32_t pulse_width=volume*period_cycle/1000/2;
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	fb02 f303 	mul.w	r3, r2, r3
 8000af6:	4a24      	ldr	r2, [pc, #144]	; (8000b88 <PWM_Change_Tones.5+0x150>)
 8000af8:	fba2 2303 	umull	r2, r3, r2, r3
 8000afc:	09db      	lsrs	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]

          pwm_timers->Instance->PSC=prescaler-1;
 8000b00:	8b7b      	ldrh	r3, [r7, #26]
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	69a3      	ldr	r3, [r4, #24]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28
          pwm_timers->Instance->ARR=period_cycle-1;
 8000b0a:	69a3      	ldr	r3, [r4, #24]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	3a01      	subs	r2, #1
 8000b12:	62da      	str	r2, [r3, #44]	; 0x2c
          pwm_timers->Instance->EGR=TIM_EGR_UG;
 8000b14:	69a3      	ldr	r3, [r4, #24]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	615a      	str	r2, [r3, #20]
  __HAL_TIM_SET_COMPARE(pwm_timers,pwm_channels,pulse_width);
 8000b1c:	69e3      	ldr	r3, [r4, #28]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d104      	bne.n	8000b2c <PWM_Change_Tones.5+0xf4>
 8000b22:	69a3      	ldr	r3, [r4, #24]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	635a      	str	r2, [r3, #52]	; 0x34


  	  }

  }
 8000b2a:	e024      	b.n	8000b76 <PWM_Change_Tones.5+0x13e>
  __HAL_TIM_SET_COMPARE(pwm_timers,pwm_channels,pulse_width);
 8000b2c:	69e3      	ldr	r3, [r4, #28]
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d104      	bne.n	8000b3c <PWM_Change_Tones.5+0x104>
 8000b32:	69a3      	ldr	r3, [r4, #24]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6393      	str	r3, [r2, #56]	; 0x38
  }
 8000b3a:	e01c      	b.n	8000b76 <PWM_Change_Tones.5+0x13e>
  __HAL_TIM_SET_COMPARE(pwm_timers,pwm_channels,pulse_width);
 8000b3c:	69e3      	ldr	r3, [r4, #28]
 8000b3e:	2b08      	cmp	r3, #8
 8000b40:	d104      	bne.n	8000b4c <PWM_Change_Tones.5+0x114>
 8000b42:	69a3      	ldr	r3, [r4, #24]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	63d3      	str	r3, [r2, #60]	; 0x3c
  }
 8000b4a:	e014      	b.n	8000b76 <PWM_Change_Tones.5+0x13e>
  __HAL_TIM_SET_COMPARE(pwm_timers,pwm_channels,pulse_width);
 8000b4c:	69e3      	ldr	r3, [r4, #28]
 8000b4e:	2b0c      	cmp	r3, #12
 8000b50:	d104      	bne.n	8000b5c <PWM_Change_Tones.5+0x124>
 8000b52:	69a3      	ldr	r3, [r4, #24]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
  }
 8000b5a:	e00c      	b.n	8000b76 <PWM_Change_Tones.5+0x13e>
  __HAL_TIM_SET_COMPARE(pwm_timers,pwm_channels,pulse_width);
 8000b5c:	69e3      	ldr	r3, [r4, #28]
 8000b5e:	2b10      	cmp	r3, #16
 8000b60:	d104      	bne.n	8000b6c <PWM_Change_Tones.5+0x134>
 8000b62:	69a3      	ldr	r3, [r4, #24]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6593      	str	r3, [r2, #88]	; 0x58
  }
 8000b6a:	e004      	b.n	8000b76 <PWM_Change_Tones.5+0x13e>
  __HAL_TIM_SET_COMPARE(pwm_timers,pwm_channels,pulse_width);
 8000b6c:	69a3      	ldr	r3, [r4, #24]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	65d3      	str	r3, [r2, #92]	; 0x5c
  }
 8000b74:	e7ff      	b.n	8000b76 <PWM_Change_Tones.5+0x13e>
 8000b76:	bf00      	nop
 8000b78:	3724      	adds	r7, #36	; 0x24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd90      	pop	{r4, r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40000800 	.word	0x40000800
 8000b84:	45e7b273 	.word	0x45e7b273
 8000b88:	10624dd3 	.word	0x10624dd3

08000b8c <main>:
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b0b4      	sub	sp, #208	; 0xd0
 8000b90:	af04      	add	r7, sp, #16
int main(void)
 8000b92:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000b96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	enum Direction currentDir = RIGHT;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	for(int i=0;i<4;i++){
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000ba6:	e01f      	b.n	8000be8 <main+0x5c>
		for(int j=0;j<20;j++){
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000bae:	e012      	b.n	8000bd6 <main+0x4a>
			  grid[i][j]=-1;
 8000bb0:	49b2      	ldr	r1, [pc, #712]	; (8000e7c <main+0x2f0>)
 8000bb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000bc2:	4413      	add	r3, r2
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0;j<20;j++){
 8000bcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000bd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000bda:	2b13      	cmp	r3, #19
 8000bdc:	dde8      	ble.n	8000bb0 <main+0x24>
	for(int i=0;i<4;i++){
 8000bde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000be2:	3301      	adds	r3, #1
 8000be4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000be8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	dddb      	ble.n	8000ba8 <main+0x1c>
	struct Segment* segment = malloc(sizeof(struct Segment));
 8000bf0:	200c      	movs	r0, #12
 8000bf2:	f008 fc95 	bl	8009520 <malloc>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	67bb      	str	r3, [r7, #120]	; 0x78
	struct Segment* tail = malloc(sizeof(struct Segment));
 8000bfa:	200c      	movs	r0, #12
 8000bfc:	f008 fc90 	bl	8009520 <malloc>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	segment->x = 0;
 8000c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
	segment->y = 1;
 8000c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c0e:	2201      	movs	r2, #1
 8000c10:	605a      	str	r2, [r3, #4]
	segment->next = tail;
 8000c12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c14:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000c18:	609a      	str	r2, [r3, #8]
	tail->x=0;
 8000c1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
	tail->y=0;
 8000c22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
	tail->next=NULL;
 8000c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
grid[0][0]=6;
 8000c32:	4b92      	ldr	r3, [pc, #584]	; (8000e7c <main+0x2f0>)
 8000c34:	2206      	movs	r2, #6
 8000c36:	601a      	str	r2, [r3, #0]
grid[0][1]=5;
 8000c38:	4b90      	ldr	r3, [pc, #576]	; (8000e7c <main+0x2f0>)
 8000c3a:	2205      	movs	r2, #5
 8000c3c:	605a      	str	r2, [r3, #4]
  HAL_Init();
 8000c3e:	f004 f8fd 	bl	8004e3c <HAL_Init>
  SystemClock_Config();
 8000c42:	f002 fa31 	bl	80030a8 <SystemClock_Config>
  MX_GPIO_Init();
 8000c46:	f002 fc37 	bl	80034b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c4a:	f002 fa95 	bl	8003178 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c4e:	f002 fb2d 	bl	80032ac <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000c52:	f002 fc0f 	bl	8003474 <MX_USB_PCD_Init>
  MX_USART3_UART_Init();
 8000c56:	f002 fbdd 	bl	8003414 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000c5a:	f002 facd 	bl	80031f8 <MX_RTC_Init>
  MX_TIM2_Init();
 8000c5e:	f002 fb63 	bl	8003328 <MX_TIM2_Init>
  LiquidCrystal(GPIOD,GPIO_PIN_8,GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11,GPIO_PIN_12,GPIO_PIN_13, GPIO_PIN_14);
 8000c62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c66:	9303      	str	r3, [sp, #12]
 8000c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6c:	9302      	str	r3, [sp, #8]
 8000c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c72:	9301      	str	r3, [sp, #4]
 8000c74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c86:	487e      	ldr	r0, [pc, #504]	; (8000e80 <main+0x2f4>)
 8000c88:	f7ff fafa 	bl	8000280 <LiquidCrystal>
  begin(20,4);
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	2014      	movs	r0, #20
 8000c90:	f7ff fb8e 	bl	80003b0 <begin>
  int number=0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  TIM_HandleTypeDef *pwm_timers=&htim2;
 8000c9a:	4b7a      	ldr	r3, [pc, #488]	; (8000e84 <main+0x2f8>)
 8000c9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t pwm_channels=TIM_CHANNEL_2;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		 setCursor(4, 2);
		 write (2);

	 }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2110      	movs	r1, #16
 8000caa:	4875      	ldr	r0, [pc, #468]	; (8000e80 <main+0x2f4>)
 8000cac:	f004 fbf4 	bl	8005498 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4872      	ldr	r0, [pc, #456]	; (8000e80 <main+0x2f4>)
 8000cb6:	f004 fbef 	bl	8005498 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2140      	movs	r1, #64	; 0x40
 8000cbe:	4870      	ldr	r0, [pc, #448]	; (8000e80 <main+0x2f4>)
 8000cc0:	f004 fbea 	bl	8005498 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	486d      	ldr	r0, [pc, #436]	; (8000e80 <main+0x2f4>)
 8000cca:	f004 fbe5 	bl	8005498 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
sTime.Hours=0;
 8000cce:	4b6e      	ldr	r3, [pc, #440]	; (8000e88 <main+0x2fc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
sTime.Minutes=0;
 8000cd4:	4b6c      	ldr	r3, [pc, #432]	; (8000e88 <main+0x2fc>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	705a      	strb	r2, [r3, #1]
sTime.Seconds=0;
 8000cda:	4b6b      	ldr	r3, [pc, #428]	; (8000e88 <main+0x2fc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	709a      	strb	r2, [r3, #2]
sDate.Date=2;
 8000ce0:	4b6a      	ldr	r3, [pc, #424]	; (8000e8c <main+0x300>)
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	709a      	strb	r2, [r3, #2]
sDate.Month=9;
 8000ce6:	4b69      	ldr	r3, [pc, #420]	; (8000e8c <main+0x300>)
 8000ce8:	2209      	movs	r2, #9
 8000cea:	705a      	strb	r2, [r3, #1]
sDate.Year=24;
 8000cec:	4b67      	ldr	r3, [pc, #412]	; (8000e8c <main+0x300>)
 8000cee:	2218      	movs	r2, #24
 8000cf0:	70da      	strb	r2, [r3, #3]

HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4964      	ldr	r1, [pc, #400]	; (8000e88 <main+0x2fc>)
 8000cf6:	4866      	ldr	r0, [pc, #408]	; (8000e90 <main+0x304>)
 8000cf8:	f006 fac3 	bl	8007282 <HAL_RTC_SetTime>
HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4963      	ldr	r1, [pc, #396]	; (8000e8c <main+0x300>)
 8000d00:	4863      	ldr	r0, [pc, #396]	; (8000e90 <main+0x304>)
 8000d02:	f006 fbb6 	bl	8007472 <HAL_RTC_SetDate>

}

randommys();
}
int finishuart=0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
char names[7];
names[0]='P';
 8000d0c:	2350      	movs	r3, #80	; 0x50
 8000d0e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
names[1]='l';
 8000d12:	236c      	movs	r3, #108	; 0x6c
 8000d14:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
names[2]='a';
 8000d18:	2361      	movs	r3, #97	; 0x61
 8000d1a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
names[3]='y';
 8000d1e:	2379      	movs	r3, #121	; 0x79
 8000d20:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
names[4]='e';
 8000d24:	2365      	movs	r3, #101	; 0x65
 8000d26:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
names[5]='r';
 8000d2a:	2372      	movs	r3, #114	; 0x72
 8000d2c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
names[6]='1';
 8000d30:	2331      	movs	r3, #49	; 0x31
 8000d32:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    /* USER CODE BEGIN 3 */


	  //intitale screen
	  if(menu<1){
 8000d36:	4b57      	ldr	r3, [pc, #348]	; (8000e94 <main+0x308>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f300 80d0 	bgt.w	8000ee0 <main+0x354>



	  createChar(0, heart);
 8000d40:	4955      	ldr	r1, [pc, #340]	; (8000e98 <main+0x30c>)
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff fd75 	bl	8000832 <createChar>
	  setCursor(1, 0);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff fcfe 	bl	800074c <setCursor>
	  write(0);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fda5 	bl	80008a0 <write>
	  createChar(1, apple);
 8000d56:	4951      	ldr	r1, [pc, #324]	; (8000e9c <main+0x310>)
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff fd6a 	bl	8000832 <createChar>
	  setCursor(1, 3);
 8000d5e:	2103      	movs	r1, #3
 8000d60:	2001      	movs	r0, #1
 8000d62:	f7ff fcf3 	bl	800074c <setCursor>
	  write(1);
 8000d66:	2001      	movs	r0, #1
 8000d68:	f7ff fd9a 	bl	80008a0 <write>
	  createChar(2, block);
 8000d6c:	494c      	ldr	r1, [pc, #304]	; (8000ea0 <main+0x314>)
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f7ff fd5f 	bl	8000832 <createChar>
	  setCursor(19, 0);
 8000d74:	2100      	movs	r1, #0
 8000d76:	2013      	movs	r0, #19
 8000d78:	f7ff fce8 	bl	800074c <setCursor>
	  write(2);
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f7ff fd8f 	bl	80008a0 <write>
	  createChar(3, luckybox);
 8000d82:	4948      	ldr	r1, [pc, #288]	; (8000ea4 <main+0x318>)
 8000d84:	2003      	movs	r0, #3
 8000d86:	f7ff fd54 	bl	8000832 <createChar>
	  setCursor(19, 3);
 8000d8a:	2103      	movs	r1, #3
 8000d8c:	2013      	movs	r0, #19
 8000d8e:	f7ff fcdd 	bl	800074c <setCursor>
	  write(3);
 8000d92:	2003      	movs	r0, #3
 8000d94:	f7ff fd84 	bl	80008a0 <write>

	  setCursor(6, 1);
 8000d98:	2101      	movs	r1, #1
 8000d9a:	2006      	movs	r0, #6
 8000d9c:	f7ff fcd6 	bl	800074c <setCursor>
	  print("WELCOME TO");
 8000da0:	4841      	ldr	r0, [pc, #260]	; (8000ea8 <main+0x31c>)
 8000da2:	f7ff fd1b 	bl	80007dc <print>
	  setCursor(8, 2);
 8000da6:	2102      	movs	r1, #2
 8000da8:	2008      	movs	r0, #8
 8000daa:	f7ff fccf 	bl	800074c <setCursor>
	  print("SNAKE!");
 8000dae:	483f      	ldr	r0, [pc, #252]	; (8000eac <main+0x320>)
 8000db0:	f7ff fd14 	bl	80007dc <print>


	  while (finishuart==0){
 8000db4:	e08f      	b.n	8000ed6 <main+0x34a>

	  		 HAL_UART_Receive(&huart3, rxBuffer, 3, 100);
 8000db6:	2364      	movs	r3, #100	; 0x64
 8000db8:	2203      	movs	r2, #3
 8000dba:	493d      	ldr	r1, [pc, #244]	; (8000eb0 <main+0x324>)
 8000dbc:	483d      	ldr	r0, [pc, #244]	; (8000eb4 <main+0x328>)
 8000dbe:	f007 fea9 	bl	8008b14 <HAL_UART_Receive>


	  		          //   rxBuffer[3] = '\0'; // Null-terminate the received string
	  		             // Process the received data (rxBuffer now contains the string "12:23:43")
	  		             //volume
	  		             if(rxBuffer[0]=='V'){
 8000dc2:	4b3b      	ldr	r3, [pc, #236]	; (8000eb0 <main+0x324>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b56      	cmp	r3, #86	; 0x56
 8000dc8:	d11a      	bne.n	8000e00 <main+0x274>
	  	                        uint8_t v = (rxBuffer[1] - '0') * 10 + (rxBuffer[2] - '0');
 8000dca:	4b39      	ldr	r3, [pc, #228]	; (8000eb0 <main+0x324>)
 8000dcc:	785b      	ldrb	r3, [r3, #1]
 8000dce:	3b30      	subs	r3, #48	; 0x30
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b34      	ldr	r3, [pc, #208]	; (8000eb0 <main+0x324>)
 8000dde:	789b      	ldrb	r3, [r3, #2]
 8000de0:	4413      	add	r3, r2
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	3b30      	subs	r3, #48	; 0x30
 8000de6:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	  vol=v;
 8000dea:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8000dee:	4a32      	ldr	r2, [pc, #200]	; (8000eb8 <main+0x32c>)
 8000df0:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, "OK",2, 150);
 8000df2:	2396      	movs	r3, #150	; 0x96
 8000df4:	2202      	movs	r2, #2
 8000df6:	4931      	ldr	r1, [pc, #196]	; (8000ebc <main+0x330>)
 8000df8:	482e      	ldr	r0, [pc, #184]	; (8000eb4 <main+0x328>)
 8000dfa:	f007 fe01 	bl	8008a00 <HAL_UART_Transmit>
 8000dfe:	e06a      	b.n	8000ed6 <main+0x34a>

	  		             }
	  		             //health
	  		             else    if(rxBuffer[0]=='H'){
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <main+0x324>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b48      	cmp	r3, #72	; 0x48
 8000e06:	d11a      	bne.n	8000e3e <main+0x2b2>
	  	                        uint8_t h = (rxBuffer[1] - '0') * 10 + (rxBuffer[2] - '0');
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <main+0x324>)
 8000e0a:	785b      	ldrb	r3, [r3, #1]
 8000e0c:	3b30      	subs	r3, #48	; 0x30
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	461a      	mov	r2, r3
 8000e12:	0092      	lsls	r2, r2, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <main+0x324>)
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	4413      	add	r3, r2
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	3b30      	subs	r3, #48	; 0x30
 8000e24:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
	  health=h;
 8000e28:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8000e2c:	4a24      	ldr	r2, [pc, #144]	; (8000ec0 <main+0x334>)
 8000e2e:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, "OK",2 , 100);
 8000e30:	2364      	movs	r3, #100	; 0x64
 8000e32:	2202      	movs	r2, #2
 8000e34:	4921      	ldr	r1, [pc, #132]	; (8000ebc <main+0x330>)
 8000e36:	481f      	ldr	r0, [pc, #124]	; (8000eb4 <main+0x328>)
 8000e38:	f007 fde2 	bl	8008a00 <HAL_UART_Transmit>
 8000e3c:	e04b      	b.n	8000ed6 <main+0x34a>

	  		             }
	  		             //block
	  		             else if(rxBuffer[0]=='B'){
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <main+0x324>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b42      	cmp	r3, #66	; 0x42
 8000e44:	d140      	bne.n	8000ec8 <main+0x33c>
	  	                        uint8_t b = (rxBuffer[1] - '0') * 10 + (rxBuffer[2] - '0');
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <main+0x324>)
 8000e48:	785b      	ldrb	r3, [r3, #1]
 8000e4a:	3b30      	subs	r3, #48	; 0x30
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	461a      	mov	r2, r3
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <main+0x324>)
 8000e5a:	789b      	ldrb	r3, [r3, #2]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	3b30      	subs	r3, #48	; 0x30
 8000e62:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	  blocks=b;
 8000e66:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000e6a:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <main+0x338>)
 8000e6c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, "OK",2 , 100);
 8000e6e:	2364      	movs	r3, #100	; 0x64
 8000e70:	2202      	movs	r2, #2
 8000e72:	4912      	ldr	r1, [pc, #72]	; (8000ebc <main+0x330>)
 8000e74:	480f      	ldr	r0, [pc, #60]	; (8000eb4 <main+0x328>)
 8000e76:	f007 fdc3 	bl	8008a00 <HAL_UART_Transmit>
 8000e7a:	e02c      	b.n	8000ed6 <main+0x34a>
 8000e7c:	200005f4 	.word	0x200005f4
 8000e80:	48000c00 	.word	0x48000c00
 8000e84:	200001ec 	.word	0x200001ec
 8000e88:	200005b4 	.word	0x200005b4
 8000e8c:	200005c8 	.word	0x200005c8
 8000e90:	20000168 	.word	0x20000168
 8000e94:	200005d4 	.word	0x200005d4
 8000e98:	20000024 	.word	0x20000024
 8000e9c:	2000002c 	.word	0x2000002c
 8000ea0:	20000034 	.word	0x20000034
 8000ea4:	2000003c 	.word	0x2000003c
 8000ea8:	0800aa44 	.word	0x0800aa44
 8000eac:	0800aa50 	.word	0x0800aa50
 8000eb0:	200005cc 	.word	0x200005cc
 8000eb4:	20000238 	.word	0x20000238
 8000eb8:	20000010 	.word	0x20000010
 8000ebc:	0800aa58 	.word	0x0800aa58
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000014 	.word	0x20000014
	  		             }

	  		             else if(rxBuffer[0]=='F'){
 8000ec8:	4ba4      	ldr	r3, [pc, #656]	; (800115c <main+0x5d0>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b46      	cmp	r3, #70	; 0x46
 8000ece:	d102      	bne.n	8000ed6 <main+0x34a>
	   finishuart=1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	  while (finishuart==0){
 8000ed6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f43f af6b 	beq.w	8000db6 <main+0x22a>



	  }
	  //menu
	  if(menu==1){
 8000ee0:	4b9f      	ldr	r3, [pc, #636]	; (8001160 <main+0x5d4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	f040 80a4 	bne.w	8001032 <main+0x4a6>
		  if(returnfromchosen==1){
 8000eea:	4b9e      	ldr	r3, [pc, #632]	; (8001164 <main+0x5d8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d104      	bne.n	8000efc <main+0x370>

			  //return from choosen
			  returnfromchosen=0;
 8000ef2:	4b9c      	ldr	r3, [pc, #624]	; (8001164 <main+0x5d8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
			  clear();
 8000ef8:	f7ff fc1e 	bl	8000738 <clear>
		  }
if(menuposition==-1)
 8000efc:	4b9a      	ldr	r3, [pc, #616]	; (8001168 <main+0x5dc>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d104      	bne.n	8000f10 <main+0x384>
{	   clear();
 8000f06:	f7ff fc17 	bl	8000738 <clear>
menuposition=0;
 8000f0a:	4b97      	ldr	r3, [pc, #604]	; (8001168 <main+0x5dc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
}
 //cursor updates
createChar(4,menucursor);
 8000f10:	4996      	ldr	r1, [pc, #600]	; (800116c <main+0x5e0>)
 8000f12:	2004      	movs	r0, #4
 8000f14:	f7ff fc8d 	bl	8000832 <createChar>
setCursor(6, menuposition);
 8000f18:	4b93      	ldr	r3, [pc, #588]	; (8001168 <main+0x5dc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	4619      	mov	r1, r3
 8000f20:	2006      	movs	r0, #6
 8000f22:	f7ff fc13 	bl	800074c <setCursor>
write(4);
 8000f26:	2004      	movs	r0, #4
 8000f28:	f7ff fcba 	bl	80008a0 <write>


if(menuposition==3){
 8000f2c:	4b8e      	ldr	r3, [pc, #568]	; (8001168 <main+0x5dc>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d115      	bne.n	8000f60 <main+0x3d4>
	setCursor(6, 1);
 8000f34:	2101      	movs	r1, #1
 8000f36:	2006      	movs	r0, #6
 8000f38:	f7ff fc08 	bl	800074c <setCursor>
	print(" ");
 8000f3c:	488c      	ldr	r0, [pc, #560]	; (8001170 <main+0x5e4>)
 8000f3e:	f7ff fc4d 	bl	80007dc <print>
	setCursor(6, 0);
 8000f42:	2100      	movs	r1, #0
 8000f44:	2006      	movs	r0, #6
 8000f46:	f7ff fc01 	bl	800074c <setCursor>
	print(" ");
 8000f4a:	4889      	ldr	r0, [pc, #548]	; (8001170 <main+0x5e4>)
 8000f4c:	f7ff fc46 	bl	80007dc <print>
	setCursor(6, 2);
 8000f50:	2102      	movs	r1, #2
 8000f52:	2006      	movs	r0, #6
 8000f54:	f7ff fbfa 	bl	800074c <setCursor>
	print(" ");
 8000f58:	4885      	ldr	r0, [pc, #532]	; (8001170 <main+0x5e4>)
 8000f5a:	f7ff fc3f 	bl	80007dc <print>
 8000f5e:	e04c      	b.n	8000ffa <main+0x46e>
}
else if(menuposition==2){
 8000f60:	4b81      	ldr	r3, [pc, #516]	; (8001168 <main+0x5dc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d115      	bne.n	8000f94 <main+0x408>
	setCursor(6, 0);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2006      	movs	r0, #6
 8000f6c:	f7ff fbee 	bl	800074c <setCursor>
	print(" ");
 8000f70:	487f      	ldr	r0, [pc, #508]	; (8001170 <main+0x5e4>)
 8000f72:	f7ff fc33 	bl	80007dc <print>
	setCursor(6, 1);
 8000f76:	2101      	movs	r1, #1
 8000f78:	2006      	movs	r0, #6
 8000f7a:	f7ff fbe7 	bl	800074c <setCursor>
	print(" ");
 8000f7e:	487c      	ldr	r0, [pc, #496]	; (8001170 <main+0x5e4>)
 8000f80:	f7ff fc2c 	bl	80007dc <print>
	setCursor(6, 3);
 8000f84:	2103      	movs	r1, #3
 8000f86:	2006      	movs	r0, #6
 8000f88:	f7ff fbe0 	bl	800074c <setCursor>
	print(" ");
 8000f8c:	4878      	ldr	r0, [pc, #480]	; (8001170 <main+0x5e4>)
 8000f8e:	f7ff fc25 	bl	80007dc <print>
 8000f92:	e032      	b.n	8000ffa <main+0x46e>
}
else if(menuposition==1){
 8000f94:	4b74      	ldr	r3, [pc, #464]	; (8001168 <main+0x5dc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d115      	bne.n	8000fc8 <main+0x43c>
	setCursor(6, 3);
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	2006      	movs	r0, #6
 8000fa0:	f7ff fbd4 	bl	800074c <setCursor>
	print(" ");
 8000fa4:	4872      	ldr	r0, [pc, #456]	; (8001170 <main+0x5e4>)
 8000fa6:	f7ff fc19 	bl	80007dc <print>
	setCursor(6, 2);
 8000faa:	2102      	movs	r1, #2
 8000fac:	2006      	movs	r0, #6
 8000fae:	f7ff fbcd 	bl	800074c <setCursor>
	print(" ");
 8000fb2:	486f      	ldr	r0, [pc, #444]	; (8001170 <main+0x5e4>)
 8000fb4:	f7ff fc12 	bl	80007dc <print>
	setCursor(6, 0);
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2006      	movs	r0, #6
 8000fbc:	f7ff fbc6 	bl	800074c <setCursor>
	print(" ");
 8000fc0:	486b      	ldr	r0, [pc, #428]	; (8001170 <main+0x5e4>)
 8000fc2:	f7ff fc0b 	bl	80007dc <print>
 8000fc6:	e018      	b.n	8000ffa <main+0x46e>
}
else if(menuposition==0){
 8000fc8:	4b67      	ldr	r3, [pc, #412]	; (8001168 <main+0x5dc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d114      	bne.n	8000ffa <main+0x46e>
	setCursor(6, 1);
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	2006      	movs	r0, #6
 8000fd4:	f7ff fbba 	bl	800074c <setCursor>
	print(" ");
 8000fd8:	4865      	ldr	r0, [pc, #404]	; (8001170 <main+0x5e4>)
 8000fda:	f7ff fbff 	bl	80007dc <print>
	setCursor(6, 2);
 8000fde:	2102      	movs	r1, #2
 8000fe0:	2006      	movs	r0, #6
 8000fe2:	f7ff fbb3 	bl	800074c <setCursor>
	print(" ");
 8000fe6:	4862      	ldr	r0, [pc, #392]	; (8001170 <main+0x5e4>)
 8000fe8:	f7ff fbf8 	bl	80007dc <print>
	setCursor(6, 3);
 8000fec:	2103      	movs	r1, #3
 8000fee:	2006      	movs	r0, #6
 8000ff0:	f7ff fbac 	bl	800074c <setCursor>
	print(" ");
 8000ff4:	485e      	ldr	r0, [pc, #376]	; (8001170 <main+0x5e4>)
 8000ff6:	f7ff fbf1 	bl	80007dc <print>
}
//menu
setCursor(7, 0);
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2007      	movs	r0, #7
 8000ffe:	f7ff fba5 	bl	800074c <setCursor>
print("Start!");
 8001002:	485c      	ldr	r0, [pc, #368]	; (8001174 <main+0x5e8>)
 8001004:	f7ff fbea 	bl	80007dc <print>
setCursor(7, 1);
 8001008:	2101      	movs	r1, #1
 800100a:	2007      	movs	r0, #7
 800100c:	f7ff fb9e 	bl	800074c <setCursor>
print("Mode");
 8001010:	4859      	ldr	r0, [pc, #356]	; (8001178 <main+0x5ec>)
 8001012:	f7ff fbe3 	bl	80007dc <print>
setCursor(7, 2);
 8001016:	2102      	movs	r1, #2
 8001018:	2007      	movs	r0, #7
 800101a:	f7ff fb97 	bl	800074c <setCursor>
print("Setting");
 800101e:	4857      	ldr	r0, [pc, #348]	; (800117c <main+0x5f0>)
 8001020:	f7ff fbdc 	bl	80007dc <print>
setCursor(7, 3);
 8001024:	2103      	movs	r1, #3
 8001026:	2007      	movs	r0, #7
 8001028:	f7ff fb90 	bl	800074c <setCursor>
print("About");
 800102c:	4854      	ldr	r0, [pc, #336]	; (8001180 <main+0x5f4>)
 800102e:	f7ff fbd5 	bl	80007dc <print>


	  }
//menu choice
	  if(menuchoice==1){
 8001032:	4b54      	ldr	r3, [pc, #336]	; (8001184 <main+0x5f8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	f47f ae7d 	bne.w	8000d36 <main+0x1aa>
		  if(clearmenuchoice==0){
 800103c:	4b52      	ldr	r3, [pc, #328]	; (8001188 <main+0x5fc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d107      	bne.n	8001054 <main+0x4c8>
		  clear();
 8001044:	f7ff fb78 	bl	8000738 <clear>
		  menu=2;
 8001048:	4b45      	ldr	r3, [pc, #276]	; (8001160 <main+0x5d4>)
 800104a:	2202      	movs	r2, #2
 800104c:	601a      	str	r2, [r3, #0]

		  //update it when back to main menu
		  clearmenuchoice=1;
 800104e:	4b4e      	ldr	r3, [pc, #312]	; (8001188 <main+0x5fc>)
 8001050:	2201      	movs	r2, #1
 8001052:	601a      	str	r2, [r3, #0]
		  }
		 if(menuposition==3){
 8001054:	4b44      	ldr	r3, [pc, #272]	; (8001168 <main+0x5dc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b03      	cmp	r3, #3
 800105a:	d14b      	bne.n	80010f4 <main+0x568>
 			 setCursor(0, 0);
 800105c:	2100      	movs	r1, #0
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fb74 	bl	800074c <setCursor>
			 print("AMIRMAHDI DAMAVANDI");
 8001064:	4849      	ldr	r0, [pc, #292]	; (800118c <main+0x600>)
 8001066:	f7ff fbb9 	bl	80007dc <print>
			 setCursor(0, 1);
 800106a:	2101      	movs	r1, #1
 800106c:	2000      	movs	r0, #0
 800106e:	f7ff fb6d 	bl	800074c <setCursor>
			 print("SHAKILA HABIBI");
 8001072:	4847      	ldr	r0, [pc, #284]	; (8001190 <main+0x604>)
 8001074:	f7ff fbb2 	bl	80007dc <print>
			 setCursor(0, 2);
 8001078:	2102      	movs	r1, #2
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff fb66 	bl	800074c <setCursor>


			   HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001080:	2200      	movs	r2, #0
 8001082:	4944      	ldr	r1, [pc, #272]	; (8001194 <main+0x608>)
 8001084:	4844      	ldr	r0, [pc, #272]	; (8001198 <main+0x60c>)
 8001086:	f006 f996 	bl	80073b6 <HAL_RTC_GetTime>
			   HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800108a:	2200      	movs	r2, #0
 800108c:	4943      	ldr	r1, [pc, #268]	; (800119c <main+0x610>)
 800108e:	4842      	ldr	r0, [pc, #264]	; (8001198 <main+0x60c>)
 8001090:	f006 fa73 	bl	800757a <HAL_RTC_GetDate>
 			   char lcddate[30];




snprintf(lcdtime,sizeof(lcdtime),"TIME: %02d:%02d:%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8001094:	4b3f      	ldr	r3, [pc, #252]	; (8001194 <main+0x608>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <main+0x608>)
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <main+0x608>)
 80010a2:	789b      	ldrb	r3, [r3, #2]
 80010a4:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	9200      	str	r2, [sp, #0]
 80010ac:	460b      	mov	r3, r1
 80010ae:	4a3c      	ldr	r2, [pc, #240]	; (80011a0 <main+0x614>)
 80010b0:	2114      	movs	r1, #20
 80010b2:	f008 fba9 	bl	8009808 <sniprintf>
print(lcdtime);
 80010b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fb8e 	bl	80007dc <print>
setCursor(0, 3);
 80010c0:	2103      	movs	r1, #3
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff fb42 	bl	800074c <setCursor>
snprintf(lcddate,sizeof(lcddate),"DATE: %d : %02d : %02d",sDate.Year,sDate.Month,sDate.Date);
 80010c8:	4b34      	ldr	r3, [pc, #208]	; (800119c <main+0x610>)
 80010ca:	78db      	ldrb	r3, [r3, #3]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4b33      	ldr	r3, [pc, #204]	; (800119c <main+0x610>)
 80010d0:	785b      	ldrb	r3, [r3, #1]
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b31      	ldr	r3, [pc, #196]	; (800119c <main+0x610>)
 80010d6:	789b      	ldrb	r3, [r3, #2]
 80010d8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	9200      	str	r2, [sp, #0]
 80010e0:	460b      	mov	r3, r1
 80010e2:	4a30      	ldr	r2, [pc, #192]	; (80011a4 <main+0x618>)
 80010e4:	211e      	movs	r1, #30
 80010e6:	f008 fb8f 	bl	8009808 <sniprintf>
print(lcddate);
 80010ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fb74 	bl	80007dc <print>

  		 }
		 if(menuposition==1){
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <main+0x5dc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d17e      	bne.n	80011fa <main+0x66e>

			 //set curserchoice
 			 setCursor(0, mode);
 80010fc:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <main+0x61c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4619      	mov	r1, r3
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff fb21 	bl	800074c <setCursor>
			 write(4);
 800110a:	2004      	movs	r0, #4
 800110c:	f7ff fbc8 	bl	80008a0 <write>
			   if(mode==2){
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <main+0x61c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d10e      	bne.n	8001136 <main+0x5aa>
			 	setCursor(0, 0);
 8001118:	2100      	movs	r1, #0
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff fb16 	bl	800074c <setCursor>
			 	print(" ");
 8001120:	4813      	ldr	r0, [pc, #76]	; (8001170 <main+0x5e4>)
 8001122:	f7ff fb5b 	bl	80007dc <print>
			 	setCursor(0, 1);
 8001126:	2101      	movs	r1, #1
 8001128:	2000      	movs	r0, #0
 800112a:	f7ff fb0f 	bl	800074c <setCursor>
			 	print(" ");
 800112e:	4810      	ldr	r0, [pc, #64]	; (8001170 <main+0x5e4>)
 8001130:	f7ff fb54 	bl	80007dc <print>
 8001134:	e04c      	b.n	80011d0 <main+0x644>

			 }
			 else if(mode==1){
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <main+0x61c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d136      	bne.n	80011ac <main+0x620>

			 	setCursor(0, 2);
 800113e:	2102      	movs	r1, #2
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff fb03 	bl	800074c <setCursor>
			 	print(" ");
 8001146:	480a      	ldr	r0, [pc, #40]	; (8001170 <main+0x5e4>)
 8001148:	f7ff fb48 	bl	80007dc <print>
			 	setCursor(0, 0);
 800114c:	2100      	movs	r1, #0
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff fafc 	bl	800074c <setCursor>
			 	print(" ");
 8001154:	4806      	ldr	r0, [pc, #24]	; (8001170 <main+0x5e4>)
 8001156:	f7ff fb41 	bl	80007dc <print>
 800115a:	e039      	b.n	80011d0 <main+0x644>
 800115c:	200005cc 	.word	0x200005cc
 8001160:	200005d4 	.word	0x200005d4
 8001164:	200005e4 	.word	0x200005e4
 8001168:	20000004 	.word	0x20000004
 800116c:	20000044 	.word	0x20000044
 8001170:	0800aa5c 	.word	0x0800aa5c
 8001174:	0800aa60 	.word	0x0800aa60
 8001178:	0800aa68 	.word	0x0800aa68
 800117c:	0800aa70 	.word	0x0800aa70
 8001180:	0800aa78 	.word	0x0800aa78
 8001184:	200005d8 	.word	0x200005d8
 8001188:	200005dc 	.word	0x200005dc
 800118c:	0800aa80 	.word	0x0800aa80
 8001190:	0800aa94 	.word	0x0800aa94
 8001194:	200005b4 	.word	0x200005b4
 8001198:	20000168 	.word	0x20000168
 800119c:	200005c8 	.word	0x200005c8
 80011a0:	0800aaa4 	.word	0x0800aaa4
 80011a4:	0800aabc 	.word	0x0800aabc
 80011a8:	200005d0 	.word	0x200005d0
			 }
			 else if(mode==0){
 80011ac:	4ba6      	ldr	r3, [pc, #664]	; (8001448 <main+0x8bc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10d      	bne.n	80011d0 <main+0x644>
			 	setCursor(0, 1);
 80011b4:	2101      	movs	r1, #1
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff fac8 	bl	800074c <setCursor>
			 	print(" ");
 80011bc:	48a3      	ldr	r0, [pc, #652]	; (800144c <main+0x8c0>)
 80011be:	f7ff fb0d 	bl	80007dc <print>
			 	setCursor(0, 2);
 80011c2:	2102      	movs	r1, #2
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff fac1 	bl	800074c <setCursor>
			 	print(" ");
 80011ca:	48a0      	ldr	r0, [pc, #640]	; (800144c <main+0x8c0>)
 80011cc:	f7ff fb06 	bl	80007dc <print>

			 }
	 			 setCursor(1,0);
 80011d0:	2100      	movs	r1, #0
 80011d2:	2001      	movs	r0, #1
 80011d4:	f7ff faba 	bl	800074c <setCursor>
	 			 print ("MODE 1");
 80011d8:	489d      	ldr	r0, [pc, #628]	; (8001450 <main+0x8c4>)
 80011da:	f7ff faff 	bl	80007dc <print>

	 			 setCursor(1,1);
 80011de:	2101      	movs	r1, #1
 80011e0:	2001      	movs	r0, #1
 80011e2:	f7ff fab3 	bl	800074c <setCursor>
	 			 print ("MODE 2");
 80011e6:	489b      	ldr	r0, [pc, #620]	; (8001454 <main+0x8c8>)
 80011e8:	f7ff faf8 	bl	80007dc <print>

	 			 setCursor(1,2);
 80011ec:	2102      	movs	r1, #2
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff faac 	bl	800074c <setCursor>
	 			 print ("MODE 3");
 80011f4:	4898      	ldr	r0, [pc, #608]	; (8001458 <main+0x8cc>)
 80011f6:	f7ff faf1 	bl	80007dc <print>

		 }
if(menuposition==2){
 80011fa:	4b98      	ldr	r3, [pc, #608]	; (800145c <main+0x8d0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	f040 80ee 	bne.w	80013e0 <main+0x854>
	 setCursor(0, settingoption);
 8001204:	4b96      	ldr	r3, [pc, #600]	; (8001460 <main+0x8d4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4619      	mov	r1, r3
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fa9d 	bl	800074c <setCursor>
				 write(4);
 8001212:	2004      	movs	r0, #4
 8001214:	f7ff fb44 	bl	80008a0 <write>
				   if(settingoption==3){
 8001218:	4b91      	ldr	r3, [pc, #580]	; (8001460 <main+0x8d4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b03      	cmp	r3, #3
 800121e:	d114      	bne.n	800124a <main+0x6be>
							 	setCursor(0, 0);
 8001220:	2100      	movs	r1, #0
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff fa92 	bl	800074c <setCursor>
							 	print(" ");
 8001228:	4888      	ldr	r0, [pc, #544]	; (800144c <main+0x8c0>)
 800122a:	f7ff fad7 	bl	80007dc <print>
							 	setCursor(0, 1);
 800122e:	2101      	movs	r1, #1
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff fa8b 	bl	800074c <setCursor>
							 	print(" ");
 8001236:	4885      	ldr	r0, [pc, #532]	; (800144c <main+0x8c0>)
 8001238:	f7ff fad0 	bl	80007dc <print>
							 	setCursor(0, 2);
 800123c:	2102      	movs	r1, #2
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff fa84 	bl	800074c <setCursor>
							 	print(" ");
 8001244:	4881      	ldr	r0, [pc, #516]	; (800144c <main+0x8c0>)
 8001246:	f7ff fac9 	bl	80007dc <print>
							 }
				   if(settingoption==2){
 800124a:	4b85      	ldr	r3, [pc, #532]	; (8001460 <main+0x8d4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d115      	bne.n	800127e <main+0x6f2>
				 	setCursor(0, 0);
 8001252:	2100      	movs	r1, #0
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff fa79 	bl	800074c <setCursor>
				 	print(" ");
 800125a:	487c      	ldr	r0, [pc, #496]	; (800144c <main+0x8c0>)
 800125c:	f7ff fabe 	bl	80007dc <print>
				 	setCursor(0, 1);
 8001260:	2101      	movs	r1, #1
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff fa72 	bl	800074c <setCursor>
				 	print(" ");
 8001268:	4878      	ldr	r0, [pc, #480]	; (800144c <main+0x8c0>)
 800126a:	f7ff fab7 	bl	80007dc <print>
				 	setCursor(0, 3);
 800126e:	2103      	movs	r1, #3
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fa6b 	bl	800074c <setCursor>
				 	print(" ");
 8001276:	4875      	ldr	r0, [pc, #468]	; (800144c <main+0x8c0>)
 8001278:	f7ff fab0 	bl	80007dc <print>
 800127c:	e032      	b.n	80012e4 <main+0x758>
				 }
				 else if(settingoption==1){
 800127e:	4b78      	ldr	r3, [pc, #480]	; (8001460 <main+0x8d4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d115      	bne.n	80012b2 <main+0x726>
					 	setCursor(0, 3);
 8001286:	2103      	movs	r1, #3
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fa5f 	bl	800074c <setCursor>
					 	print(" ");
 800128e:	486f      	ldr	r0, [pc, #444]	; (800144c <main+0x8c0>)
 8001290:	f7ff faa4 	bl	80007dc <print>
				 	setCursor(0, 2);
 8001294:	2102      	movs	r1, #2
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fa58 	bl	800074c <setCursor>
				 	print(" ");
 800129c:	486b      	ldr	r0, [pc, #428]	; (800144c <main+0x8c0>)
 800129e:	f7ff fa9d 	bl	80007dc <print>
				 	setCursor(0, 0);
 80012a2:	2100      	movs	r1, #0
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff fa51 	bl	800074c <setCursor>
				 	print(" ");
 80012aa:	4868      	ldr	r0, [pc, #416]	; (800144c <main+0x8c0>)
 80012ac:	f7ff fa96 	bl	80007dc <print>
 80012b0:	e018      	b.n	80012e4 <main+0x758>
				 }
				 else if(settingoption==0){
 80012b2:	4b6b      	ldr	r3, [pc, #428]	; (8001460 <main+0x8d4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d114      	bne.n	80012e4 <main+0x758>
				 	setCursor(0, 1);
 80012ba:	2101      	movs	r1, #1
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff fa45 	bl	800074c <setCursor>
				 	print(" ");
 80012c2:	4862      	ldr	r0, [pc, #392]	; (800144c <main+0x8c0>)
 80012c4:	f7ff fa8a 	bl	80007dc <print>
				 	setCursor(0, 2);
 80012c8:	2102      	movs	r1, #2
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff fa3e 	bl	800074c <setCursor>
				 	print(" ");
 80012d0:	485e      	ldr	r0, [pc, #376]	; (800144c <main+0x8c0>)
 80012d2:	f7ff fa83 	bl	80007dc <print>
				 	setCursor(0,3);
 80012d6:	2103      	movs	r1, #3
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff fa37 	bl	800074c <setCursor>
				 	print(" ");
 80012de:	485b      	ldr	r0, [pc, #364]	; (800144c <main+0x8c0>)
 80012e0:	f7ff fa7c 	bl	80007dc <print>

				 }
	 			   char set[20];

		 			 setCursor(1,0);
 80012e4:	2100      	movs	r1, #0
 80012e6:	2001      	movs	r0, #1
 80012e8:	f7ff fa30 	bl	800074c <setCursor>
		 			 print ("Health");
 80012ec:	485d      	ldr	r0, [pc, #372]	; (8001464 <main+0x8d8>)
 80012ee:	f7ff fa75 	bl	80007dc <print>
		 			 setCursor(10,0);
 80012f2:	2100      	movs	r1, #0
 80012f4:	200a      	movs	r0, #10
 80012f6:	f7ff fa29 	bl	800074c <setCursor>
		 			snprintf(set,sizeof(set), "%02d",health);
 80012fa:	4b5b      	ldr	r3, [pc, #364]	; (8001468 <main+0x8dc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001302:	4a5a      	ldr	r2, [pc, #360]	; (800146c <main+0x8e0>)
 8001304:	2114      	movs	r1, #20
 8001306:	f008 fa7f 	bl	8009808 <sniprintf>
		 			print(set);
 800130a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fa64 	bl	80007dc <print>
		 			 setCursor(1,1);
 8001314:	2101      	movs	r1, #1
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff fa18 	bl	800074c <setCursor>
		 			 print ("Speed");
 800131c:	4854      	ldr	r0, [pc, #336]	; (8001470 <main+0x8e4>)
 800131e:	f7ff fa5d 	bl	80007dc <print>
		 			 setCursor(10,1);
 8001322:	2101      	movs	r1, #1
 8001324:	200a      	movs	r0, #10
 8001326:	f7ff fa11 	bl	800074c <setCursor>
			 			snprintf(set,sizeof(set), "%02d",speed);
 800132a:	4b52      	ldr	r3, [pc, #328]	; (8001474 <main+0x8e8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001332:	4a4e      	ldr	r2, [pc, #312]	; (800146c <main+0x8e0>)
 8001334:	2114      	movs	r1, #20
 8001336:	f008 fa67 	bl	8009808 <sniprintf>
			 			print(set);		 			 setCursor(1,2);
 800133a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fa4c 	bl	80007dc <print>
 8001344:	2102      	movs	r1, #2
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff fa00 	bl	800074c <setCursor>
		 			 print ("volume");
 800134c:	484a      	ldr	r0, [pc, #296]	; (8001478 <main+0x8ec>)
 800134e:	f7ff fa45 	bl	80007dc <print>
		 			 setCursor(10,2);
 8001352:	2102      	movs	r1, #2
 8001354:	200a      	movs	r0, #10
 8001356:	f7ff f9f9 	bl	800074c <setCursor>
			 			snprintf(set,sizeof(set), "%02d",vol);
 800135a:	4b48      	ldr	r3, [pc, #288]	; (800147c <main+0x8f0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001362:	4a42      	ldr	r2, [pc, #264]	; (800146c <main+0x8e0>)
 8001364:	2114      	movs	r1, #20
 8001366:	f008 fa4f 	bl	8009808 <sniprintf>
			 			print(set);		 			 setCursor(1,3);
 800136a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fa34 	bl	80007dc <print>
 8001374:	2103      	movs	r1, #3
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff f9e8 	bl	800074c <setCursor>
		 			 print ("block");
 800137c:	4840      	ldr	r0, [pc, #256]	; (8001480 <main+0x8f4>)
 800137e:	f7ff fa2d 	bl	80007dc <print>
		 			 setCursor(10,3);
 8001382:	2103      	movs	r1, #3
 8001384:	200a      	movs	r0, #10
 8001386:	f7ff f9e1 	bl	800074c <setCursor>
			 			snprintf(set,sizeof(set), "%02d",blocks);
 800138a:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <main+0x8f8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001392:	4a36      	ldr	r2, [pc, #216]	; (800146c <main+0x8e0>)
 8001394:	2114      	movs	r1, #20
 8001396:	f008 fa37 	bl	8009808 <sniprintf>
			 			print(set);
 800139a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fa1c 	bl	80007dc <print>


			 			 setCursor(14,1);
 80013a4:	2101      	movs	r1, #1
 80013a6:	200e      	movs	r0, #14
 80013a8:	f7ff f9d0 	bl	800074c <setCursor>
			 			print ("NAME:");
 80013ac:	4836      	ldr	r0, [pc, #216]	; (8001488 <main+0x8fc>)
 80013ae:	f7ff fa15 	bl	80007dc <print>
			 			 setCursor(13,2);
 80013b2:	2102      	movs	r1, #2
 80013b4:	200d      	movs	r0, #13
 80013b6:	f7ff f9c9 	bl	800074c <setCursor>
			 			print (names);
 80013ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fa0c 	bl	80007dc <print>
			 			setCursor(1,1);
 80013c4:	2101      	movs	r1, #1
 80013c6:	2001      	movs	r0, #1
 80013c8:	f7ff f9c0 	bl	800074c <setCursor>
			 					 			 print ("Speed");
 80013cc:	4828      	ldr	r0, [pc, #160]	; (8001470 <main+0x8e4>)
 80013ce:	f7ff fa05 	bl	80007dc <print>
			 					 			setCursor(0, 1);
 80013d2:	2101      	movs	r1, #1
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff f9b9 	bl	800074c <setCursor>
			 					 			print(" ");
 80013da:	481c      	ldr	r0, [pc, #112]	; (800144c <main+0x8c0>)
 80013dc:	f7ff f9fe 	bl	80007dc <print>
			 }

if(menuposition==0){
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <main+0x8d0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f47f aca6 	bne.w	8000d36 <main+0x1aa>
//initiate
	createChar(5,headsnake);
 80013ea:	4928      	ldr	r1, [pc, #160]	; (800148c <main+0x900>)
 80013ec:	2005      	movs	r0, #5
 80013ee:	f7ff fa20 	bl	8000832 <createChar>
	createChar(6,snake);
 80013f2:	4927      	ldr	r1, [pc, #156]	; (8001490 <main+0x904>)
 80013f4:	2006      	movs	r0, #6
 80013f6:	f7ff fa1c 	bl	8000832 <createChar>
	setCursor(0, 0);
 80013fa:	2100      	movs	r1, #0
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff f9a5 	bl	800074c <setCursor>
	write(6);
 8001402:	2006      	movs	r0, #6
 8001404:	f7ff fa4c 	bl	80008a0 <write>
	setCursor(1, 0);
 8001408:	2100      	movs	r1, #0
 800140a:	2001      	movs	r0, #1
 800140c:	f7ff f99e 	bl	800074c <setCursor>
	write(5);
 8001410:	2005      	movs	r0, #5
 8001412:	f7ff fa45 	bl	80008a0 <write>

	initialize();
 8001416:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800141a:	469c      	mov	ip, r3
 800141c:	f001 fd38 	bl	8002e90 <initialize.0>
grid[3][3]=2;
//grid[0][15]=2;
*/
//mode1
  // Example game loop with 20 iterations
HAL_Delay(100);
 8001420:	2064      	movs	r0, #100	; 0x64
 8001422:	f003 fd71 	bl	8004f08 <HAL_Delay>

for(int j=0;j<10;j++){
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800142c:	e0ae      	b.n	800158c <main+0xa00>
	if(health<=0||point>=99){
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <main+0x8dc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	dd03      	ble.n	800143e <main+0x8b2>
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <main+0x908>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b62      	cmp	r3, #98	; 0x62
 800143c:	dd2e      	ble.n	800149c <main+0x910>
		finishgame=1;
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <main+0x90c>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
		break;
 8001444:	e0a7      	b.n	8001596 <main+0xa0a>
 8001446:	bf00      	nop
 8001448:	200005d0 	.word	0x200005d0
 800144c:	0800aa5c 	.word	0x0800aa5c
 8001450:	0800aad4 	.word	0x0800aad4
 8001454:	0800aadc 	.word	0x0800aadc
 8001458:	0800aae4 	.word	0x0800aae4
 800145c:	20000004 	.word	0x20000004
 8001460:	200005e0 	.word	0x200005e0
 8001464:	0800aaec 	.word	0x0800aaec
 8001468:	20000008 	.word	0x20000008
 800146c:	0800aaf4 	.word	0x0800aaf4
 8001470:	0800aafc 	.word	0x0800aafc
 8001474:	2000000c 	.word	0x2000000c
 8001478:	0800ab04 	.word	0x0800ab04
 800147c:	20000010 	.word	0x20000010
 8001480:	0800ab0c 	.word	0x0800ab0c
 8001484:	20000014 	.word	0x20000014
 8001488:	0800ab14 	.word	0x0800ab14
 800148c:	20000054 	.word	0x20000054
 8001490:	2000004c 	.word	0x2000004c
 8001494:	20000734 	.word	0x20000734
 8001498:	2000073c 	.word	0x2000073c
	}
	else{
	   HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800149c:	2200      	movs	r2, #0
 800149e:	499d      	ldr	r1, [pc, #628]	; (8001714 <main+0xb88>)
 80014a0:	489d      	ldr	r0, [pc, #628]	; (8001718 <main+0xb8c>)
 80014a2:	f005 ff88 	bl	80073b6 <HAL_RTC_GetTime>
			   HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80014a6:	2200      	movs	r2, #0
 80014a8:	499c      	ldr	r1, [pc, #624]	; (800171c <main+0xb90>)
 80014aa:	489b      	ldr	r0, [pc, #620]	; (8001718 <main+0xb8c>)
 80014ac:	f006 f865 	bl	800757a <HAL_RTC_GetDate>
minute=sTime.Seconds;
 80014b0:	4b98      	ldr	r3, [pc, #608]	; (8001714 <main+0xb88>)
 80014b2:	789b      	ldrb	r3, [r3, #2]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b9a      	ldr	r3, [pc, #616]	; (8001720 <main+0xb94>)
 80014b8:	601a      	str	r2, [r3, #0]

	HAL_Delay(speed*100);
 80014ba:	4b9a      	ldr	r3, [pc, #616]	; (8001724 <main+0xb98>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2264      	movs	r2, #100	; 0x64
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 fd1f 	bl	8004f08 <HAL_Delay>

	if(direction==1)currentDir=UP;
 80014ca:	4b97      	ldr	r3, [pc, #604]	; (8001728 <main+0xb9c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d102      	bne.n	80014d8 <main+0x94c>
 80014d2:	2300      	movs	r3, #0
 80014d4:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	if(direction==2)currentDir=DOWN;
 80014d8:	4b93      	ldr	r3, [pc, #588]	; (8001728 <main+0xb9c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d102      	bne.n	80014e6 <main+0x95a>
 80014e0:	2301      	movs	r3, #1
 80014e2:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	if(direction==3)currentDir=LEFT;
 80014e6:	4b90      	ldr	r3, [pc, #576]	; (8001728 <main+0xb9c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d102      	bne.n	80014f4 <main+0x968>
 80014ee:	2302      	movs	r3, #2
 80014f0:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	if(direction==4)currentDir=RIGHT;
 80014f4:	4b8c      	ldr	r3, [pc, #560]	; (8001728 <main+0xb9c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d102      	bne.n	8001502 <main+0x976>
 80014fc:	2303      	movs	r3, #3
 80014fe:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
//mode1
if(mode==0)
 8001502:	4b8a      	ldr	r3, [pc, #552]	; (800172c <main+0xba0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10a      	bne.n	8001520 <main+0x994>
	moveSnake(segment, currentDir, grid);
 800150a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800150c:	f897 1098 	ldrb.w	r1, [r7, #152]	; 0x98
 8001510:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001514:	4694      	mov	ip, r2
 8001516:	4a86      	ldr	r2, [pc, #536]	; (8001730 <main+0xba4>)
 8001518:	4618      	mov	r0, r3
 800151a:	f000 fc75 	bl	8001e08 <moveSnake.2>
 800151e:	e029      	b.n	8001574 <main+0x9e8>
//mode2
else if(mode==1){
 8001520:	4b82      	ldr	r3, [pc, #520]	; (800172c <main+0xba0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d10a      	bne.n	800153e <main+0x9b2>
	moveSnake2(segment, currentDir, grid);
 8001528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800152a:	f897 1098 	ldrb.w	r1, [r7, #152]	; 0x98
 800152e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001532:	4694      	mov	ip, r2
 8001534:	4a7e      	ldr	r2, [pc, #504]	; (8001730 <main+0xba4>)
 8001536:	4618      	mov	r0, r3
 8001538:	f000 ffa2 	bl	8002480 <moveSnake2.13>
 800153c:	e01a      	b.n	8001574 <main+0x9e8>

}
//mode3
else if(mode==2){
 800153e:	4b7b      	ldr	r3, [pc, #492]	; (800172c <main+0xba0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d116      	bne.n	8001574 <main+0x9e8>

if(j==8){
 8001546:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800154a:	2b08      	cmp	r3, #8
 800154c:	d108      	bne.n	8001560 <main+0x9d4>
	if(speed>=1)
 800154e:	4b75      	ldr	r3, [pc, #468]	; (8001724 <main+0xb98>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	dd04      	ble.n	8001560 <main+0x9d4>
	speed--;
 8001556:	4b73      	ldr	r3, [pc, #460]	; (8001724 <main+0xb98>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3b01      	subs	r3, #1
 800155c:	4a71      	ldr	r2, [pc, #452]	; (8001724 <main+0xb98>)
 800155e:	6013      	str	r3, [r2, #0]
}
	moveSnake3(segment, currentDir, grid);
 8001560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001562:	f897 1098 	ldrb.w	r1, [r7, #152]	; 0x98
 8001566:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800156a:	4694      	mov	ip, r2
 800156c:	4a70      	ldr	r2, [pc, #448]	; (8001730 <main+0xba4>)
 800156e:	4618      	mov	r0, r3
 8001570:	f001 fa22 	bl	80029b8 <moveSnake3.14>


}

if(j==9)j=0;
 8001574:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001578:	2b09      	cmp	r3, #9
 800157a:	d102      	bne.n	8001582 <main+0x9f6>
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
for(int j=0;j<10;j++){
 8001582:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001586:	3301      	adds	r3, #1
 8001588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800158c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001590:	2b09      	cmp	r3, #9
 8001592:	f77f af4c 	ble.w	800142e <main+0x8a2>
}}
if (finishgame==1){
 8001596:	4b67      	ldr	r3, [pc, #412]	; (8001734 <main+0xba8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d12b      	bne.n	80015f6 <main+0xa6a>
	finishgame=2;
 800159e:	4b65      	ldr	r3, [pc, #404]	; (8001734 <main+0xba8>)
 80015a0:	2202      	movs	r2, #2
 80015a2:	601a      	str	r2, [r3, #0]
	clear();
 80015a4:	f7ff f8c8 	bl	8000738 <clear>

	for(int i=1;i<18;i++){
 80015a8:	2301      	movs	r3, #1
 80015aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80015ae:	e01e      	b.n	80015ee <main+0xa62>

		setCursor(i-1, 2);
 80015b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2102      	movs	r1, #2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff f8c5 	bl	800074c <setCursor>
		print(" ");
 80015c2:	485d      	ldr	r0, [pc, #372]	; (8001738 <main+0xbac>)
 80015c4:	f7ff f90a 	bl	80007dc <print>
		setCursor(i, 2);
 80015c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2102      	movs	r1, #2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff f8bb 	bl	800074c <setCursor>
print("FINISH");
 80015d6:	4859      	ldr	r0, [pc, #356]	; (800173c <main+0xbb0>)
 80015d8:	f7ff f900 	bl	80007dc <print>
HAL_Delay(500);
 80015dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e0:	f003 fc92 	bl	8004f08 <HAL_Delay>
	for(int i=1;i<18;i++){
 80015e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015e8:	3301      	adds	r3, #1
 80015ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80015ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015f2:	2b11      	cmp	r3, #17
 80015f4:	dddc      	ble.n	80015b0 <main+0xa24>

	}
}
clear();
 80015f6:	f7ff f89f 	bl	8000738 <clear>
setCursor(0, 0);
 80015fa:	2100      	movs	r1, #0
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff f8a5 	bl	800074c <setCursor>
print("Health:");
 8001602:	484f      	ldr	r0, [pc, #316]	; (8001740 <main+0xbb4>)
 8001604:	f7ff f8ea 	bl	80007dc <print>
setCursor(10, 0);
 8001608:	2100      	movs	r1, #0
 800160a:	200a      	movs	r0, #10
 800160c:	f7ff f89e 	bl	800074c <setCursor>
char set[20];
snprintf(set,sizeof(set), "%02d",health);
 8001610:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <main+0xbb8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f107 0014 	add.w	r0, r7, #20
 8001618:	4a4b      	ldr	r2, [pc, #300]	; (8001748 <main+0xbbc>)
 800161a:	2114      	movs	r1, #20
 800161c:	f008 f8f4 	bl	8009808 <sniprintf>
print(set);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff f8d9 	bl	80007dc <print>

setCursor(0, 1);
 800162a:	2101      	movs	r1, #1
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff f88d 	bl	800074c <setCursor>
print("Point:");
 8001632:	4846      	ldr	r0, [pc, #280]	; (800174c <main+0xbc0>)
 8001634:	f7ff f8d2 	bl	80007dc <print>
setCursor(10, 1);
 8001638:	2101      	movs	r1, #1
 800163a:	200a      	movs	r0, #10
 800163c:	f7ff f886 	bl	800074c <setCursor>
set[20];
snprintf(set,sizeof(set), "%02d",point);
 8001640:	4b43      	ldr	r3, [pc, #268]	; (8001750 <main+0xbc4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f107 0014 	add.w	r0, r7, #20
 8001648:	4a3f      	ldr	r2, [pc, #252]	; (8001748 <main+0xbbc>)
 800164a:	2114      	movs	r1, #20
 800164c:	f008 f8dc 	bl	8009808 <sniprintf>
print(set);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff f8c1 	bl	80007dc <print>



char prnt[20];
sprintf(prnt, "%02d",health);
 800165a:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <main+0xbb8>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	463b      	mov	r3, r7
 8001660:	4939      	ldr	r1, [pc, #228]	; (8001748 <main+0xbbc>)
 8001662:	4618      	mov	r0, r3
 8001664:	f008 f904 	bl	8009870 <siprintf>

HAL_UART_Transmit(&huart3,"NAME:",5, 1000);
 8001668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166c:	2205      	movs	r2, #5
 800166e:	4939      	ldr	r1, [pc, #228]	; (8001754 <main+0xbc8>)
 8001670:	4839      	ldr	r0, [pc, #228]	; (8001758 <main+0xbcc>)
 8001672:	f007 f9c5 	bl	8008a00 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart3,"PLAYER1",7, 1000);
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	2207      	movs	r2, #7
 800167c:	4937      	ldr	r1, [pc, #220]	; (800175c <main+0xbd0>)
 800167e:	4836      	ldr	r0, [pc, #216]	; (8001758 <main+0xbcc>)
 8001680:	f007 f9be 	bl	8008a00 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart3,"\n",1, 1000);
 8001684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001688:	2201      	movs	r2, #1
 800168a:	4935      	ldr	r1, [pc, #212]	; (8001760 <main+0xbd4>)
 800168c:	4832      	ldr	r0, [pc, #200]	; (8001758 <main+0xbcc>)
 800168e:	f007 f9b7 	bl	8008a00 <HAL_UART_Transmit>


HAL_UART_Transmit(&huart3,"health:",7, 1000);
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	2207      	movs	r2, #7
 8001698:	4932      	ldr	r1, [pc, #200]	; (8001764 <main+0xbd8>)
 800169a:	482f      	ldr	r0, [pc, #188]	; (8001758 <main+0xbcc>)
 800169c:	f007 f9b0 	bl	8008a00 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart3,prnt,strlen(prnt), 1000);
 80016a0:	463b      	mov	r3, r7
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fd94 	bl	80001d0 <strlen>
 80016a8:	4603      	mov	r3, r0
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4639      	mov	r1, r7
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	4829      	ldr	r0, [pc, #164]	; (8001758 <main+0xbcc>)
 80016b4:	f007 f9a4 	bl	8008a00 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart3,"\n",1, 1000);
 80016b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016bc:	2201      	movs	r2, #1
 80016be:	4928      	ldr	r1, [pc, #160]	; (8001760 <main+0xbd4>)
 80016c0:	4825      	ldr	r0, [pc, #148]	; (8001758 <main+0xbcc>)
 80016c2:	f007 f99d 	bl	8008a00 <HAL_UART_Transmit>


 sprintf(prnt, "%02d",point);
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <main+0xbc4>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	463b      	mov	r3, r7
 80016cc:	491e      	ldr	r1, [pc, #120]	; (8001748 <main+0xbbc>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f008 f8ce 	bl	8009870 <siprintf>

HAL_UART_Transmit(&huart3,"points:",7, 1000);
 80016d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d8:	2207      	movs	r2, #7
 80016da:	4923      	ldr	r1, [pc, #140]	; (8001768 <main+0xbdc>)
 80016dc:	481e      	ldr	r0, [pc, #120]	; (8001758 <main+0xbcc>)
 80016de:	f007 f98f 	bl	8008a00 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart3,prnt,strlen(prnt), 1000);
 80016e2:	463b      	mov	r3, r7
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fd73 	bl	80001d0 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4639      	mov	r1, r7
 80016f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f4:	4818      	ldr	r0, [pc, #96]	; (8001758 <main+0xbcc>)
 80016f6:	f007 f983 	bl	8008a00 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart3,"\n",1, 1000);
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	2201      	movs	r2, #1
 8001700:	4917      	ldr	r1, [pc, #92]	; (8001760 <main+0xbd4>)
 8001702:	4815      	ldr	r0, [pc, #84]	; (8001758 <main+0xbcc>)
 8001704:	f007 f97c 	bl	8008a00 <HAL_UART_Transmit>





HAL_Delay(1000000);
 8001708:	4818      	ldr	r0, [pc, #96]	; (800176c <main+0xbe0>)
 800170a:	f003 fbfd 	bl	8004f08 <HAL_Delay>
	  if(menu<1){
 800170e:	f7ff bb12 	b.w	8000d36 <main+0x1aa>
 8001712:	bf00      	nop
 8001714:	200005b4 	.word	0x200005b4
 8001718:	20000168 	.word	0x20000168
 800171c:	200005c8 	.word	0x200005c8
 8001720:	20000738 	.word	0x20000738
 8001724:	2000000c 	.word	0x2000000c
 8001728:	20000018 	.word	0x20000018
 800172c:	200005d0 	.word	0x200005d0
 8001730:	200005f4 	.word	0x200005f4
 8001734:	2000073c 	.word	0x2000073c
 8001738:	0800aa5c 	.word	0x0800aa5c
 800173c:	0800ab1c 	.word	0x0800ab1c
 8001740:	0800ab24 	.word	0x0800ab24
 8001744:	20000008 	.word	0x20000008
 8001748:	0800aaf4 	.word	0x0800aaf4
 800174c:	0800ab2c 	.word	0x0800ab2c
 8001750:	20000734 	.word	0x20000734
 8001754:	0800ab14 	.word	0x0800ab14
 8001758:	20000238 	.word	0x20000238
 800175c:	0800ab34 	.word	0x0800ab34
 8001760:	0800ab3c 	.word	0x0800ab3c
 8001764:	0800ab40 	.word	0x0800ab40
 8001768:	0800ab48 	.word	0x0800ab48
 800176c:	000f4240 	.word	0x000f4240

08001770 <On_First7segment.6>:
  void On_First7segment(){
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	f8c7 c004 	str.w	ip, [r7, #4]
  	   	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,0);
 800177a:	2200      	movs	r2, #0
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	4803      	ldr	r0, [pc, #12]	; (800178c <On_First7segment.6+0x1c>)
 8001780:	f003 fe8a 	bl	8005498 <HAL_GPIO_WritePin>
  	   }
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	48000800 	.word	0x48000800

08001790 <On_Second7segment.11>:
  	   void On_Second7segment(){
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	f8c7 c004 	str.w	ip, [r7, #4]
  	   	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,0);}
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a0:	4803      	ldr	r0, [pc, #12]	; (80017b0 <On_Second7segment.11+0x20>)
 80017a2:	f003 fe79 	bl	8005498 <HAL_GPIO_WritePin>
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	48000800 	.word	0x48000800

080017b4 <Off_First7segment.7>:
  	   void Off_First7segment(){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	f8c7 c004 	str.w	ip, [r7, #4]
   	   	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,1);
 80017be:	2201      	movs	r2, #1
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	4815      	ldr	r0, [pc, #84]	; (8001818 <Off_First7segment.7+0x64>)
 80017c4:	f003 fe68 	bl	8005498 <HAL_GPIO_WritePin>
  	   	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2101      	movs	r1, #1
 80017cc:	4812      	ldr	r0, [pc, #72]	; (8001818 <Off_First7segment.7+0x64>)
 80017ce:	f003 fe63 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2102      	movs	r1, #2
 80017d6:	4810      	ldr	r0, [pc, #64]	; (8001818 <Off_First7segment.7+0x64>)
 80017d8:	f003 fe5e 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2104      	movs	r1, #4
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <Off_First7segment.7+0x64>)
 80017e2:	f003 fe59 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2108      	movs	r1, #8
 80017ea:	480b      	ldr	r0, [pc, #44]	; (8001818 <Off_First7segment.7+0x64>)
 80017ec:	f003 fe54 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2110      	movs	r1, #16
 80017f4:	4808      	ldr	r0, [pc, #32]	; (8001818 <Off_First7segment.7+0x64>)
 80017f6:	f003 fe4f 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2120      	movs	r1, #32
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <Off_First7segment.7+0x64>)
 8001800:	f003 fe4a 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0);
 8001804:	2200      	movs	r2, #0
 8001806:	2140      	movs	r1, #64	; 0x40
 8001808:	4803      	ldr	r0, [pc, #12]	; (8001818 <Off_First7segment.7+0x64>)
 800180a:	f003 fe45 	bl	8005498 <HAL_GPIO_WritePin>
  	   }
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	48000800 	.word	0x48000800

0800181c <Off_Second7segment.8>:
  	   void Off_Second7segment(){
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	f8c7 c004 	str.w	ip, [r7, #4]
  	   	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,1);
 8001826:	2201      	movs	r2, #1
 8001828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800182c:	4814      	ldr	r0, [pc, #80]	; (8001880 <Off_Second7segment.8+0x64>)
 800182e:	f003 fe33 	bl	8005498 <HAL_GPIO_WritePin>
  	   	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,0);
 8001832:	2200      	movs	r2, #0
 8001834:	2101      	movs	r1, #1
 8001836:	4812      	ldr	r0, [pc, #72]	; (8001880 <Off_Second7segment.8+0x64>)
 8001838:	f003 fe2e 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
 800183c:	2200      	movs	r2, #0
 800183e:	2102      	movs	r1, #2
 8001840:	480f      	ldr	r0, [pc, #60]	; (8001880 <Off_Second7segment.8+0x64>)
 8001842:	f003 fe29 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,0);
 8001846:	2200      	movs	r2, #0
 8001848:	2104      	movs	r1, #4
 800184a:	480d      	ldr	r0, [pc, #52]	; (8001880 <Off_Second7segment.8+0x64>)
 800184c:	f003 fe24 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,0);
 8001850:	2200      	movs	r2, #0
 8001852:	2108      	movs	r1, #8
 8001854:	480a      	ldr	r0, [pc, #40]	; (8001880 <Off_Second7segment.8+0x64>)
 8001856:	f003 fe1f 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,0);
 800185a:	2200      	movs	r2, #0
 800185c:	2110      	movs	r1, #16
 800185e:	4808      	ldr	r0, [pc, #32]	; (8001880 <Off_Second7segment.8+0x64>)
 8001860:	f003 fe1a 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,0);
 8001864:	2200      	movs	r2, #0
 8001866:	2120      	movs	r1, #32
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <Off_Second7segment.8+0x64>)
 800186a:	f003 fe15 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0);}
 800186e:	2200      	movs	r2, #0
 8001870:	2140      	movs	r1, #64	; 0x40
 8001872:	4803      	ldr	r0, [pc, #12]	; (8001880 <Off_Second7segment.8+0x64>)
 8001874:	f003 fe10 	bl	8005498 <HAL_GPIO_WritePin>
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	48000800 	.word	0x48000800

08001884 <Off_Third7segment.9>:
  	   void Off_Third7segment(){
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	f8c7 c004 	str.w	ip, [r7, #4]
  	   	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,1);
 800188e:	2201      	movs	r2, #1
 8001890:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001894:	4814      	ldr	r0, [pc, #80]	; (80018e8 <Off_Third7segment.9+0x64>)
 8001896:	f003 fdff 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,0);
 800189a:	2200      	movs	r2, #0
 800189c:	2101      	movs	r1, #1
 800189e:	4812      	ldr	r0, [pc, #72]	; (80018e8 <Off_Third7segment.9+0x64>)
 80018a0:	f003 fdfa 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2102      	movs	r1, #2
 80018a8:	480f      	ldr	r0, [pc, #60]	; (80018e8 <Off_Third7segment.9+0x64>)
 80018aa:	f003 fdf5 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  		   		  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2104      	movs	r1, #4
 80018b2:	480d      	ldr	r0, [pc, #52]	; (80018e8 <Off_Third7segment.9+0x64>)
 80018b4:	f003 fdf0 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2108      	movs	r1, #8
 80018bc:	480a      	ldr	r0, [pc, #40]	; (80018e8 <Off_Third7segment.9+0x64>)
 80018be:	f003 fdeb 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2110      	movs	r1, #16
 80018c6:	4808      	ldr	r0, [pc, #32]	; (80018e8 <Off_Third7segment.9+0x64>)
 80018c8:	f003 fde6 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2120      	movs	r1, #32
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <Off_Third7segment.9+0x64>)
 80018d2:	f003 fde1 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2140      	movs	r1, #64	; 0x40
 80018da:	4803      	ldr	r0, [pc, #12]	; (80018e8 <Off_Third7segment.9+0x64>)
 80018dc:	f003 fddc 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  }
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	48000800 	.word	0x48000800

080018ec <Off_Forth7segment.10>:
  	   void Off_Forth7segment(){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	f8c7 c004 	str.w	ip, [r7, #4]
  	   	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,1);
 80018f6:	2201      	movs	r2, #1
 80018f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018fc:	4814      	ldr	r0, [pc, #80]	; (8001950 <Off_Forth7segment.10+0x64>)
 80018fe:	f003 fdcb 	bl	8005498 <HAL_GPIO_WritePin>
  	   	 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,0);
 8001902:	2200      	movs	r2, #0
 8001904:	2101      	movs	r1, #1
 8001906:	4812      	ldr	r0, [pc, #72]	; (8001950 <Off_Forth7segment.10+0x64>)
 8001908:	f003 fdc6 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
 800190c:	2200      	movs	r2, #0
 800190e:	2102      	movs	r1, #2
 8001910:	480f      	ldr	r0, [pc, #60]	; (8001950 <Off_Forth7segment.10+0x64>)
 8001912:	f003 fdc1 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,0);
 8001916:	2200      	movs	r2, #0
 8001918:	2104      	movs	r1, #4
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <Off_Forth7segment.10+0x64>)
 800191c:	f003 fdbc 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,0);
 8001920:	2200      	movs	r2, #0
 8001922:	2108      	movs	r1, #8
 8001924:	480a      	ldr	r0, [pc, #40]	; (8001950 <Off_Forth7segment.10+0x64>)
 8001926:	f003 fdb7 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,0);
 800192a:	2200      	movs	r2, #0
 800192c:	2110      	movs	r1, #16
 800192e:	4808      	ldr	r0, [pc, #32]	; (8001950 <Off_Forth7segment.10+0x64>)
 8001930:	f003 fdb2 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,0);
 8001934:	2200      	movs	r2, #0
 8001936:	2120      	movs	r1, #32
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <Off_Forth7segment.10+0x64>)
 800193a:	f003 fdad 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0);
 800193e:	2200      	movs	r2, #0
 8001940:	2140      	movs	r1, #64	; 0x40
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <Off_Forth7segment.10+0x64>)
 8001944:	f003 fda8 	bl	8005498 <HAL_GPIO_WritePin>
  	   }
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	48000800 	.word	0x48000800

08001954 <Number.12>:
  	  void Number (int number){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	f8c7 c000 	str.w	ip, [r7]
  	  	  if(number==0){
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d11d      	bne.n	80019a2 <Number.12+0x4e>
  	  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8001966:	2201      	movs	r2, #1
 8001968:	2101      	movs	r1, #1
 800196a:	4889      	ldr	r0, [pc, #548]	; (8001b90 <Number.12+0x23c>)
 800196c:	f003 fd94 	bl	8005498 <HAL_GPIO_WritePin>
  	  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8001970:	2201      	movs	r2, #1
 8001972:	2102      	movs	r1, #2
 8001974:	4886      	ldr	r0, [pc, #536]	; (8001b90 <Number.12+0x23c>)
 8001976:	f003 fd8f 	bl	8005498 <HAL_GPIO_WritePin>
  	  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 800197a:	2201      	movs	r2, #1
 800197c:	2104      	movs	r1, #4
 800197e:	4884      	ldr	r0, [pc, #528]	; (8001b90 <Number.12+0x23c>)
 8001980:	f003 fd8a 	bl	8005498 <HAL_GPIO_WritePin>
  	  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8001984:	2201      	movs	r2, #1
 8001986:	2108      	movs	r1, #8
 8001988:	4881      	ldr	r0, [pc, #516]	; (8001b90 <Number.12+0x23c>)
 800198a:	f003 fd85 	bl	8005498 <HAL_GPIO_WritePin>
  	  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,1);
 800198e:	2201      	movs	r2, #1
 8001990:	2110      	movs	r1, #16
 8001992:	487f      	ldr	r0, [pc, #508]	; (8001b90 <Number.12+0x23c>)
 8001994:	f003 fd80 	bl	8005498 <HAL_GPIO_WritePin>
  	  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8001998:	2201      	movs	r2, #1
 800199a:	2120      	movs	r1, #32
 800199c:	487c      	ldr	r0, [pc, #496]	; (8001b90 <Number.12+0x23c>)
 800199e:	f003 fd7b 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  if(number==1){
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d109      	bne.n	80019bc <Number.12+0x68>
  	  		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 80019a8:	2201      	movs	r2, #1
 80019aa:	2102      	movs	r1, #2
 80019ac:	4878      	ldr	r0, [pc, #480]	; (8001b90 <Number.12+0x23c>)
 80019ae:	f003 fd73 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 80019b2:	2201      	movs	r2, #1
 80019b4:	2104      	movs	r1, #4
 80019b6:	4876      	ldr	r0, [pc, #472]	; (8001b90 <Number.12+0x23c>)
 80019b8:	f003 fd6e 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  if(number==2){
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d118      	bne.n	80019f4 <Number.12+0xa0>
  	  		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 80019c2:	2201      	movs	r2, #1
 80019c4:	2101      	movs	r1, #1
 80019c6:	4872      	ldr	r0, [pc, #456]	; (8001b90 <Number.12+0x23c>)
 80019c8:	f003 fd66 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 80019cc:	2201      	movs	r2, #1
 80019ce:	2102      	movs	r1, #2
 80019d0:	486f      	ldr	r0, [pc, #444]	; (8001b90 <Number.12+0x23c>)
 80019d2:	f003 fd61 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 80019d6:	2201      	movs	r2, #1
 80019d8:	2108      	movs	r1, #8
 80019da:	486d      	ldr	r0, [pc, #436]	; (8001b90 <Number.12+0x23c>)
 80019dc:	f003 fd5c 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,1);
 80019e0:	2201      	movs	r2, #1
 80019e2:	2110      	movs	r1, #16
 80019e4:	486a      	ldr	r0, [pc, #424]	; (8001b90 <Number.12+0x23c>)
 80019e6:	f003 fd57 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 80019ea:	2201      	movs	r2, #1
 80019ec:	2140      	movs	r1, #64	; 0x40
 80019ee:	4868      	ldr	r0, [pc, #416]	; (8001b90 <Number.12+0x23c>)
 80019f0:	f003 fd52 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  if(number==3){
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d118      	bne.n	8001a2c <Number.12+0xd8>
  	  		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 80019fa:	2201      	movs	r2, #1
 80019fc:	2101      	movs	r1, #1
 80019fe:	4864      	ldr	r0, [pc, #400]	; (8001b90 <Number.12+0x23c>)
 8001a00:	f003 fd4a 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8001a04:	2201      	movs	r2, #1
 8001a06:	2102      	movs	r1, #2
 8001a08:	4861      	ldr	r0, [pc, #388]	; (8001b90 <Number.12+0x23c>)
 8001a0a:	f003 fd45 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2104      	movs	r1, #4
 8001a12:	485f      	ldr	r0, [pc, #380]	; (8001b90 <Number.12+0x23c>)
 8001a14:	f003 fd40 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2108      	movs	r1, #8
 8001a1c:	485c      	ldr	r0, [pc, #368]	; (8001b90 <Number.12+0x23c>)
 8001a1e:	f003 fd3b 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 8001a22:	2201      	movs	r2, #1
 8001a24:	2140      	movs	r1, #64	; 0x40
 8001a26:	485a      	ldr	r0, [pc, #360]	; (8001b90 <Number.12+0x23c>)
 8001a28:	f003 fd36 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  if(number==4){
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d113      	bne.n	8001a5a <Number.12+0x106>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8001a32:	2201      	movs	r2, #1
 8001a34:	2102      	movs	r1, #2
 8001a36:	4856      	ldr	r0, [pc, #344]	; (8001b90 <Number.12+0x23c>)
 8001a38:	f003 fd2e 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2104      	movs	r1, #4
 8001a40:	4853      	ldr	r0, [pc, #332]	; (8001b90 <Number.12+0x23c>)
 8001a42:	f003 fd29 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8001a46:	2201      	movs	r2, #1
 8001a48:	2120      	movs	r1, #32
 8001a4a:	4851      	ldr	r0, [pc, #324]	; (8001b90 <Number.12+0x23c>)
 8001a4c:	f003 fd24 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 8001a50:	2201      	movs	r2, #1
 8001a52:	2140      	movs	r1, #64	; 0x40
 8001a54:	484e      	ldr	r0, [pc, #312]	; (8001b90 <Number.12+0x23c>)
 8001a56:	f003 fd1f 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  if(number==5){
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d118      	bne.n	8001a92 <Number.12+0x13e>
  	  		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8001a60:	2201      	movs	r2, #1
 8001a62:	2101      	movs	r1, #1
 8001a64:	484a      	ldr	r0, [pc, #296]	; (8001b90 <Number.12+0x23c>)
 8001a66:	f003 fd17 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	4848      	ldr	r0, [pc, #288]	; (8001b90 <Number.12+0x23c>)
 8001a70:	f003 fd12 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8001a74:	2201      	movs	r2, #1
 8001a76:	2108      	movs	r1, #8
 8001a78:	4845      	ldr	r0, [pc, #276]	; (8001b90 <Number.12+0x23c>)
 8001a7a:	f003 fd0d 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2120      	movs	r1, #32
 8001a82:	4843      	ldr	r0, [pc, #268]	; (8001b90 <Number.12+0x23c>)
 8001a84:	f003 fd08 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2140      	movs	r1, #64	; 0x40
 8001a8c:	4840      	ldr	r0, [pc, #256]	; (8001b90 <Number.12+0x23c>)
 8001a8e:	f003 fd03 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  if(number==6){
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b06      	cmp	r3, #6
 8001a96:	d11d      	bne.n	8001ad4 <Number.12+0x180>
  	  		                  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	483c      	ldr	r0, [pc, #240]	; (8001b90 <Number.12+0x23c>)
 8001a9e:	f003 fcfb 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2104      	movs	r1, #4
 8001aa6:	483a      	ldr	r0, [pc, #232]	; (8001b90 <Number.12+0x23c>)
 8001aa8:	f003 fcf6 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8001aac:	2201      	movs	r2, #1
 8001aae:	2108      	movs	r1, #8
 8001ab0:	4837      	ldr	r0, [pc, #220]	; (8001b90 <Number.12+0x23c>)
 8001ab2:	f003 fcf1 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,1);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2110      	movs	r1, #16
 8001aba:	4835      	ldr	r0, [pc, #212]	; (8001b90 <Number.12+0x23c>)
 8001abc:	f003 fcec 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2120      	movs	r1, #32
 8001ac4:	4832      	ldr	r0, [pc, #200]	; (8001b90 <Number.12+0x23c>)
 8001ac6:	f003 fce7 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 8001aca:	2201      	movs	r2, #1
 8001acc:	2140      	movs	r1, #64	; 0x40
 8001ace:	4830      	ldr	r0, [pc, #192]	; (8001b90 <Number.12+0x23c>)
 8001ad0:	f003 fce2 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  if(number==7){
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b07      	cmp	r3, #7
 8001ad8:	d10e      	bne.n	8001af8 <Number.12+0x1a4>
  	  		 HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,1);
 8001ada:	2201      	movs	r2, #1
 8001adc:	2101      	movs	r1, #1
 8001ade:	482d      	ldr	r0, [pc, #180]	; (8001b94 <Number.12+0x240>)
 8001ae0:	f003 fcda 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,1);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2102      	movs	r1, #2
 8001ae8:	482a      	ldr	r0, [pc, #168]	; (8001b94 <Number.12+0x240>)
 8001aea:	f003 fcd5 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    	  	  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 8001aee:	2201      	movs	r2, #1
 8001af0:	2104      	movs	r1, #4
 8001af2:	4828      	ldr	r0, [pc, #160]	; (8001b94 <Number.12+0x240>)
 8001af4:	f003 fcd0 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  if(number==8){
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d122      	bne.n	8001b44 <Number.12+0x1f0>
  	  		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8001afe:	2201      	movs	r2, #1
 8001b00:	2101      	movs	r1, #1
 8001b02:	4823      	ldr	r0, [pc, #140]	; (8001b90 <Number.12+0x23c>)
 8001b04:	f003 fcc8 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	4820      	ldr	r0, [pc, #128]	; (8001b90 <Number.12+0x23c>)
 8001b0e:	f003 fcc3 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8001b12:	2201      	movs	r2, #1
 8001b14:	2104      	movs	r1, #4
 8001b16:	481e      	ldr	r0, [pc, #120]	; (8001b90 <Number.12+0x23c>)
 8001b18:	f003 fcbe 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2108      	movs	r1, #8
 8001b20:	481b      	ldr	r0, [pc, #108]	; (8001b90 <Number.12+0x23c>)
 8001b22:	f003 fcb9 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,1);
 8001b26:	2201      	movs	r2, #1
 8001b28:	2110      	movs	r1, #16
 8001b2a:	4819      	ldr	r0, [pc, #100]	; (8001b90 <Number.12+0x23c>)
 8001b2c:	f003 fcb4 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8001b30:	2201      	movs	r2, #1
 8001b32:	2120      	movs	r1, #32
 8001b34:	4816      	ldr	r0, [pc, #88]	; (8001b90 <Number.12+0x23c>)
 8001b36:	f003 fcaf 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2140      	movs	r1, #64	; 0x40
 8001b3e:	4814      	ldr	r0, [pc, #80]	; (8001b90 <Number.12+0x23c>)
 8001b40:	f003 fcaa 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  if(number==9){
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b09      	cmp	r3, #9
 8001b48:	d11d      	bne.n	8001b86 <Number.12+0x232>
  	  		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4810      	ldr	r0, [pc, #64]	; (8001b90 <Number.12+0x23c>)
 8001b50:	f003 fca2 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8001b54:	2201      	movs	r2, #1
 8001b56:	2102      	movs	r1, #2
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <Number.12+0x23c>)
 8001b5a:	f003 fc9d 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8001b5e:	2201      	movs	r2, #1
 8001b60:	2104      	movs	r1, #4
 8001b62:	480b      	ldr	r0, [pc, #44]	; (8001b90 <Number.12+0x23c>)
 8001b64:	f003 fc98 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	4808      	ldr	r0, [pc, #32]	; (8001b90 <Number.12+0x23c>)
 8001b6e:	f003 fc93 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8001b72:	2201      	movs	r2, #1
 8001b74:	2120      	movs	r1, #32
 8001b76:	4806      	ldr	r0, [pc, #24]	; (8001b90 <Number.12+0x23c>)
 8001b78:	f003 fc8e 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2140      	movs	r1, #64	; 0x40
 8001b80:	4803      	ldr	r0, [pc, #12]	; (8001b90 <Number.12+0x23c>)
 8001b82:	f003 fc89 	bl	8005498 <HAL_GPIO_WritePin>
  	    }
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	48000800 	.word	0x48000800
 8001b94:	48000c00 	.word	0x48000c00

08001b98 <randomapple.3>:
void randomapple(){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	f8c7 c004 	str.w	ip, [r7, #4]
	int rowmin=0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
	int rowmax=3;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	61fb      	str	r3, [r7, #28]
	int colmin=0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
	int colmax=19;
 8001bae:	2313      	movs	r3, #19
 8001bb0:	617b      	str	r3, [r7, #20]
	for(int i=0;i<1;i++){
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	e047      	b.n	8001c48 <randomapple.3+0xb0>
		int rowrandom=(rand()%(rowmax-rowmin+1)+rowmin);
 8001bb8:	f007 fdd8 	bl	800976c <rand>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	69f9      	ldr	r1, [r7, #28]
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	1acb      	subs	r3, r1, r3
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	fb92 f1f3 	sdiv	r1, r2, r3
 8001bca:	fb01 f303 	mul.w	r3, r1, r3
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	6a3a      	ldr	r2, [r7, #32]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
int colrandom=(rand()%(colmax-colmin+1)+colmin);
 8001bd6:	f007 fdc9 	bl	800976c <rand>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	6979      	ldr	r1, [r7, #20]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	1acb      	subs	r3, r1, r3
 8001be2:	3301      	adds	r3, #1
 8001be4:	fb92 f1f3 	sdiv	r1, r2, r3
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
if(grid[rowrandom][colrandom]==-1){
 8001bf4:	4918      	ldr	r1, [pc, #96]	; (8001c58 <randomapple.3+0xc0>)
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d116      	bne.n	8001c3c <randomapple.3+0xa4>
	setCursor(colrandom, rowrandom);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	4611      	mov	r1, r2
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fd97 	bl	800074c <setCursor>
	write(1);
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f7fe fe3e 	bl	80008a0 <write>
	grid[rowrandom][colrandom]=1;
 8001c24:	490c      	ldr	r1, [pc, #48]	; (8001c58 <randomapple.3+0xc0>)
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	2201      	movs	r2, #1
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001c3a:	e002      	b.n	8001c42 <randomapple.3+0xaa>
else i--;
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0;i<1;i++){
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	3301      	adds	r3, #1
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	ddb4      	ble.n	8001bb8 <randomapple.3+0x20>
}
 8001c4e:	bf00      	nop
 8001c50:	bf00      	nop
 8001c52:	3728      	adds	r7, #40	; 0x28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200005f4 	.word	0x200005f4

08001c5c <randommys.1>:
void randommys(){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	f8c7 c004 	str.w	ip, [r7, #4]
	int rowmin=0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
	int rowmax=3;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	61fb      	str	r3, [r7, #28]
	int colmin=0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
	int colmax=19;
 8001c72:	2313      	movs	r3, #19
 8001c74:	617b      	str	r3, [r7, #20]
	for(int i=0;i<1;i++){
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7a:	e052      	b.n	8001d22 <randommys.1+0xc6>
		int rowrandom=(rand()%(rowmax-rowmin+1)+rowmin);
 8001c7c:	f007 fd76 	bl	800976c <rand>
 8001c80:	4602      	mov	r2, r0
 8001c82:	69f9      	ldr	r1, [r7, #28]
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	1acb      	subs	r3, r1, r3
 8001c88:	3301      	adds	r3, #1
 8001c8a:	fb92 f1f3 	sdiv	r1, r2, r3
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	6a3a      	ldr	r2, [r7, #32]
 8001c96:	4413      	add	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
int colrandom=(rand()%(colmax-colmin+1)+colmin);
 8001c9a:	f007 fd67 	bl	800976c <rand>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	6979      	ldr	r1, [r7, #20]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	1acb      	subs	r3, r1, r3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	fb92 f1f3 	sdiv	r1, r2, r3
 8001cac:	fb01 f303 	mul.w	r3, r1, r3
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
if(grid[rowrandom][colrandom]==-1){
 8001cb8:	491e      	ldr	r1, [pc, #120]	; (8001d34 <randommys.1+0xd8>)
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d121      	bne.n	8001d16 <randommys.1+0xba>
	setCursor(colrandom, rowrandom);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fd35 	bl	800074c <setCursor>
	write(3);
 8001ce2:	2003      	movs	r0, #3
 8001ce4:	f7fe fddc 	bl	80008a0 <write>
	grid[rowrandom][colrandom]=4;
 8001ce8:	4912      	ldr	r1, [pc, #72]	; (8001d34 <randommys.1+0xd8>)
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	xmystery=rowrandom;
 8001cfe:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <randommys.1+0xdc>)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	6013      	str	r3, [r2, #0]
	ymystery=colrandom;
 8001d04:	4a0d      	ldr	r2, [pc, #52]	; (8001d3c <randommys.1+0xe0>)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6013      	str	r3, [r2, #0]
mysterytimecount++;
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <randommys.1+0xe4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <randommys.1+0xe4>)
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	e002      	b.n	8001d1c <randommys.1+0xc0>
else i--;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0;i<1;i++){
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	3301      	adds	r3, #1
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	dda9      	ble.n	8001c7c <randommys.1+0x20>
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	; 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200005f4 	.word	0x200005f4
 8001d38:	200005ec 	.word	0x200005ec
 8001d3c:	200005f0 	.word	0x200005f0
 8001d40:	200005e8 	.word	0x200005e8

08001d44 <randomhealth.4>:
void randomhealth(){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	f8c7 c004 	str.w	ip, [r7, #4]
	int rowmin=0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
	int rowmax=3;
 8001d52:	2303      	movs	r3, #3
 8001d54:	61fb      	str	r3, [r7, #28]
	int colmin=0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
	int colmax=19;
 8001d5a:	2313      	movs	r3, #19
 8001d5c:	617b      	str	r3, [r7, #20]
	for(int i=0;i<1;i++){
 8001d5e:	2300      	movs	r3, #0
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
 8001d62:	e047      	b.n	8001df4 <randomhealth.4+0xb0>
		int rowrandom=(rand()%(rowmax-rowmin+1)+rowmin);
 8001d64:	f007 fd02 	bl	800976c <rand>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	69f9      	ldr	r1, [r7, #28]
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	1acb      	subs	r3, r1, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	fb92 f1f3 	sdiv	r1, r2, r3
 8001d76:	fb01 f303 	mul.w	r3, r1, r3
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	6a3a      	ldr	r2, [r7, #32]
 8001d7e:	4413      	add	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
int colrandom=(rand()%(colmax-colmin+1)+colmin);
 8001d82:	f007 fcf3 	bl	800976c <rand>
 8001d86:	4602      	mov	r2, r0
 8001d88:	6979      	ldr	r1, [r7, #20]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	1acb      	subs	r3, r1, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	fb92 f1f3 	sdiv	r1, r2, r3
 8001d94:	fb01 f303 	mul.w	r3, r1, r3
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
if(grid[rowrandom][colrandom]==-1){
 8001da0:	4918      	ldr	r1, [pc, #96]	; (8001e04 <randomhealth.4+0xc0>)
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db8:	d116      	bne.n	8001de8 <randomhealth.4+0xa4>
	setCursor(colrandom, rowrandom);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fcc1 	bl	800074c <setCursor>
	write(0);
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f7fe fd68 	bl	80008a0 <write>
	grid[rowrandom][colrandom]=3;
 8001dd0:	490c      	ldr	r1, [pc, #48]	; (8001e04 <randomhealth.4+0xc0>)
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	2203      	movs	r2, #3
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001de6:	e002      	b.n	8001dee <randomhealth.4+0xaa>
else i--;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	3b01      	subs	r3, #1
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i=0;i<1;i++){
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	3301      	adds	r3, #1
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	ddb4      	ble.n	8001d64 <randomhealth.4+0x20>
}
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200005f4 	.word	0x200005f4

08001e08 <moveSnake.2>:
[20]) {
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b08f      	sub	sp, #60	; 0x3c
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	460b      	mov	r3, r1
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	72fb      	strb	r3, [r7, #11]
 8001e16:	4664      	mov	r4, ip
 8001e18:	f8c7 c000 	str.w	ip, [r7]
int newX = head->x;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
int newY = head->y;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	633b      	str	r3, [r7, #48]	; 0x30
switch (dir) {
 8001e28:	7afb      	ldrb	r3, [r7, #11]
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d81a      	bhi.n	8001e64 <moveSnake.2+0x5c>
 8001e2e:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <moveSnake.2+0x2c>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001e45 	.word	0x08001e45
 8001e38:	08001e4d 	.word	0x08001e4d
 8001e3c:	08001e55 	.word	0x08001e55
 8001e40:	08001e5d 	.word	0x08001e5d
case UP: newX--; break;
 8001e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e46:	3b01      	subs	r3, #1
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
 8001e4a:	e00b      	b.n	8001e64 <moveSnake.2+0x5c>
case DOWN: newX++; break;
 8001e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4e:	3301      	adds	r3, #1
 8001e50:	637b      	str	r3, [r7, #52]	; 0x34
 8001e52:	e007      	b.n	8001e64 <moveSnake.2+0x5c>
case LEFT: newY--; break;
 8001e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e56:	3b01      	subs	r3, #1
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
 8001e5a:	e003      	b.n	8001e64 <moveSnake.2+0x5c>
case RIGHT: newY++; break;
 8001e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5e:	3301      	adds	r3, #1
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
 8001e62:	bf00      	nop
if (newX < 0) newX = 4 - 1;
 8001e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	da01      	bge.n	8001e6e <moveSnake.2+0x66>
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
if (newX >= 4) newX = 0;
 8001e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	dd01      	ble.n	8001e78 <moveSnake.2+0x70>
 8001e74:	2300      	movs	r3, #0
 8001e76:	637b      	str	r3, [r7, #52]	; 0x34
if (newY < 0) newY = 20 - 1;
 8001e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	da01      	bge.n	8001e82 <moveSnake.2+0x7a>
 8001e7e:	2313      	movs	r3, #19
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
if (newY >= 20) newY = 0;
 8001e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e84:	2b13      	cmp	r3, #19
 8001e86:	dd01      	ble.n	8001e8c <moveSnake.2+0x84>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
struct Segment* tails = head;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
mysterytimecount++;
 8001e90:	4baa      	ldr	r3, [pc, #680]	; (800213c <moveSnake.2+0x334>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	4aa9      	ldr	r2, [pc, #676]	; (800213c <moveSnake.2+0x334>)
 8001e98:	6013      	str	r3, [r2, #0]
if(mysterytimecount>5){
 8001e9a:	4ba8      	ldr	r3, [pc, #672]	; (800213c <moveSnake.2+0x334>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	dd22      	ble.n	8001ee8 <moveSnake.2+0xe0>
	mysterytimecount=0;
 8001ea2:	4ba6      	ldr	r3, [pc, #664]	; (800213c <moveSnake.2+0x334>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
	grid[xmystery][ymystery]=-1;
 8001ea8:	4ba5      	ldr	r3, [pc, #660]	; (8002140 <moveSnake.2+0x338>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4aa1      	ldr	r2, [pc, #644]	; (8002144 <moveSnake.2+0x33c>)
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	setCursor(ymystery, xmystery);
 8001ec8:	4b9e      	ldr	r3, [pc, #632]	; (8002144 <moveSnake.2+0x33c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	4a9c      	ldr	r2, [pc, #624]	; (8002140 <moveSnake.2+0x338>)
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fc38 	bl	800074c <setCursor>
	print(" ");
 8001edc:	489a      	ldr	r0, [pc, #616]	; (8002148 <moveSnake.2+0x340>)
 8001ede:	f7fe fc7d 	bl	80007dc <print>
	randommys();
 8001ee2:	46a4      	mov	ip, r4
 8001ee4:	f7ff feba 	bl	8001c5c <randommys.1>
int delete=0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
if (grid[newX][newY]==1) {
 8001eec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d148      	bne.n	8001f98 <moveSnake.2+0x190>
	PWM_Change_Tones(500, 100);
 8001f06:	46a4      	mov	ip, r4
 8001f08:	2164      	movs	r1, #100	; 0x64
 8001f0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f0e:	f7fe fd93 	bl	8000a38 <PWM_Change_Tones.5>
	point++;
 8001f12:	4b8e      	ldr	r3, [pc, #568]	; (800214c <moveSnake.2+0x344>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	4a8c      	ldr	r2, [pc, #560]	; (800214c <moveSnake.2+0x344>)
 8001f1a:	6013      	str	r3, [r2, #0]
	delete=1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
	grid[newX][newY]=-1;
 8001f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f32:	f04f 31ff 	mov.w	r1, #4294967295
 8001f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	setCursor(newY, newX);
 8001f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fc01 	bl	800074c <setCursor>
	print(" ");
 8001f4a:	487f      	ldr	r0, [pc, #508]	; (8002148 <moveSnake.2+0x340>)
 8001f4c:	f7fe fc46 	bl	80007dc <print>
	struct Segment* newHead = malloc(sizeof(struct Segment));
 8001f50:	200c      	movs	r0, #12
 8001f52:	f007 fae5 	bl	8009520 <malloc>
 8001f56:	4603      	mov	r3, r0
 8001f58:	623b      	str	r3, [r7, #32]
	newHead->x = newX;
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f5e:	601a      	str	r2, [r3, #0]
	newHead->y = newY;
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f64:	605a      	str	r2, [r3, #4]
	newHead->next = head;
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	609a      	str	r2, [r3, #8]
	segment = newHead;
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	6023      	str	r3, [r4, #0]
	currentapples--;
 8001f70:	4b77      	ldr	r3, [pc, #476]	; (8002150 <moveSnake.2+0x348>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	4a76      	ldr	r2, [pc, #472]	; (8002150 <moveSnake.2+0x348>)
 8001f78:	6013      	str	r3, [r2, #0]
	if(currentapples==0)
 8001f7a:	4b75      	ldr	r3, [pc, #468]	; (8002150 <moveSnake.2+0x348>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d105      	bne.n	8001f8e <moveSnake.2+0x186>
		currentapples=1;
 8001f82:	4b73      	ldr	r3, [pc, #460]	; (8002150 <moveSnake.2+0x348>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
		randomapple();
 8001f88:	46a4      	mov	ip, r4
 8001f8a:	f7ff fe05 	bl	8001b98 <randomapple.3>
	PWM_Change_Tones(0, 0);
 8001f8e:	46a4      	mov	ip, r4
 8001f90:	2100      	movs	r1, #0
 8001f92:	2000      	movs	r0, #0
 8001f94:	f7fe fd50 	bl	8000a38 <PWM_Change_Tones.5>
if (grid[newX][newY]==3) {
 8001f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d130      	bne.n	8002014 <moveSnake.2+0x20c>
	PWM_Change_Tones(650, 100);
 8001fb2:	46a4      	mov	ip, r4
 8001fb4:	2164      	movs	r1, #100	; 0x64
 8001fb6:	f240 208a 	movw	r0, #650	; 0x28a
 8001fba:	f7fe fd3d 	bl	8000a38 <PWM_Change_Tones.5>
	grid[newX][newY]=-1;
 8001fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	461a      	mov	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if(health<99)
 8001fd8:	4b5e      	ldr	r3, [pc, #376]	; (8002154 <moveSnake.2+0x34c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b62      	cmp	r3, #98	; 0x62
 8001fde:	dc04      	bgt.n	8001fea <moveSnake.2+0x1e2>
	health++;
 8001fe0:	4b5c      	ldr	r3, [pc, #368]	; (8002154 <moveSnake.2+0x34c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	4a5b      	ldr	r2, [pc, #364]	; (8002154 <moveSnake.2+0x34c>)
 8001fe8:	6013      	str	r3, [r2, #0]
	currenthealth--;
 8001fea:	4b5b      	ldr	r3, [pc, #364]	; (8002158 <moveSnake.2+0x350>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	4a59      	ldr	r2, [pc, #356]	; (8002158 <moveSnake.2+0x350>)
 8001ff2:	6013      	str	r3, [r2, #0]
	if(currenthealth==0)
 8001ff4:	4b58      	ldr	r3, [pc, #352]	; (8002158 <moveSnake.2+0x350>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <moveSnake.2+0x200>
		currenthealth=1;
 8001ffc:	4b56      	ldr	r3, [pc, #344]	; (8002158 <moveSnake.2+0x350>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]
		randomhealth();
 8002002:	46a4      	mov	ip, r4
 8002004:	f7ff fe9e 	bl	8001d44 <randomhealth.4>
	PWM_Change_Tones(650, 100);
 8002008:	46a4      	mov	ip, r4
 800200a:	2164      	movs	r1, #100	; 0x64
 800200c:	f240 208a 	movw	r0, #650	; 0x28a
 8002010:	f7fe fd12 	bl	8000a38 <PWM_Change_Tones.5>
if (grid[newX][newY]==4) {
 8002014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	461a      	mov	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202a:	2b04      	cmp	r3, #4
 800202c:	d149      	bne.n	80020c2 <moveSnake.2+0x2ba>
	PWM_Change_Tones(400, 100);
 800202e:	46a4      	mov	ip, r4
 8002030:	2164      	movs	r1, #100	; 0x64
 8002032:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002036:	f7fe fcff 	bl	8000a38 <PWM_Change_Tones.5>
	grid[newX][newY]=-1;
 800203a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	461a      	mov	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	int random=(rand()%(3-1+1)+1);
 8002054:	f007 fb8a 	bl	800976c <rand>
 8002058:	4601      	mov	r1, r0
 800205a:	4b40      	ldr	r3, [pc, #256]	; (800215c <moveSnake.2+0x354>)
 800205c:	fb83 3201 	smull	r3, r2, r3, r1
 8002060:	17cb      	asrs	r3, r1, #31
 8002062:	1ad2      	subs	r2, r2, r3
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	1aca      	subs	r2, r1, r3
 800206c:	1c53      	adds	r3, r2, #1
 800206e:	61fb      	str	r3, [r7, #28]
	if(random==0){
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <moveSnake.2+0x280>
		if(point<99)point=point+2;;
 8002076:	4b35      	ldr	r3, [pc, #212]	; (800214c <moveSnake.2+0x344>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b62      	cmp	r3, #98	; 0x62
 800207c:	dc04      	bgt.n	8002088 <moveSnake.2+0x280>
 800207e:	4b33      	ldr	r3, [pc, #204]	; (800214c <moveSnake.2+0x344>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3302      	adds	r3, #2
 8002084:	4a31      	ldr	r2, [pc, #196]	; (800214c <moveSnake.2+0x344>)
 8002086:	6013      	str	r3, [r2, #0]
	if(random==1){
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d108      	bne.n	80020a0 <moveSnake.2+0x298>
		if(health<99)health=health+2;
 800208e:	4b31      	ldr	r3, [pc, #196]	; (8002154 <moveSnake.2+0x34c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b62      	cmp	r3, #98	; 0x62
 8002094:	dc04      	bgt.n	80020a0 <moveSnake.2+0x298>
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <moveSnake.2+0x34c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	3302      	adds	r3, #2
 800209c:	4a2d      	ldr	r2, [pc, #180]	; (8002154 <moveSnake.2+0x34c>)
 800209e:	6013      	str	r3, [r2, #0]
	if(random==2){
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d108      	bne.n	80020b8 <moveSnake.2+0x2b0>
		if(speed>=2)speed--;
 80020a6:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <moveSnake.2+0x358>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	dd04      	ble.n	80020b8 <moveSnake.2+0x2b0>
 80020ae:	4b2c      	ldr	r3, [pc, #176]	; (8002160 <moveSnake.2+0x358>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	4a2a      	ldr	r2, [pc, #168]	; (8002160 <moveSnake.2+0x358>)
 80020b6:	6013      	str	r3, [r2, #0]
	PWM_Change_Tones(0, 0);
 80020b8:	46a4      	mov	ip, r4
 80020ba:	2100      	movs	r1, #0
 80020bc:	2000      	movs	r0, #0
 80020be:	f7fe fcbb 	bl	8000a38 <PWM_Change_Tones.5>
if (grid[newX][newY]==2) {
 80020c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	461a      	mov	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d155      	bne.n	8002188 <moveSnake.2+0x380>
	health--;
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <moveSnake.2+0x34c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	4a1c      	ldr	r2, [pc, #112]	; (8002154 <moveSnake.2+0x34c>)
 80020e4:	6013      	str	r3, [r2, #0]
	PWM_Change_Tones(700, 100);
 80020e6:	46a4      	mov	ip, r4
 80020e8:	2164      	movs	r1, #100	; 0x64
 80020ea:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80020ee:	f7fe fca3 	bl	8000a38 <PWM_Change_Tones.5>
HAL_Delay(10);
 80020f2:	200a      	movs	r0, #10
 80020f4:	f002 ff08 	bl	8004f08 <HAL_Delay>
if(currentDir==RIGHT)
 80020f8:	f894 3020 	ldrb.w	r3, [r4, #32]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d106      	bne.n	800210e <moveSnake.2+0x306>
currentDir=DOWN;
 8002100:	2301      	movs	r3, #1
 8002102:	f884 3020 	strb.w	r3, [r4, #32]
direction=2;
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <moveSnake.2+0x35c>)
 8002108:	2202      	movs	r2, #2
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	e036      	b.n	800217c <moveSnake.2+0x374>
}else if(currentDir==DOWN){
 800210e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d106      	bne.n	8002124 <moveSnake.2+0x31c>
currentDir=LEFT;
 8002116:	2302      	movs	r3, #2
 8002118:	f884 3020 	strb.w	r3, [r4, #32]
direction=3;
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <moveSnake.2+0x35c>)
 800211e:	2203      	movs	r2, #3
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e02b      	b.n	800217c <moveSnake.2+0x374>
else if(currentDir==LEFT){
 8002124:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d11d      	bne.n	8002168 <moveSnake.2+0x360>
	direction=1;
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <moveSnake.2+0x35c>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]
	currentDir=UP;}
 8002132:	2300      	movs	r3, #0
 8002134:	f884 3020 	strb.w	r3, [r4, #32]
 8002138:	e020      	b.n	800217c <moveSnake.2+0x374>
 800213a:	bf00      	nop
 800213c:	200005e8 	.word	0x200005e8
 8002140:	200005ec 	.word	0x200005ec
 8002144:	200005f0 	.word	0x200005f0
 8002148:	0800aa5c 	.word	0x0800aa5c
 800214c:	20000734 	.word	0x20000734
 8002150:	20000020 	.word	0x20000020
 8002154:	20000008 	.word	0x20000008
 8002158:	2000001c 	.word	0x2000001c
 800215c:	55555556 	.word	0x55555556
 8002160:	2000000c 	.word	0x2000000c
 8002164:	20000018 	.word	0x20000018
else if(currentDir==UP){
 8002168:	f894 3020 	ldrb.w	r3, [r4, #32]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d105      	bne.n	800217c <moveSnake.2+0x374>
	currentDir=RIGHT;
 8002170:	2303      	movs	r3, #3
 8002172:	f884 3020 	strb.w	r3, [r4, #32]
direction=4;}
 8002176:	4b46      	ldr	r3, [pc, #280]	; (8002290 <moveSnake.2+0x488>)
 8002178:	2204      	movs	r2, #4
 800217a:	601a      	str	r2, [r3, #0]
PWM_Change_Tones(0, 0);
 800217c:	46a4      	mov	ip, r4
 800217e:	2100      	movs	r1, #0
 8002180:	2000      	movs	r0, #0
 8002182:	f7fe fc59 	bl	8000a38 <PWM_Change_Tones.5>
return;
 8002186:	e173      	b.n	8002470 <moveSnake.2+0x668>
if(grid[newX][newY]==6){
 8002188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	461a      	mov	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800219a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219e:	2b06      	cmp	r3, #6
 80021a0:	d104      	bne.n	80021ac <moveSnake.2+0x3a4>
	health--;
 80021a2:	4b3c      	ldr	r3, [pc, #240]	; (8002294 <moveSnake.2+0x48c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	4a3a      	ldr	r2, [pc, #232]	; (8002294 <moveSnake.2+0x48c>)
 80021aa:	6013      	str	r3, [r2, #0]
if(delete==0){
 80021ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d133      	bne.n	800221a <moveSnake.2+0x412>
tails = head;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
while ( tails->next->next != NULL) {
 80021b6:	e002      	b.n	80021be <moveSnake.2+0x3b6>
tails = tails->next;
 80021b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
while ( tails->next->next != NULL) {
 80021be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f7      	bne.n	80021b8 <moveSnake.2+0x3b0>
grid[tails->next->x][tails->next->y] = -1;
 80021c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	461a      	mov	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021e0:	6892      	ldr	r2, [r2, #8]
 80021e2:	6852      	ldr	r2, [r2, #4]
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295
 80021e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
setCursor(tails->next->y, tails->next->x);
 80021ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	4619      	mov	r1, r3
 80021fe:	4610      	mov	r0, r2
 8002200:	f7fe faa4 	bl	800074c <setCursor>
print(" ");
 8002204:	4824      	ldr	r0, [pc, #144]	; (8002298 <moveSnake.2+0x490>)
 8002206:	f7fe fae9 	bl	80007dc <print>
free(tails->next);
 800220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4618      	mov	r0, r3
 8002210:	f007 f98e 	bl	8009530 <free>
tails->next = NULL;
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
}delete=0;
 800221a:	2300      	movs	r3, #0
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
struct Segment* newHead = malloc(sizeof(struct Segment));
 800221e:	200c      	movs	r0, #12
 8002220:	f007 f97e 	bl	8009520 <malloc>
 8002224:	4603      	mov	r3, r0
 8002226:	61bb      	str	r3, [r7, #24]
newHead->x = newX;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800222c:	601a      	str	r2, [r3, #0]
newHead->y = newY;
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002232:	605a      	str	r2, [r3, #4]
newHead->next = head;
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	609a      	str	r2, [r3, #8]
segment = newHead;
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	6023      	str	r3, [r4, #0]
struct Segment* segments = segment;
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
if(  segments){
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01e      	beq.n	8002286 <moveSnake.2+0x47e>
	grid[segments->x][segments->y] = 5;
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	461a      	mov	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225e:	6852      	ldr	r2, [r2, #4]
 8002260:	2105      	movs	r1, #5
 8002262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
setCursor(segments->y, segments->x);
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f7fe fa69 	bl	800074c <setCursor>
write(5);
 800227a:	2005      	movs	r0, #5
 800227c:	f7fe fb10 	bl	80008a0 <write>
HAL_Delay(100);
 8002280:	2064      	movs	r0, #100	; 0x64
 8002282:	f002 fe41 	bl	8004f08 <HAL_Delay>
	segments = segments->next;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
while (segments != NULL) {
 800228c:	e025      	b.n	80022da <moveSnake.2+0x4d2>
 800228e:	bf00      	nop
 8002290:	20000018 	.word	0x20000018
 8002294:	20000008 	.word	0x20000008
 8002298:	0800aa5c 	.word	0x0800aa5c
grid[segments->x][segments->y] = 6;
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	461a      	mov	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b2:	6852      	ldr	r2, [r2, #4]
 80022b4:	2106      	movs	r1, #6
 80022b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
setCursor(segments->y, segments->x);
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4619      	mov	r1, r3
 80022c8:	4610      	mov	r0, r2
 80022ca:	f7fe fa3f 	bl	800074c <setCursor>
write(6);
 80022ce:	2006      	movs	r0, #6
 80022d0:	f7fe fae6 	bl	80008a0 <write>
segments = segments->next;
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
while (segments != NULL) {
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1dd      	bne.n	800229c <moveSnake.2+0x494>
int firstpoint=0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
	int secondpoint=0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]
	secondpoint=point/10;
 80022e8:	4b63      	ldr	r3, [pc, #396]	; (8002478 <moveSnake.2+0x670>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a63      	ldr	r2, [pc, #396]	; (800247c <moveSnake.2+0x674>)
 80022ee:	fb82 1203 	smull	r1, r2, r2, r3
 80022f2:	1092      	asrs	r2, r2, #2
 80022f4:	17db      	asrs	r3, r3, #31
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	613b      	str	r3, [r7, #16]
	firstpoint=point%10;
 80022fa:	4b5f      	ldr	r3, [pc, #380]	; (8002478 <moveSnake.2+0x670>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b5f      	ldr	r3, [pc, #380]	; (800247c <moveSnake.2+0x674>)
 8002300:	fb83 1302 	smull	r1, r3, r3, r2
 8002304:	1099      	asrs	r1, r3, #2
 8002306:	17d3      	asrs	r3, r2, #31
 8002308:	1ac9      	subs	r1, r1, r3
 800230a:	460b      	mov	r3, r1
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	617b      	str	r3, [r7, #20]
	Off_First7segment();
 8002316:	46a4      	mov	ip, r4
 8002318:	f7ff fa4c 	bl	80017b4 <Off_First7segment.7>
	Off_Third7segment();
 800231c:	46a4      	mov	ip, r4
 800231e:	f7ff fab1 	bl	8001884 <Off_Third7segment.9>
	Off_Forth7segment();
 8002322:	46a4      	mov	ip, r4
 8002324:	f7ff fae2 	bl	80018ec <Off_Forth7segment.10>
	Off_Second7segment();
 8002328:	46a4      	mov	ip, r4
 800232a:	f7ff fa77 	bl	800181c <Off_Second7segment.8>
	On_First7segment();
 800232e:	46a4      	mov	ip, r4
 8002330:	f7ff fa1e 	bl	8001770 <On_First7segment.6>
		if(secondpoint==0)Number(0);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <moveSnake.2+0x53a>
 800233a:	46a4      	mov	ip, r4
 800233c:	2000      	movs	r0, #0
 800233e:	f7ff fb09 	bl	8001954 <Number.12>
		if(secondpoint==1)Number(1);
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d103      	bne.n	8002350 <moveSnake.2+0x548>
 8002348:	46a4      	mov	ip, r4
 800234a:	2001      	movs	r0, #1
 800234c:	f7ff fb02 	bl	8001954 <Number.12>
		if(secondpoint==2)Number(2);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d103      	bne.n	800235e <moveSnake.2+0x556>
 8002356:	46a4      	mov	ip, r4
 8002358:	2002      	movs	r0, #2
 800235a:	f7ff fafb 	bl	8001954 <Number.12>
		if(secondpoint==3)Number(3);
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d103      	bne.n	800236c <moveSnake.2+0x564>
 8002364:	46a4      	mov	ip, r4
 8002366:	2003      	movs	r0, #3
 8002368:	f7ff faf4 	bl	8001954 <Number.12>
		if(secondpoint==4)Number(4);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2b04      	cmp	r3, #4
 8002370:	d103      	bne.n	800237a <moveSnake.2+0x572>
 8002372:	46a4      	mov	ip, r4
 8002374:	2004      	movs	r0, #4
 8002376:	f7ff faed 	bl	8001954 <Number.12>
		if(secondpoint==5)Number(5);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b05      	cmp	r3, #5
 800237e:	d103      	bne.n	8002388 <moveSnake.2+0x580>
 8002380:	46a4      	mov	ip, r4
 8002382:	2005      	movs	r0, #5
 8002384:	f7ff fae6 	bl	8001954 <Number.12>
		if(secondpoint==6)Number(6);
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	2b06      	cmp	r3, #6
 800238c:	d103      	bne.n	8002396 <moveSnake.2+0x58e>
 800238e:	46a4      	mov	ip, r4
 8002390:	2006      	movs	r0, #6
 8002392:	f7ff fadf 	bl	8001954 <Number.12>
		if(secondpoint==7)Number(7);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b07      	cmp	r3, #7
 800239a:	d103      	bne.n	80023a4 <moveSnake.2+0x59c>
 800239c:	46a4      	mov	ip, r4
 800239e:	2007      	movs	r0, #7
 80023a0:	f7ff fad8 	bl	8001954 <Number.12>
		if(secondpoint==8)Number(8);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d103      	bne.n	80023b2 <moveSnake.2+0x5aa>
 80023aa:	46a4      	mov	ip, r4
 80023ac:	2008      	movs	r0, #8
 80023ae:	f7ff fad1 	bl	8001954 <Number.12>
		if(secondpoint==9)Number(9);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	2b09      	cmp	r3, #9
 80023b6:	d103      	bne.n	80023c0 <moveSnake.2+0x5b8>
 80023b8:	46a4      	mov	ip, r4
 80023ba:	2009      	movs	r0, #9
 80023bc:	f7ff faca 	bl	8001954 <Number.12>
		HAL_Delay(1);
 80023c0:	2001      	movs	r0, #1
 80023c2:	f002 fda1 	bl	8004f08 <HAL_Delay>
		Off_First7segment();
 80023c6:	46a4      	mov	ip, r4
 80023c8:	f7ff f9f4 	bl	80017b4 <Off_First7segment.7>
		Off_Second7segment();
 80023cc:	46a4      	mov	ip, r4
 80023ce:	f7ff fa25 	bl	800181c <Off_Second7segment.8>
		Off_Third7segment();
 80023d2:	46a4      	mov	ip, r4
 80023d4:	f7ff fa56 	bl	8001884 <Off_Third7segment.9>
		Off_Forth7segment();
 80023d8:	46a4      	mov	ip, r4
 80023da:	f7ff fa87 	bl	80018ec <Off_Forth7segment.10>
		On_Second7segment();
 80023de:	46a4      	mov	ip, r4
 80023e0:	f7ff f9d6 	bl	8001790 <On_Second7segment.11>
			if(firstpoint==0)Number(0);
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d103      	bne.n	80023f2 <moveSnake.2+0x5ea>
 80023ea:	46a4      	mov	ip, r4
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7ff fab1 	bl	8001954 <Number.12>
			if(firstpoint==1)Number(1);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d103      	bne.n	8002400 <moveSnake.2+0x5f8>
 80023f8:	46a4      	mov	ip, r4
 80023fa:	2001      	movs	r0, #1
 80023fc:	f7ff faaa 	bl	8001954 <Number.12>
			if(firstpoint==2)Number(2);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d103      	bne.n	800240e <moveSnake.2+0x606>
 8002406:	46a4      	mov	ip, r4
 8002408:	2002      	movs	r0, #2
 800240a:	f7ff faa3 	bl	8001954 <Number.12>
			if(firstpoint==3)Number(3);
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d103      	bne.n	800241c <moveSnake.2+0x614>
 8002414:	46a4      	mov	ip, r4
 8002416:	2003      	movs	r0, #3
 8002418:	f7ff fa9c 	bl	8001954 <Number.12>
			if(firstpoint==4)Number(4);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b04      	cmp	r3, #4
 8002420:	d103      	bne.n	800242a <moveSnake.2+0x622>
 8002422:	46a4      	mov	ip, r4
 8002424:	2004      	movs	r0, #4
 8002426:	f7ff fa95 	bl	8001954 <Number.12>
			if(firstpoint==5)Number(5);
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b05      	cmp	r3, #5
 800242e:	d103      	bne.n	8002438 <moveSnake.2+0x630>
 8002430:	46a4      	mov	ip, r4
 8002432:	2005      	movs	r0, #5
 8002434:	f7ff fa8e 	bl	8001954 <Number.12>
			if(firstpoint==6)Number(6);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b06      	cmp	r3, #6
 800243c:	d103      	bne.n	8002446 <moveSnake.2+0x63e>
 800243e:	46a4      	mov	ip, r4
 8002440:	2006      	movs	r0, #6
 8002442:	f7ff fa87 	bl	8001954 <Number.12>
			if(firstpoint==7)Number(7);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2b07      	cmp	r3, #7
 800244a:	d103      	bne.n	8002454 <moveSnake.2+0x64c>
 800244c:	46a4      	mov	ip, r4
 800244e:	2007      	movs	r0, #7
 8002450:	f7ff fa80 	bl	8001954 <Number.12>
			if(firstpoint==8)Number(8);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b08      	cmp	r3, #8
 8002458:	d103      	bne.n	8002462 <moveSnake.2+0x65a>
 800245a:	46a4      	mov	ip, r4
 800245c:	2008      	movs	r0, #8
 800245e:	f7ff fa79 	bl	8001954 <Number.12>
			if(firstpoint==9)Number(9);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b09      	cmp	r3, #9
 8002466:	d103      	bne.n	8002470 <moveSnake.2+0x668>
 8002468:	46a4      	mov	ip, r4
 800246a:	2009      	movs	r0, #9
 800246c:	f7ff fa72 	bl	8001954 <Number.12>
}
 8002470:	373c      	adds	r7, #60	; 0x3c
 8002472:	46bd      	mov	sp, r7
 8002474:	bd90      	pop	{r4, r7, pc}
 8002476:	bf00      	nop
 8002478:	20000734 	.word	0x20000734
 800247c:	66666667 	.word	0x66666667

08002480 <moveSnake2.13>:
[20]) {
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b08d      	sub	sp, #52	; 0x34
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	460b      	mov	r3, r1
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	72fb      	strb	r3, [r7, #11]
 800248e:	4664      	mov	r4, ip
 8002490:	f8c7 c000 	str.w	ip, [r7]
int newX = head->x;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
int newY = head->y;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
switch (dir) {
 80024a0:	7afb      	ldrb	r3, [r7, #11]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d81a      	bhi.n	80024dc <moveSnake2.13+0x5c>
 80024a6:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <moveSnake2.13+0x2c>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	080024bd 	.word	0x080024bd
 80024b0:	080024c5 	.word	0x080024c5
 80024b4:	080024cd 	.word	0x080024cd
 80024b8:	080024d5 	.word	0x080024d5
case UP: newX--; break;
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	3b01      	subs	r3, #1
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c2:	e00b      	b.n	80024dc <moveSnake2.13+0x5c>
case DOWN: newX++; break;
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	3301      	adds	r3, #1
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ca:	e007      	b.n	80024dc <moveSnake2.13+0x5c>
case LEFT: newY--; break;
 80024cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ce:	3b01      	subs	r3, #1
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d2:	e003      	b.n	80024dc <moveSnake2.13+0x5c>
case RIGHT: newY++; break;
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	3301      	adds	r3, #1
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024da:	bf00      	nop
if (newX < 0){ newX = 4 - 1;health--;currentDir=RIGHT;
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	da0c      	bge.n	80024fc <moveSnake2.13+0x7c>
 80024e2:	2303      	movs	r3, #3
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e6:	4ba9      	ldr	r3, [pc, #676]	; (800278c <moveSnake2.13+0x30c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	4aa7      	ldr	r2, [pc, #668]	; (800278c <moveSnake2.13+0x30c>)
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	2303      	movs	r3, #3
 80024f2:	f884 3020 	strb.w	r3, [r4, #32]
direction=4;}
 80024f6:	4ba6      	ldr	r3, [pc, #664]	; (8002790 <moveSnake2.13+0x310>)
 80024f8:	2204      	movs	r2, #4
 80024fa:	601a      	str	r2, [r3, #0]
if (newX >= 4) {newX = 0;health--;currentDir=LEFT;
 80024fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fe:	2b03      	cmp	r3, #3
 8002500:	dd0c      	ble.n	800251c <moveSnake2.13+0x9c>
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002506:	4ba1      	ldr	r3, [pc, #644]	; (800278c <moveSnake2.13+0x30c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	3b01      	subs	r3, #1
 800250c:	4a9f      	ldr	r2, [pc, #636]	; (800278c <moveSnake2.13+0x30c>)
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	2302      	movs	r3, #2
 8002512:	f884 3020 	strb.w	r3, [r4, #32]
direction=3;}
 8002516:	4b9e      	ldr	r3, [pc, #632]	; (8002790 <moveSnake2.13+0x310>)
 8002518:	2203      	movs	r2, #3
 800251a:	601a      	str	r2, [r3, #0]
if (newY < 0) {newY = 20 - 1;health--;	direction=1;
 800251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251e:	2b00      	cmp	r3, #0
 8002520:	da0c      	bge.n	800253c <moveSnake2.13+0xbc>
 8002522:	2313      	movs	r3, #19
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
 8002526:	4b99      	ldr	r3, [pc, #612]	; (800278c <moveSnake2.13+0x30c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3b01      	subs	r3, #1
 800252c:	4a97      	ldr	r2, [pc, #604]	; (800278c <moveSnake2.13+0x30c>)
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b97      	ldr	r3, [pc, #604]	; (8002790 <moveSnake2.13+0x310>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]
currentDir=UP;}
 8002536:	2300      	movs	r3, #0
 8002538:	f884 3020 	strb.w	r3, [r4, #32]
if (newY >= 20){ newY = 0;health--;currentDir=DOWN;
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	2b13      	cmp	r3, #19
 8002540:	dd0c      	ble.n	800255c <moveSnake2.13+0xdc>
 8002542:	2300      	movs	r3, #0
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
 8002546:	4b91      	ldr	r3, [pc, #580]	; (800278c <moveSnake2.13+0x30c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3b01      	subs	r3, #1
 800254c:	4a8f      	ldr	r2, [pc, #572]	; (800278c <moveSnake2.13+0x30c>)
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	2301      	movs	r3, #1
 8002552:	f884 3020 	strb.w	r3, [r4, #32]
direction=2;}
 8002556:	4b8e      	ldr	r3, [pc, #568]	; (8002790 <moveSnake2.13+0x310>)
 8002558:	2202      	movs	r2, #2
 800255a:	601a      	str	r2, [r3, #0]
struct Segment* tails = head;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
mysterytimecount++;
 8002560:	4b8c      	ldr	r3, [pc, #560]	; (8002794 <moveSnake2.13+0x314>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	4a8b      	ldr	r2, [pc, #556]	; (8002794 <moveSnake2.13+0x314>)
 8002568:	6013      	str	r3, [r2, #0]
if(mysterytimecount>5){
 800256a:	4b8a      	ldr	r3, [pc, #552]	; (8002794 <moveSnake2.13+0x314>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b05      	cmp	r3, #5
 8002570:	dd22      	ble.n	80025b8 <moveSnake2.13+0x138>
	mysterytimecount=0;
 8002572:	4b88      	ldr	r3, [pc, #544]	; (8002794 <moveSnake2.13+0x314>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
	grid[xmystery][ymystery]=-1;
 8002578:	4b87      	ldr	r3, [pc, #540]	; (8002798 <moveSnake2.13+0x318>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4613      	mov	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	461a      	mov	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	4a83      	ldr	r2, [pc, #524]	; (800279c <moveSnake2.13+0x31c>)
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	f04f 31ff 	mov.w	r1, #4294967295
 8002594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	setCursor(ymystery, xmystery);
 8002598:	4b80      	ldr	r3, [pc, #512]	; (800279c <moveSnake2.13+0x31c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4a7e      	ldr	r2, [pc, #504]	; (8002798 <moveSnake2.13+0x318>)
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe f8d0 	bl	800074c <setCursor>
	print(" ");
 80025ac:	487c      	ldr	r0, [pc, #496]	; (80027a0 <moveSnake2.13+0x320>)
 80025ae:	f7fe f915 	bl	80007dc <print>
	randommys();
 80025b2:	46a4      	mov	ip, r4
 80025b4:	f7ff fb52 	bl	8001c5c <randommys.1>
int delete=0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	623b      	str	r3, [r7, #32]
if (grid[newX][newY]==1) {
 80025bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	461a      	mov	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d148      	bne.n	8002668 <moveSnake2.13+0x1e8>
	PWM_Change_Tones(500, 100);
 80025d6:	46a4      	mov	ip, r4
 80025d8:	2164      	movs	r1, #100	; 0x64
 80025da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025de:	f7fe fa2b 	bl	8000a38 <PWM_Change_Tones.5>
	point++;
 80025e2:	4b70      	ldr	r3, [pc, #448]	; (80027a4 <moveSnake2.13+0x324>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	4a6e      	ldr	r2, [pc, #440]	; (80027a4 <moveSnake2.13+0x324>)
 80025ea:	6013      	str	r3, [r2, #0]
	delete=1;
 80025ec:	2301      	movs	r3, #1
 80025ee:	623b      	str	r3, [r7, #32]
	grid[newX][newY]=-1;
 80025f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	461a      	mov	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4413      	add	r3, r2
 8002600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002602:	f04f 31ff 	mov.w	r1, #4294967295
 8002606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	setCursor(newY, newX);
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	b2db      	uxtb	r3, r3
 800260e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe f899 	bl	800074c <setCursor>
	print(" ");
 800261a:	4861      	ldr	r0, [pc, #388]	; (80027a0 <moveSnake2.13+0x320>)
 800261c:	f7fe f8de 	bl	80007dc <print>
	struct Segment* newHead = malloc(sizeof(struct Segment));
 8002620:	200c      	movs	r0, #12
 8002622:	f006 ff7d 	bl	8009520 <malloc>
 8002626:	4603      	mov	r3, r0
 8002628:	61bb      	str	r3, [r7, #24]
	newHead->x = newX;
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262e:	601a      	str	r2, [r3, #0]
	newHead->y = newY;
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002634:	605a      	str	r2, [r3, #4]
	newHead->next = head;
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	609a      	str	r2, [r3, #8]
	segment = newHead;
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	6023      	str	r3, [r4, #0]
	currentapples--;
 8002640:	4b59      	ldr	r3, [pc, #356]	; (80027a8 <moveSnake2.13+0x328>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3b01      	subs	r3, #1
 8002646:	4a58      	ldr	r2, [pc, #352]	; (80027a8 <moveSnake2.13+0x328>)
 8002648:	6013      	str	r3, [r2, #0]
	if(currentapples==0)
 800264a:	4b57      	ldr	r3, [pc, #348]	; (80027a8 <moveSnake2.13+0x328>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d105      	bne.n	800265e <moveSnake2.13+0x1de>
		currentapples=1;
 8002652:	4b55      	ldr	r3, [pc, #340]	; (80027a8 <moveSnake2.13+0x328>)
 8002654:	2201      	movs	r2, #1
 8002656:	601a      	str	r2, [r3, #0]
		randomapple();
 8002658:	46a4      	mov	ip, r4
 800265a:	f7ff fa9d 	bl	8001b98 <randomapple.3>
	PWM_Change_Tones(0, 0);
 800265e:	46a4      	mov	ip, r4
 8002660:	2100      	movs	r1, #0
 8002662:	2000      	movs	r0, #0
 8002664:	f7fe f9e8 	bl	8000a38 <PWM_Change_Tones.5>
if (grid[newX][newY]==3) {
 8002668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	461a      	mov	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800267a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267e:	2b03      	cmp	r3, #3
 8002680:	d130      	bne.n	80026e4 <moveSnake2.13+0x264>
	PWM_Change_Tones(650, 100);
 8002682:	46a4      	mov	ip, r4
 8002684:	2164      	movs	r1, #100	; 0x64
 8002686:	f240 208a 	movw	r0, #650	; 0x28a
 800268a:	f7fe f9d5 	bl	8000a38 <PWM_Change_Tones.5>
	grid[newX][newY]=-1;
 800268e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	461a      	mov	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026a0:	f04f 31ff 	mov.w	r1, #4294967295
 80026a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if(health<99)
 80026a8:	4b38      	ldr	r3, [pc, #224]	; (800278c <moveSnake2.13+0x30c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b62      	cmp	r3, #98	; 0x62
 80026ae:	dc04      	bgt.n	80026ba <moveSnake2.13+0x23a>
	health++;
 80026b0:	4b36      	ldr	r3, [pc, #216]	; (800278c <moveSnake2.13+0x30c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	4a35      	ldr	r2, [pc, #212]	; (800278c <moveSnake2.13+0x30c>)
 80026b8:	6013      	str	r3, [r2, #0]
	currenthealth--;
 80026ba:	4b3c      	ldr	r3, [pc, #240]	; (80027ac <moveSnake2.13+0x32c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3b01      	subs	r3, #1
 80026c0:	4a3a      	ldr	r2, [pc, #232]	; (80027ac <moveSnake2.13+0x32c>)
 80026c2:	6013      	str	r3, [r2, #0]
	if(currenthealth==0)
 80026c4:	4b39      	ldr	r3, [pc, #228]	; (80027ac <moveSnake2.13+0x32c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d105      	bne.n	80026d8 <moveSnake2.13+0x258>
		currenthealth=1;
 80026cc:	4b37      	ldr	r3, [pc, #220]	; (80027ac <moveSnake2.13+0x32c>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
		randomhealth();
 80026d2:	46a4      	mov	ip, r4
 80026d4:	f7ff fb36 	bl	8001d44 <randomhealth.4>
	PWM_Change_Tones(650, 100);
 80026d8:	46a4      	mov	ip, r4
 80026da:	2164      	movs	r1, #100	; 0x64
 80026dc:	f240 208a 	movw	r0, #650	; 0x28a
 80026e0:	f7fe f9aa 	bl	8000a38 <PWM_Change_Tones.5>
if (grid[newX][newY]==4) {
 80026e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	461a      	mov	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d161      	bne.n	80027c2 <moveSnake2.13+0x342>
	PWM_Change_Tones(400, 100);
 80026fe:	46a4      	mov	ip, r4
 8002700:	2164      	movs	r1, #100	; 0x64
 8002702:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002706:	f7fe f997 	bl	8000a38 <PWM_Change_Tones.5>
	grid[newX][newY]=-1;
 800270a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	461a      	mov	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	int random=(rand()%(3-1+1)+1);
 8002724:	f007 f822 	bl	800976c <rand>
 8002728:	4601      	mov	r1, r0
 800272a:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <moveSnake2.13+0x330>)
 800272c:	fb83 3201 	smull	r3, r2, r3, r1
 8002730:	17cb      	asrs	r3, r1, #31
 8002732:	1ad2      	subs	r2, r2, r3
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	1aca      	subs	r2, r1, r3
 800273c:	1c53      	adds	r3, r2, #1
 800273e:	617b      	str	r3, [r7, #20]
	if(random==0){
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d108      	bne.n	8002758 <moveSnake2.13+0x2d8>
		if(point<99)point=point+2;;
 8002746:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <moveSnake2.13+0x324>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b62      	cmp	r3, #98	; 0x62
 800274c:	dc04      	bgt.n	8002758 <moveSnake2.13+0x2d8>
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <moveSnake2.13+0x324>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3302      	adds	r3, #2
 8002754:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <moveSnake2.13+0x324>)
 8002756:	6013      	str	r3, [r2, #0]
	if(random==1){
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d108      	bne.n	8002770 <moveSnake2.13+0x2f0>
		if(health<99)health=health+2;
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <moveSnake2.13+0x30c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b62      	cmp	r3, #98	; 0x62
 8002764:	dc04      	bgt.n	8002770 <moveSnake2.13+0x2f0>
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <moveSnake2.13+0x30c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3302      	adds	r3, #2
 800276c:	4a07      	ldr	r2, [pc, #28]	; (800278c <moveSnake2.13+0x30c>)
 800276e:	6013      	str	r3, [r2, #0]
	if(random==2){
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d120      	bne.n	80027b8 <moveSnake2.13+0x338>
		if(speed>=2)speed--;
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <moveSnake2.13+0x334>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	dd1c      	ble.n	80027b8 <moveSnake2.13+0x338>
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <moveSnake2.13+0x334>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3b01      	subs	r3, #1
 8002784:	4a0b      	ldr	r2, [pc, #44]	; (80027b4 <moveSnake2.13+0x334>)
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	e016      	b.n	80027b8 <moveSnake2.13+0x338>
 800278a:	bf00      	nop
 800278c:	20000008 	.word	0x20000008
 8002790:	20000018 	.word	0x20000018
 8002794:	200005e8 	.word	0x200005e8
 8002798:	200005ec 	.word	0x200005ec
 800279c:	200005f0 	.word	0x200005f0
 80027a0:	0800aa5c 	.word	0x0800aa5c
 80027a4:	20000734 	.word	0x20000734
 80027a8:	20000020 	.word	0x20000020
 80027ac:	2000001c 	.word	0x2000001c
 80027b0:	55555556 	.word	0x55555556
 80027b4:	2000000c 	.word	0x2000000c
	PWM_Change_Tones(0, 0);
 80027b8:	46a4      	mov	ip, r4
 80027ba:	2100      	movs	r1, #0
 80027bc:	2000      	movs	r0, #0
 80027be:	f7fe f93b 	bl	8000a38 <PWM_Change_Tones.5>
if (grid[newX][newY]==2) {
 80027c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	461a      	mov	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d13e      	bne.n	800285a <moveSnake2.13+0x3da>
	health--;
 80027dc:	4b73      	ldr	r3, [pc, #460]	; (80029ac <moveSnake2.13+0x52c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	4a72      	ldr	r2, [pc, #456]	; (80029ac <moveSnake2.13+0x52c>)
 80027e4:	6013      	str	r3, [r2, #0]
	PWM_Change_Tones(700, 100);
 80027e6:	46a4      	mov	ip, r4
 80027e8:	2164      	movs	r1, #100	; 0x64
 80027ea:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80027ee:	f7fe f923 	bl	8000a38 <PWM_Change_Tones.5>
	HAL_Delay(10);
 80027f2:	200a      	movs	r0, #10
 80027f4:	f002 fb88 	bl	8004f08 <HAL_Delay>
if(currentDir==RIGHT)
 80027f8:	f894 3020 	ldrb.w	r3, [r4, #32]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d106      	bne.n	800280e <moveSnake2.13+0x38e>
currentDir=DOWN;
 8002800:	2301      	movs	r3, #1
 8002802:	f884 3020 	strb.w	r3, [r4, #32]
direction=2;
 8002806:	4b6a      	ldr	r3, [pc, #424]	; (80029b0 <moveSnake2.13+0x530>)
 8002808:	2202      	movs	r2, #2
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e01f      	b.n	800284e <moveSnake2.13+0x3ce>
}else if(currentDir==DOWN){
 800280e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d106      	bne.n	8002824 <moveSnake2.13+0x3a4>
currentDir=LEFT;
 8002816:	2302      	movs	r3, #2
 8002818:	f884 3020 	strb.w	r3, [r4, #32]
direction=3;
 800281c:	4b64      	ldr	r3, [pc, #400]	; (80029b0 <moveSnake2.13+0x530>)
 800281e:	2203      	movs	r2, #3
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e014      	b.n	800284e <moveSnake2.13+0x3ce>
else if(currentDir==LEFT){
 8002824:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d106      	bne.n	800283a <moveSnake2.13+0x3ba>
	direction=1;
 800282c:	4b60      	ldr	r3, [pc, #384]	; (80029b0 <moveSnake2.13+0x530>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]
	currentDir=UP;}
 8002832:	2300      	movs	r3, #0
 8002834:	f884 3020 	strb.w	r3, [r4, #32]
 8002838:	e009      	b.n	800284e <moveSnake2.13+0x3ce>
else if(currentDir==UP){
 800283a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d105      	bne.n	800284e <moveSnake2.13+0x3ce>
	currentDir=RIGHT;
 8002842:	2303      	movs	r3, #3
 8002844:	f884 3020 	strb.w	r3, [r4, #32]
direction=4;}
 8002848:	4b59      	ldr	r3, [pc, #356]	; (80029b0 <moveSnake2.13+0x530>)
 800284a:	2204      	movs	r2, #4
 800284c:	601a      	str	r2, [r3, #0]
PWM_Change_Tones(0, 0);
 800284e:	46a4      	mov	ip, r4
 8002850:	2100      	movs	r1, #0
 8002852:	2000      	movs	r0, #0
 8002854:	f7fe f8f0 	bl	8000a38 <PWM_Change_Tones.5>
return;
 8002858:	e0a4      	b.n	80029a4 <moveSnake2.13+0x524>
if(grid[newX][newY]==6){
 800285a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	461a      	mov	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800286c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002870:	2b06      	cmp	r3, #6
 8002872:	d104      	bne.n	800287e <moveSnake2.13+0x3fe>
	health--;
 8002874:	4b4d      	ldr	r3, [pc, #308]	; (80029ac <moveSnake2.13+0x52c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3b01      	subs	r3, #1
 800287a:	4a4c      	ldr	r2, [pc, #304]	; (80029ac <moveSnake2.13+0x52c>)
 800287c:	6013      	str	r3, [r2, #0]
if(delete==0){
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d133      	bne.n	80028ec <moveSnake2.13+0x46c>
tails = head;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
while ( tails->next->next != NULL) {
 8002888:	e002      	b.n	8002890 <moveSnake2.13+0x410>
tails = tails->next;
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
while ( tails->next->next != NULL) {
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f7      	bne.n	800288a <moveSnake2.13+0x40a>
grid[tails->next->x][tails->next->y] = -1;
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	461a      	mov	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4413      	add	r3, r2
 80028b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b2:	6892      	ldr	r2, [r2, #8]
 80028b4:	6852      	ldr	r2, [r2, #4]
 80028b6:	f04f 31ff 	mov.w	r1, #4294967295
 80028ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
setCursor(tails->next->y, tails->next->x);
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	4619      	mov	r1, r3
 80028d0:	4610      	mov	r0, r2
 80028d2:	f7fd ff3b 	bl	800074c <setCursor>
print(" ");
 80028d6:	4837      	ldr	r0, [pc, #220]	; (80029b4 <moveSnake2.13+0x534>)
 80028d8:	f7fd ff80 	bl	80007dc <print>
free(tails->next);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f006 fe25 	bl	8009530 <free>
tails->next = NULL;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
}delete=0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	623b      	str	r3, [r7, #32]
struct Segment* newHead = malloc(sizeof(struct Segment));
 80028f0:	200c      	movs	r0, #12
 80028f2:	f006 fe15 	bl	8009520 <malloc>
 80028f6:	4603      	mov	r3, r0
 80028f8:	613b      	str	r3, [r7, #16]
newHead->x = newX;
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028fe:	601a      	str	r2, [r3, #0]
newHead->y = newY;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002904:	605a      	str	r2, [r3, #4]
newHead->next = head;
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	609a      	str	r2, [r3, #8]
segment = newHead;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	6023      	str	r3, [r4, #0]
struct Segment* segments = segment;
 8002910:	6823      	ldr	r3, [r4, #0]
 8002912:	61fb      	str	r3, [r7, #28]
if(  segments){
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d01e      	beq.n	8002958 <moveSnake2.13+0x4d8>
	grid[segments->x][segments->y] = 5;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	461a      	mov	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	6852      	ldr	r2, [r2, #4]
 8002932:	2105      	movs	r1, #5
 8002934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
setCursor(segments->y, segments->x);
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f7fd ff00 	bl	800074c <setCursor>
write(5);
 800294c:	2005      	movs	r0, #5
 800294e:	f7fd ffa7 	bl	80008a0 <write>
HAL_Delay(100);
 8002952:	2064      	movs	r0, #100	; 0x64
 8002954:	f002 fad8 	bl	8004f08 <HAL_Delay>
	segments = segments->next;
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	61fb      	str	r3, [r7, #28]
while (segments != NULL) {
 800295e:	e01e      	b.n	800299e <moveSnake2.13+0x51e>
grid[segments->x][segments->y] = 6;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	461a      	mov	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	6852      	ldr	r2, [r2, #4]
 8002978:	2106      	movs	r1, #6
 800297a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
setCursor(segments->y, segments->x);
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	4619      	mov	r1, r3
 800298c:	4610      	mov	r0, r2
 800298e:	f7fd fedd 	bl	800074c <setCursor>
write(6);
 8002992:	2006      	movs	r0, #6
 8002994:	f7fd ff84 	bl	80008a0 <write>
segments = segments->next;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	61fb      	str	r3, [r7, #28]
while (segments != NULL) {
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1dd      	bne.n	8002960 <moveSnake2.13+0x4e0>
}
 80029a4:	3734      	adds	r7, #52	; 0x34
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd90      	pop	{r4, r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000008 	.word	0x20000008
 80029b0:	20000018 	.word	0x20000018
 80029b4:	0800aa5c 	.word	0x0800aa5c

080029b8 <moveSnake3.14>:
[20]) {
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b08d      	sub	sp, #52	; 0x34
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	460b      	mov	r3, r1
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	72fb      	strb	r3, [r7, #11]
 80029c6:	4664      	mov	r4, ip
 80029c8:	f8c7 c000 	str.w	ip, [r7]
int newX = head->x;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
int newY = head->y;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
switch (dir) {
 80029d8:	7afb      	ldrb	r3, [r7, #11]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d81a      	bhi.n	8002a14 <moveSnake3.14+0x5c>
 80029de:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <moveSnake3.14+0x2c>)
 80029e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e4:	080029f5 	.word	0x080029f5
 80029e8:	080029fd 	.word	0x080029fd
 80029ec:	08002a05 	.word	0x08002a05
 80029f0:	08002a0d 	.word	0x08002a0d
case UP: newX--; break;
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	3b01      	subs	r3, #1
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029fa:	e00b      	b.n	8002a14 <moveSnake3.14+0x5c>
case DOWN: newX++; break;
 80029fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fe:	3301      	adds	r3, #1
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a02:	e007      	b.n	8002a14 <moveSnake3.14+0x5c>
case LEFT: newY--; break;
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	3b01      	subs	r3, #1
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0a:	e003      	b.n	8002a14 <moveSnake3.14+0x5c>
case RIGHT: newY++; break;
 8002a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0e:	3301      	adds	r3, #1
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a12:	bf00      	nop
if (newX < 0) newX = 4 - 1;
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	da01      	bge.n	8002a1e <moveSnake3.14+0x66>
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
if (newX >= 4) newX = 0;
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	dd01      	ble.n	8002a28 <moveSnake3.14+0x70>
 8002a24:	2300      	movs	r3, #0
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
if (newY < 0) newY = 20 - 1;
 8002a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da01      	bge.n	8002a32 <moveSnake3.14+0x7a>
 8002a2e:	2313      	movs	r3, #19
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
if (newY >= 20) newY = 0;
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	2b13      	cmp	r3, #19
 8002a36:	dd01      	ble.n	8002a3c <moveSnake3.14+0x84>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
struct Segment* tails = head;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
int delete=0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	623b      	str	r3, [r7, #32]
mysterytimecount++;
 8002a44:	4ba8      	ldr	r3, [pc, #672]	; (8002ce8 <moveSnake3.14+0x330>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	4aa7      	ldr	r2, [pc, #668]	; (8002ce8 <moveSnake3.14+0x330>)
 8002a4c:	6013      	str	r3, [r2, #0]
if(mysterytimecount>5){
 8002a4e:	4ba6      	ldr	r3, [pc, #664]	; (8002ce8 <moveSnake3.14+0x330>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	dd22      	ble.n	8002a9c <moveSnake3.14+0xe4>
	mysterytimecount=0;
 8002a56:	4ba4      	ldr	r3, [pc, #656]	; (8002ce8 <moveSnake3.14+0x330>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
	grid[xmystery][ymystery]=-1;
 8002a5c:	4ba3      	ldr	r3, [pc, #652]	; (8002cec <moveSnake3.14+0x334>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a9f      	ldr	r2, [pc, #636]	; (8002cf0 <moveSnake3.14+0x338>)
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	setCursor(ymystery, xmystery);
 8002a7c:	4b9c      	ldr	r3, [pc, #624]	; (8002cf0 <moveSnake3.14+0x338>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	4a9a      	ldr	r2, [pc, #616]	; (8002cec <moveSnake3.14+0x334>)
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	4611      	mov	r1, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fe5e 	bl	800074c <setCursor>
	print(" ");
 8002a90:	4898      	ldr	r0, [pc, #608]	; (8002cf4 <moveSnake3.14+0x33c>)
 8002a92:	f7fd fea3 	bl	80007dc <print>
	randommys();
 8002a96:	46a4      	mov	ip, r4
 8002a98:	f7ff f8e0 	bl	8001c5c <randommys.1>
if (grid[newX][newY]==1) {
 8002a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d148      	bne.n	8002b48 <moveSnake3.14+0x190>
	PWM_Change_Tones(500, 100);
 8002ab6:	46a4      	mov	ip, r4
 8002ab8:	2164      	movs	r1, #100	; 0x64
 8002aba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002abe:	f7fd ffbb 	bl	8000a38 <PWM_Change_Tones.5>
	point++;
 8002ac2:	4b8d      	ldr	r3, [pc, #564]	; (8002cf8 <moveSnake3.14+0x340>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	4a8b      	ldr	r2, [pc, #556]	; (8002cf8 <moveSnake3.14+0x340>)
 8002aca:	6013      	str	r3, [r2, #0]
	delete=1;
 8002acc:	2301      	movs	r3, #1
 8002ace:	623b      	str	r3, [r7, #32]
	grid[newX][newY]=-1;
 8002ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	setCursor(newY, newX);
 8002aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fd fe29 	bl	800074c <setCursor>
	print(" ");
 8002afa:	487e      	ldr	r0, [pc, #504]	; (8002cf4 <moveSnake3.14+0x33c>)
 8002afc:	f7fd fe6e 	bl	80007dc <print>
	struct Segment* newHead = malloc(sizeof(struct Segment));
 8002b00:	200c      	movs	r0, #12
 8002b02:	f006 fd0d 	bl	8009520 <malloc>
 8002b06:	4603      	mov	r3, r0
 8002b08:	61bb      	str	r3, [r7, #24]
	newHead->x = newX;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0e:	601a      	str	r2, [r3, #0]
	newHead->y = newY;
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b14:	605a      	str	r2, [r3, #4]
	newHead->next = head;
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	609a      	str	r2, [r3, #8]
	segment = newHead;
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	6023      	str	r3, [r4, #0]
	currentapples--;
 8002b20:	4b76      	ldr	r3, [pc, #472]	; (8002cfc <moveSnake3.14+0x344>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	4a75      	ldr	r2, [pc, #468]	; (8002cfc <moveSnake3.14+0x344>)
 8002b28:	6013      	str	r3, [r2, #0]
if(currentapples==0)
 8002b2a:	4b74      	ldr	r3, [pc, #464]	; (8002cfc <moveSnake3.14+0x344>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d105      	bne.n	8002b3e <moveSnake3.14+0x186>
	currentapples=1;
 8002b32:	4b72      	ldr	r3, [pc, #456]	; (8002cfc <moveSnake3.14+0x344>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
	randomapple();
 8002b38:	46a4      	mov	ip, r4
 8002b3a:	f7ff f82d 	bl	8001b98 <randomapple.3>
PWM_Change_Tones(0, 0);
 8002b3e:	46a4      	mov	ip, r4
 8002b40:	2100      	movs	r1, #0
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7fd ff78 	bl	8000a38 <PWM_Change_Tones.5>
if (grid[newX][newY]==3) {
 8002b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	461a      	mov	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4413      	add	r3, r2
 8002b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d12f      	bne.n	8002bc2 <moveSnake3.14+0x20a>
	PWM_Change_Tones(650, 100);
 8002b62:	46a4      	mov	ip, r4
 8002b64:	2164      	movs	r1, #100	; 0x64
 8002b66:	f240 208a 	movw	r0, #650	; 0x28a
 8002b6a:	f7fd ff65 	bl	8000a38 <PWM_Change_Tones.5>
	grid[newX][newY]=-1;
 8002b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	461a      	mov	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b80:	f04f 31ff 	mov.w	r1, #4294967295
 8002b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if(health<99)
 8002b88:	4b5d      	ldr	r3, [pc, #372]	; (8002d00 <moveSnake3.14+0x348>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b62      	cmp	r3, #98	; 0x62
 8002b8e:	dc04      	bgt.n	8002b9a <moveSnake3.14+0x1e2>
	health++;
 8002b90:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <moveSnake3.14+0x348>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	4a5a      	ldr	r2, [pc, #360]	; (8002d00 <moveSnake3.14+0x348>)
 8002b98:	6013      	str	r3, [r2, #0]
	currenthealth--;
 8002b9a:	4b5a      	ldr	r3, [pc, #360]	; (8002d04 <moveSnake3.14+0x34c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	4a58      	ldr	r2, [pc, #352]	; (8002d04 <moveSnake3.14+0x34c>)
 8002ba2:	6013      	str	r3, [r2, #0]
if(currenthealth==0)
 8002ba4:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <moveSnake3.14+0x34c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d105      	bne.n	8002bb8 <moveSnake3.14+0x200>
	currenthealth=1;
 8002bac:	4b55      	ldr	r3, [pc, #340]	; (8002d04 <moveSnake3.14+0x34c>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
	randomhealth();
 8002bb2:	46a4      	mov	ip, r4
 8002bb4:	f7ff f8c6 	bl	8001d44 <randomhealth.4>
PWM_Change_Tones(0, 0);
 8002bb8:	46a4      	mov	ip, r4
 8002bba:	2100      	movs	r1, #0
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7fd ff3b 	bl	8000a38 <PWM_Change_Tones.5>
if (grid[newX][newY]==4)
 8002bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	461a      	mov	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d105      	bne.n	8002be8 <moveSnake3.14+0x230>
	PWM_Change_Tones(400, 100);
 8002bdc:	46a4      	mov	ip, r4
 8002bde:	2164      	movs	r1, #100	; 0x64
 8002be0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002be4:	f7fd ff28 	bl	8000a38 <PWM_Change_Tones.5>
	grid[newX][newY]=-1;
 8002be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bfa:	f04f 31ff 	mov.w	r1, #4294967295
 8002bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	int random=(rand()%(3-1+1)+1);
 8002c02:	f006 fdb3 	bl	800976c <rand>
 8002c06:	4601      	mov	r1, r0
 8002c08:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <moveSnake3.14+0x350>)
 8002c0a:	fb83 3201 	smull	r3, r2, r3, r1
 8002c0e:	17cb      	asrs	r3, r1, #31
 8002c10:	1ad2      	subs	r2, r2, r3
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	1aca      	subs	r2, r1, r3
 8002c1a:	1c53      	adds	r3, r2, #1
 8002c1c:	617b      	str	r3, [r7, #20]
	if(random==0){
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d108      	bne.n	8002c36 <moveSnake3.14+0x27e>
		if(point<99)point=point+2;;
 8002c24:	4b34      	ldr	r3, [pc, #208]	; (8002cf8 <moveSnake3.14+0x340>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b62      	cmp	r3, #98	; 0x62
 8002c2a:	dc04      	bgt.n	8002c36 <moveSnake3.14+0x27e>
 8002c2c:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <moveSnake3.14+0x340>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3302      	adds	r3, #2
 8002c32:	4a31      	ldr	r2, [pc, #196]	; (8002cf8 <moveSnake3.14+0x340>)
 8002c34:	6013      	str	r3, [r2, #0]
	if(random==1){
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d108      	bne.n	8002c4e <moveSnake3.14+0x296>
		if(health<99)health=health+2;
 8002c3c:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <moveSnake3.14+0x348>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b62      	cmp	r3, #98	; 0x62
 8002c42:	dc04      	bgt.n	8002c4e <moveSnake3.14+0x296>
 8002c44:	4b2e      	ldr	r3, [pc, #184]	; (8002d00 <moveSnake3.14+0x348>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3302      	adds	r3, #2
 8002c4a:	4a2d      	ldr	r2, [pc, #180]	; (8002d00 <moveSnake3.14+0x348>)
 8002c4c:	6013      	str	r3, [r2, #0]
	if(random==2){
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d108      	bne.n	8002c66 <moveSnake3.14+0x2ae>
		if(speed>=2)speed--;
 8002c54:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <moveSnake3.14+0x354>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	dd04      	ble.n	8002c66 <moveSnake3.14+0x2ae>
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <moveSnake3.14+0x354>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	4a2a      	ldr	r2, [pc, #168]	; (8002d0c <moveSnake3.14+0x354>)
 8002c64:	6013      	str	r3, [r2, #0]
	PWM_Change_Tones(0, 0);
 8002c66:	46a4      	mov	ip, r4
 8002c68:	2100      	movs	r1, #0
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f7fd fee4 	bl	8000a38 <PWM_Change_Tones.5>
if (grid[newX][newY]==2) {
 8002c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4413      	add	r3, r2
 8002c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d154      	bne.n	8002d34 <moveSnake3.14+0x37c>
	health--;
 8002c8a:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <moveSnake3.14+0x348>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <moveSnake3.14+0x348>)
 8002c92:	6013      	str	r3, [r2, #0]
	PWM_Change_Tones(700, 100);
 8002c94:	46a4      	mov	ip, r4
 8002c96:	2164      	movs	r1, #100	; 0x64
 8002c98:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002c9c:	f7fd fecc 	bl	8000a38 <PWM_Change_Tones.5>
	HAL_Delay(10);
 8002ca0:	200a      	movs	r0, #10
 8002ca2:	f002 f931 	bl	8004f08 <HAL_Delay>
if(currentDir==RIGHT)
 8002ca6:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d106      	bne.n	8002cbc <moveSnake3.14+0x304>
currentDir=DOWN;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f884 3020 	strb.w	r3, [r4, #32]
direction=2;
 8002cb4:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <moveSnake3.14+0x358>)
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e035      	b.n	8002d28 <moveSnake3.14+0x370>
}else if(currentDir==DOWN){
 8002cbc:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d106      	bne.n	8002cd2 <moveSnake3.14+0x31a>
currentDir=LEFT;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	f884 3020 	strb.w	r3, [r4, #32]
direction=3;
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <moveSnake3.14+0x358>)
 8002ccc:	2203      	movs	r2, #3
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	e02a      	b.n	8002d28 <moveSnake3.14+0x370>
else if(currentDir==LEFT){
 8002cd2:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d11c      	bne.n	8002d14 <moveSnake3.14+0x35c>
	direction=1;
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <moveSnake3.14+0x358>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
	currentDir=UP;}
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f884 3020 	strb.w	r3, [r4, #32]
 8002ce6:	e01f      	b.n	8002d28 <moveSnake3.14+0x370>
 8002ce8:	200005e8 	.word	0x200005e8
 8002cec:	200005ec 	.word	0x200005ec
 8002cf0:	200005f0 	.word	0x200005f0
 8002cf4:	0800aa5c 	.word	0x0800aa5c
 8002cf8:	20000734 	.word	0x20000734
 8002cfc:	20000020 	.word	0x20000020
 8002d00:	20000008 	.word	0x20000008
 8002d04:	2000001c 	.word	0x2000001c
 8002d08:	55555556 	.word	0x55555556
 8002d0c:	2000000c 	.word	0x2000000c
 8002d10:	20000018 	.word	0x20000018
else if(currentDir==UP){
 8002d14:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <moveSnake3.14+0x370>
	currentDir=RIGHT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	f884 3020 	strb.w	r3, [r4, #32]
direction=4;}
 8002d22:	4b58      	ldr	r3, [pc, #352]	; (8002e84 <moveSnake3.14+0x4cc>)
 8002d24:	2204      	movs	r2, #4
 8002d26:	601a      	str	r2, [r3, #0]
PWM_Change_Tones(0, 0);
 8002d28:	46a4      	mov	ip, r4
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7fd fe83 	bl	8000a38 <PWM_Change_Tones.5>
return;
 8002d32:	e0a4      	b.n	8002e7e <moveSnake3.14+0x4c6>
if(grid[newX][newY]==6){
 8002d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	461a      	mov	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	d104      	bne.n	8002d58 <moveSnake3.14+0x3a0>
	health--;
 8002d4e:	4b4e      	ldr	r3, [pc, #312]	; (8002e88 <moveSnake3.14+0x4d0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	4a4c      	ldr	r2, [pc, #304]	; (8002e88 <moveSnake3.14+0x4d0>)
 8002d56:	6013      	str	r3, [r2, #0]
if(delete==0){
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d133      	bne.n	8002dc6 <moveSnake3.14+0x40e>
tails = head;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
while ( tails->next->next != NULL) {
 8002d62:	e002      	b.n	8002d6a <moveSnake3.14+0x3b2>
tails = tails->next;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
while ( tails->next->next != NULL) {
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f7      	bne.n	8002d64 <moveSnake3.14+0x3ac>
grid[tails->next->x][tails->next->y] = -1;
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	461a      	mov	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8c:	6892      	ldr	r2, [r2, #8]
 8002d8e:	6852      	ldr	r2, [r2, #4]
 8002d90:	f04f 31ff 	mov.w	r1, #4294967295
 8002d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
setCursor(tails->next->y, tails->next->x);
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	4619      	mov	r1, r3
 8002daa:	4610      	mov	r0, r2
 8002dac:	f7fd fcce 	bl	800074c <setCursor>
print(" ");
 8002db0:	4836      	ldr	r0, [pc, #216]	; (8002e8c <moveSnake3.14+0x4d4>)
 8002db2:	f7fd fd13 	bl	80007dc <print>
free(tails->next);
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f006 fbb8 	bl	8009530 <free>
tails->next = NULL;
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
}delete=0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
struct Segment* newHead = malloc(sizeof(struct Segment));
 8002dca:	200c      	movs	r0, #12
 8002dcc:	f006 fba8 	bl	8009520 <malloc>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	613b      	str	r3, [r7, #16]
newHead->x = newX;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd8:	601a      	str	r2, [r3, #0]
newHead->y = newY;
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dde:	605a      	str	r2, [r3, #4]
newHead->next = head;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	609a      	str	r2, [r3, #8]
segment = newHead;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	6023      	str	r3, [r4, #0]
struct Segment* segments = segment;
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	61fb      	str	r3, [r7, #28]
if(  segments){
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01e      	beq.n	8002e32 <moveSnake3.14+0x47a>
	grid[segments->x][segments->y] = 5;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	461a      	mov	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4413      	add	r3, r2
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	6852      	ldr	r2, [r2, #4]
 8002e0c:	2105      	movs	r1, #5
 8002e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
setCursor(segments->y, segments->x);
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4610      	mov	r0, r2
 8002e22:	f7fd fc93 	bl	800074c <setCursor>
write(5);
 8002e26:	2005      	movs	r0, #5
 8002e28:	f7fd fd3a 	bl	80008a0 <write>
HAL_Delay(100);
 8002e2c:	2064      	movs	r0, #100	; 0x64
 8002e2e:	f002 f86b 	bl	8004f08 <HAL_Delay>
	segments = segments->next;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	61fb      	str	r3, [r7, #28]
while (segments != NULL) {
 8002e38:	e01e      	b.n	8002e78 <moveSnake3.14+0x4c0>
grid[segments->x][segments->y] = 6;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	461a      	mov	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	69fa      	ldr	r2, [r7, #28]
 8002e50:	6852      	ldr	r2, [r2, #4]
 8002e52:	2106      	movs	r1, #6
 8002e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
setCursor(segments->y, segments->x);
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f7fd fc70 	bl	800074c <setCursor>
write(6);
 8002e6c:	2006      	movs	r0, #6
 8002e6e:	f7fd fd17 	bl	80008a0 <write>
segments = segments->next;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	61fb      	str	r3, [r7, #28]
while (segments != NULL) {
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1dd      	bne.n	8002e3a <moveSnake3.14+0x482>
}
 8002e7e:	3734      	adds	r7, #52	; 0x34
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd90      	pop	{r4, r7, pc}
 8002e84:	20000018 	.word	0x20000018
 8002e88:	20000008 	.word	0x20000008
 8002e8c:	0800aa5c 	.word	0x0800aa5c

08002e90 <initialize.0>:
void initialize(){
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b091      	sub	sp, #68	; 0x44
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4664      	mov	r4, ip
 8002e98:	f8c7 c004 	str.w	ip, [r7, #4]
	int rowmin=0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	633b      	str	r3, [r7, #48]	; 0x30
	int rowmax=3;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
	int colmin=0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
	int colmax=19;
 8002ea8:	2313      	movs	r3, #19
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
	srand(HAL_GetTick());
 8002eac:	f002 f820 	bl	8004ef0 <HAL_GetTick>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f006 fc2c 	bl	8009710 <srand>
	for(int i=0;i<blocks;i++){
 8002eb8:	2300      	movs	r3, #0
 8002eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ebc:	e047      	b.n	8002f4e <initialize.0+0xbe>
		int rowrandom=(rand()%(rowmax-rowmin+1)+rowmin);
 8002ebe:	f006 fc55 	bl	800976c <rand>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	1acb      	subs	r3, r1, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	fb92 f1f3 	sdiv	r1, r2, r3
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed8:	4413      	add	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
int colrandom=(rand()%(colmax-colmin+1)+colmin);
 8002edc:	f006 fc46 	bl	800976c <rand>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	1acb      	subs	r3, r1, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	fb92 f1f3 	sdiv	r1, r2, r3
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ef6:	4413      	add	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
if(grid[rowrandom][colrandom]==-1){
 8002efa:	4969      	ldr	r1, [pc, #420]	; (80030a0 <initialize.0+0x210>)
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f12:	d116      	bne.n	8002f42 <initialize.0+0xb2>
	setCursor(colrandom, rowrandom);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fc14 	bl	800074c <setCursor>
	write(2);
 8002f24:	2002      	movs	r0, #2
 8002f26:	f7fd fcbb 	bl	80008a0 <write>
	grid[rowrandom][colrandom]=2;
 8002f2a:	495d      	ldr	r1, [pc, #372]	; (80030a0 <initialize.0+0x210>)
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4413      	add	r3, r2
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002f40:	e002      	b.n	8002f48 <initialize.0+0xb8>
else i--;
 8002f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f44:	3b01      	subs	r3, #1
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int i=0;i<blocks;i++){
 8002f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f4e:	4b55      	ldr	r3, [pc, #340]	; (80030a4 <initialize.0+0x214>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f54:	429a      	cmp	r2, r3
 8002f56:	dbb2      	blt.n	8002ebe <initialize.0+0x2e>
	for(int i=0;i<2;i++){
 8002f58:	2300      	movs	r3, #0
 8002f5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f5c:	e047      	b.n	8002fee <initialize.0+0x15e>
		int rowrandom=(rand()%(rowmax-rowmin+1)+rowmin);
 8002f5e:	f006 fc05 	bl	800976c <rand>
 8002f62:	4602      	mov	r2, r0
 8002f64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	1acb      	subs	r3, r1, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	fb92 f1f3 	sdiv	r1, r2, r3
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f78:	4413      	add	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
int colrandom=(rand()%(colmax-colmin+1)+colmin);
 8002f7c:	f006 fbf6 	bl	800976c <rand>
 8002f80:	4602      	mov	r2, r0
 8002f82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f86:	1acb      	subs	r3, r1, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	fb92 f1f3 	sdiv	r1, r2, r3
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f96:	4413      	add	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]
if(grid[rowrandom][colrandom]==-1){
 8002f9a:	4941      	ldr	r1, [pc, #260]	; (80030a0 <initialize.0+0x210>)
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb2:	d116      	bne.n	8002fe2 <initialize.0+0x152>
	setCursor(colrandom, rowrandom);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd fbc4 	bl	800074c <setCursor>
	write(0);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7fd fc6b 	bl	80008a0 <write>
	grid[rowrandom][colrandom]=3;
 8002fca:	4935      	ldr	r1, [pc, #212]	; (80030a0 <initialize.0+0x210>)
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4413      	add	r3, r2
 8002fda:	2203      	movs	r2, #3
 8002fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002fe0:	e002      	b.n	8002fe8 <initialize.0+0x158>
else i--;
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	63bb      	str	r3, [r7, #56]	; 0x38
	for(int i=0;i<2;i++){
 8002fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fea:	3301      	adds	r3, #1
 8002fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	ddb4      	ble.n	8002f5e <initialize.0+0xce>
	for(int i=0;i<3;i++){
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff8:	e047      	b.n	800308a <initialize.0+0x1fa>
		int rowrandom=(rand()%(rowmax-rowmin+1)+rowmin);
 8002ffa:	f006 fbb7 	bl	800976c <rand>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	1acb      	subs	r3, r1, r3
 8003006:	3301      	adds	r3, #1
 8003008:	fb92 f1f3 	sdiv	r1, r2, r3
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003014:	4413      	add	r3, r2
 8003016:	623b      	str	r3, [r7, #32]
int colrandom=(rand()%(colmax-colmin+1)+colmin);
 8003018:	f006 fba8 	bl	800976c <rand>
 800301c:	4602      	mov	r2, r0
 800301e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	1acb      	subs	r3, r1, r3
 8003024:	3301      	adds	r3, #1
 8003026:	fb92 f1f3 	sdiv	r1, r2, r3
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003032:	4413      	add	r3, r2
 8003034:	61fb      	str	r3, [r7, #28]
if(grid[rowrandom][colrandom]==-1){
 8003036:	491a      	ldr	r1, [pc, #104]	; (80030a0 <initialize.0+0x210>)
 8003038:	6a3a      	ldr	r2, [r7, #32]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	4413      	add	r3, r2
 8003046:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800304a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304e:	d116      	bne.n	800307e <initialize.0+0x1ee>
	setCursor(colrandom, rowrandom);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	6a3a      	ldr	r2, [r7, #32]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fb76 	bl	800074c <setCursor>
	write(1);
 8003060:	2001      	movs	r0, #1
 8003062:	f7fd fc1d 	bl	80008a0 <write>
	grid[rowrandom][colrandom]=1;
 8003066:	490e      	ldr	r1, [pc, #56]	; (80030a0 <initialize.0+0x210>)
 8003068:	6a3a      	ldr	r2, [r7, #32]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	4413      	add	r3, r2
 8003076:	2201      	movs	r2, #1
 8003078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800307c:	e002      	b.n	8003084 <initialize.0+0x1f4>
else i--;
 800307e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003080:	3b01      	subs	r3, #1
 8003082:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i=0;i<3;i++){
 8003084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003086:	3301      	adds	r3, #1
 8003088:	637b      	str	r3, [r7, #52]	; 0x34
 800308a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308c:	2b02      	cmp	r3, #2
 800308e:	ddb4      	ble.n	8002ffa <initialize.0+0x16a>
randommys();
 8003090:	46a4      	mov	ip, r4
 8003092:	f7fe fde3 	bl	8001c5c <randommys.1>
}
 8003096:	bf00      	nop
 8003098:	3744      	adds	r7, #68	; 0x44
 800309a:	46bd      	mov	sp, r7
 800309c:	bd90      	pop	{r4, r7, pc}
 800309e:	bf00      	nop
 80030a0:	200005f4 	.word	0x200005f4
 80030a4:	20000014 	.word	0x20000014

080030a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b09e      	sub	sp, #120	; 0x78
 80030ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030b2:	2228      	movs	r2, #40	; 0x28
 80030b4:	2100      	movs	r1, #0
 80030b6:	4618      	mov	r0, r3
 80030b8:	f006 fa42 	bl	8009540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030cc:	463b      	mov	r3, r7
 80030ce:	223c      	movs	r2, #60	; 0x3c
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f006 fa34 	bl	8009540 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80030d8:	230b      	movs	r3, #11
 80030da:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80030dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80030e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80030e2:	2300      	movs	r3, #0
 80030e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030e6:	2301      	movs	r3, #1
 80030e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030ea:	2310      	movs	r3, #16
 80030ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80030ee:	2301      	movs	r3, #1
 80030f0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030f2:	2302      	movs	r3, #2
 80030f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030fa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80030fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003100:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003102:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003106:	4618      	mov	r0, r3
 8003108:	f002 fc14 	bl	8005934 <HAL_RCC_OscConfig>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003112:	f000 fab9 	bl	8003688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003116:	230f      	movs	r3, #15
 8003118:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800311a:	2302      	movs	r3, #2
 800311c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800311e:	2300      	movs	r3, #0
 8003120:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003126:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003128:	2300      	movs	r3, #0
 800312a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800312c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003130:	2101      	movs	r1, #1
 8003132:	4618      	mov	r0, r3
 8003134:	f003 fc3c 	bl	80069b0 <HAL_RCC_ClockConfig>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800313e:	f000 faa3 	bl	8003688 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <SystemClock_Config+0xcc>)
 8003144:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800314e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003152:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8003154:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003158:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800315a:	463b      	mov	r3, r7
 800315c:	4618      	mov	r0, r3
 800315e:	f003 fe5d 	bl	8006e1c <HAL_RCCEx_PeriphCLKConfig>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003168:	f000 fa8e 	bl	8003688 <Error_Handler>
  }
}
 800316c:	bf00      	nop
 800316e:	3778      	adds	r7, #120	; 0x78
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	00030024 	.word	0x00030024

08003178 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <MX_I2C1_Init+0x74>)
 800317e:	4a1c      	ldr	r2, [pc, #112]	; (80031f0 <MX_I2C1_Init+0x78>)
 8003180:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003182:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <MX_I2C1_Init+0x74>)
 8003184:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <MX_I2C1_Init+0x7c>)
 8003186:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003188:	4b18      	ldr	r3, [pc, #96]	; (80031ec <MX_I2C1_Init+0x74>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800318e:	4b17      	ldr	r3, [pc, #92]	; (80031ec <MX_I2C1_Init+0x74>)
 8003190:	2201      	movs	r2, #1
 8003192:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003194:	4b15      	ldr	r3, [pc, #84]	; (80031ec <MX_I2C1_Init+0x74>)
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <MX_I2C1_Init+0x74>)
 800319c:	2200      	movs	r2, #0
 800319e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80031a0:	4b12      	ldr	r3, [pc, #72]	; (80031ec <MX_I2C1_Init+0x74>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <MX_I2C1_Init+0x74>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <MX_I2C1_Init+0x74>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031b2:	480e      	ldr	r0, [pc, #56]	; (80031ec <MX_I2C1_Init+0x74>)
 80031b4:	f002 f9c5 	bl	8005542 <HAL_I2C_Init>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80031be:	f000 fa63 	bl	8003688 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80031c2:	2100      	movs	r1, #0
 80031c4:	4809      	ldr	r0, [pc, #36]	; (80031ec <MX_I2C1_Init+0x74>)
 80031c6:	f002 fa4b 	bl	8005660 <HAL_I2CEx_ConfigAnalogFilter>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80031d0:	f000 fa5a 	bl	8003688 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80031d4:	2100      	movs	r1, #0
 80031d6:	4805      	ldr	r0, [pc, #20]	; (80031ec <MX_I2C1_Init+0x74>)
 80031d8:	f002 fa8d 	bl	80056f6 <HAL_I2CEx_ConfigDigitalFilter>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80031e2:	f000 fa51 	bl	8003688 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000114 	.word	0x20000114
 80031f0:	40005400 	.word	0x40005400
 80031f4:	2000090e 	.word	0x2000090e

080031f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800320c:	2300      	movs	r3, #0
 800320e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003210:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <MX_RTC_Init+0xac>)
 8003212:	4a25      	ldr	r2, [pc, #148]	; (80032a8 <MX_RTC_Init+0xb0>)
 8003214:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003216:	4b23      	ldr	r3, [pc, #140]	; (80032a4 <MX_RTC_Init+0xac>)
 8003218:	2200      	movs	r2, #0
 800321a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 39;
 800321c:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <MX_RTC_Init+0xac>)
 800321e:	2227      	movs	r2, #39	; 0x27
 8003220:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 8003222:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <MX_RTC_Init+0xac>)
 8003224:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003228:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800322a:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <MX_RTC_Init+0xac>)
 800322c:	2200      	movs	r2, #0
 800322e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003230:	4b1c      	ldr	r3, [pc, #112]	; (80032a4 <MX_RTC_Init+0xac>)
 8003232:	2200      	movs	r2, #0
 8003234:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003236:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <MX_RTC_Init+0xac>)
 8003238:	2200      	movs	r2, #0
 800323a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800323c:	4819      	ldr	r0, [pc, #100]	; (80032a4 <MX_RTC_Init+0xac>)
 800323e:	f003 ff9d 	bl	800717c <HAL_RTC_Init>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8003248:	f000 fa1e 	bl	8003688 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800324c:	2300      	movs	r3, #0
 800324e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003250:	2300      	movs	r3, #0
 8003252:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003254:	2300      	movs	r3, #0
 8003256:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003258:	2300      	movs	r3, #0
 800325a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003260:	1d3b      	adds	r3, r7, #4
 8003262:	2201      	movs	r2, #1
 8003264:	4619      	mov	r1, r3
 8003266:	480f      	ldr	r0, [pc, #60]	; (80032a4 <MX_RTC_Init+0xac>)
 8003268:	f004 f80b 	bl	8007282 <HAL_RTC_SetTime>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8003272:	f000 fa09 	bl	8003688 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003276:	2301      	movs	r3, #1
 8003278:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800327a:	2301      	movs	r3, #1
 800327c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800327e:	2301      	movs	r3, #1
 8003280:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003282:	2300      	movs	r3, #0
 8003284:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003286:	463b      	mov	r3, r7
 8003288:	2201      	movs	r2, #1
 800328a:	4619      	mov	r1, r3
 800328c:	4805      	ldr	r0, [pc, #20]	; (80032a4 <MX_RTC_Init+0xac>)
 800328e:	f004 f8f0 	bl	8007472 <HAL_RTC_SetDate>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8003298:	f000 f9f6 	bl	8003688 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800329c:	bf00      	nop
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20000168 	.word	0x20000168
 80032a8:	40002800 	.word	0x40002800

080032ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80032b0:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <MX_SPI1_Init+0x74>)
 80032b2:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <MX_SPI1_Init+0x78>)
 80032b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032b6:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <MX_SPI1_Init+0x74>)
 80032b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032be:	4b18      	ldr	r3, [pc, #96]	; (8003320 <MX_SPI1_Init+0x74>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80032c4:	4b16      	ldr	r3, [pc, #88]	; (8003320 <MX_SPI1_Init+0x74>)
 80032c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80032ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032cc:	4b14      	ldr	r3, [pc, #80]	; (8003320 <MX_SPI1_Init+0x74>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032d2:	4b13      	ldr	r3, [pc, #76]	; (8003320 <MX_SPI1_Init+0x74>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032d8:	4b11      	ldr	r3, [pc, #68]	; (8003320 <MX_SPI1_Init+0x74>)
 80032da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80032e0:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <MX_SPI1_Init+0x74>)
 80032e2:	2208      	movs	r2, #8
 80032e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032e6:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <MX_SPI1_Init+0x74>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <MX_SPI1_Init+0x74>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <MX_SPI1_Init+0x74>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80032f8:	4b09      	ldr	r3, [pc, #36]	; (8003320 <MX_SPI1_Init+0x74>)
 80032fa:	2207      	movs	r2, #7
 80032fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <MX_SPI1_Init+0x74>)
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <MX_SPI1_Init+0x74>)
 8003306:	2208      	movs	r2, #8
 8003308:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800330a:	4805      	ldr	r0, [pc, #20]	; (8003320 <MX_SPI1_Init+0x74>)
 800330c:	f004 fa42 	bl	8007794 <HAL_SPI_Init>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003316:	f000 f9b7 	bl	8003688 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000188 	.word	0x20000188
 8003324:	40013000 	.word	0x40013000

08003328 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08e      	sub	sp, #56	; 0x38
 800332c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800332e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800333c:	f107 031c 	add.w	r3, r7, #28
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003348:	463b      	mov	r3, r7
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	609a      	str	r2, [r3, #8]
 8003352:	60da      	str	r2, [r3, #12]
 8003354:	611a      	str	r2, [r3, #16]
 8003356:	615a      	str	r2, [r3, #20]
 8003358:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800335a:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <MX_TIM2_Init+0xe8>)
 800335c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003360:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003362:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <MX_TIM2_Init+0xe8>)
 8003364:	2200      	movs	r2, #0
 8003366:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003368:	4b29      	ldr	r3, [pc, #164]	; (8003410 <MX_TIM2_Init+0xe8>)
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800336e:	4b28      	ldr	r3, [pc, #160]	; (8003410 <MX_TIM2_Init+0xe8>)
 8003370:	f04f 32ff 	mov.w	r2, #4294967295
 8003374:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003376:	4b26      	ldr	r3, [pc, #152]	; (8003410 <MX_TIM2_Init+0xe8>)
 8003378:	2200      	movs	r2, #0
 800337a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800337c:	4b24      	ldr	r3, [pc, #144]	; (8003410 <MX_TIM2_Init+0xe8>)
 800337e:	2200      	movs	r2, #0
 8003380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003382:	4823      	ldr	r0, [pc, #140]	; (8003410 <MX_TIM2_Init+0xe8>)
 8003384:	f004 fab1 	bl	80078ea <HAL_TIM_Base_Init>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800338e:	f000 f97b 	bl	8003688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003398:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800339c:	4619      	mov	r1, r3
 800339e:	481c      	ldr	r0, [pc, #112]	; (8003410 <MX_TIM2_Init+0xe8>)
 80033a0:	f004 fd70 	bl	8007e84 <HAL_TIM_ConfigClockSource>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80033aa:	f000 f96d 	bl	8003688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80033ae:	4818      	ldr	r0, [pc, #96]	; (8003410 <MX_TIM2_Init+0xe8>)
 80033b0:	f004 faf2 	bl	8007998 <HAL_TIM_PWM_Init>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80033ba:	f000 f965 	bl	8003688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033c6:	f107 031c 	add.w	r3, r7, #28
 80033ca:	4619      	mov	r1, r3
 80033cc:	4810      	ldr	r0, [pc, #64]	; (8003410 <MX_TIM2_Init+0xe8>)
 80033ce:	f005 fa49 	bl	8008864 <HAL_TIMEx_MasterConfigSynchronization>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80033d8:	f000 f956 	bl	8003688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033dc:	2360      	movs	r3, #96	; 0x60
 80033de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033ec:	463b      	mov	r3, r7
 80033ee:	2204      	movs	r2, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4807      	ldr	r0, [pc, #28]	; (8003410 <MX_TIM2_Init+0xe8>)
 80033f4:	f004 fc32 	bl	8007c5c <HAL_TIM_PWM_ConfigChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80033fe:	f000 f943 	bl	8003688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003402:	4803      	ldr	r0, [pc, #12]	; (8003410 <MX_TIM2_Init+0xe8>)
 8003404:	f000 fa34 	bl	8003870 <HAL_TIM_MspPostInit>

}
 8003408:	bf00      	nop
 800340a:	3738      	adds	r7, #56	; 0x38
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	200001ec 	.word	0x200001ec

08003414 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <MX_USART3_UART_Init+0x58>)
 800341a:	4a15      	ldr	r2, [pc, #84]	; (8003470 <MX_USART3_UART_Init+0x5c>)
 800341c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800341e:	4b13      	ldr	r3, [pc, #76]	; (800346c <MX_USART3_UART_Init+0x58>)
 8003420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003424:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003426:	4b11      	ldr	r3, [pc, #68]	; (800346c <MX_USART3_UART_Init+0x58>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <MX_USART3_UART_Init+0x58>)
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003432:	4b0e      	ldr	r3, [pc, #56]	; (800346c <MX_USART3_UART_Init+0x58>)
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <MX_USART3_UART_Init+0x58>)
 800343a:	220c      	movs	r2, #12
 800343c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <MX_USART3_UART_Init+0x58>)
 8003440:	2200      	movs	r2, #0
 8003442:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <MX_USART3_UART_Init+0x58>)
 8003446:	2200      	movs	r2, #0
 8003448:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <MX_USART3_UART_Init+0x58>)
 800344c:	2200      	movs	r2, #0
 800344e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003450:	4b06      	ldr	r3, [pc, #24]	; (800346c <MX_USART3_UART_Init+0x58>)
 8003452:	2200      	movs	r2, #0
 8003454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003456:	4805      	ldr	r0, [pc, #20]	; (800346c <MX_USART3_UART_Init+0x58>)
 8003458:	f005 fa84 	bl	8008964 <HAL_UART_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003462:	f000 f911 	bl	8003688 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000238 	.word	0x20000238
 8003470:	40004800 	.word	0x40004800

08003474 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003478:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <MX_USB_PCD_Init+0x3c>)
 800347a:	4a0e      	ldr	r2, [pc, #56]	; (80034b4 <MX_USB_PCD_Init+0x40>)
 800347c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800347e:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <MX_USB_PCD_Init+0x3c>)
 8003480:	2208      	movs	r2, #8
 8003482:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <MX_USB_PCD_Init+0x3c>)
 8003486:	2202      	movs	r2, #2
 8003488:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800348a:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <MX_USB_PCD_Init+0x3c>)
 800348c:	2202      	movs	r2, #2
 800348e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003490:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <MX_USB_PCD_Init+0x3c>)
 8003492:	2200      	movs	r2, #0
 8003494:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <MX_USB_PCD_Init+0x3c>)
 8003498:	2200      	movs	r2, #0
 800349a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800349c:	4804      	ldr	r0, [pc, #16]	; (80034b0 <MX_USB_PCD_Init+0x3c>)
 800349e:	f002 f976 	bl	800578e <HAL_PCD_Init>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80034a8:	f000 f8ee 	bl	8003688 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80034ac:	bf00      	nop
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	200002c0 	.word	0x200002c0
 80034b4:	40005c00 	.word	0x40005c00

080034b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08c      	sub	sp, #48	; 0x30
 80034bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034be:	f107 031c 	add.w	r3, r7, #28
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	609a      	str	r2, [r3, #8]
 80034ca:	60da      	str	r2, [r3, #12]
 80034cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034ce:	4b6a      	ldr	r3, [pc, #424]	; (8003678 <MX_GPIO_Init+0x1c0>)
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	4a69      	ldr	r2, [pc, #420]	; (8003678 <MX_GPIO_Init+0x1c0>)
 80034d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034d8:	6153      	str	r3, [r2, #20]
 80034da:	4b67      	ldr	r3, [pc, #412]	; (8003678 <MX_GPIO_Init+0x1c0>)
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034e6:	4b64      	ldr	r3, [pc, #400]	; (8003678 <MX_GPIO_Init+0x1c0>)
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	4a63      	ldr	r2, [pc, #396]	; (8003678 <MX_GPIO_Init+0x1c0>)
 80034ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034f0:	6153      	str	r3, [r2, #20]
 80034f2:	4b61      	ldr	r3, [pc, #388]	; (8003678 <MX_GPIO_Init+0x1c0>)
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034fe:	4b5e      	ldr	r3, [pc, #376]	; (8003678 <MX_GPIO_Init+0x1c0>)
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	4a5d      	ldr	r2, [pc, #372]	; (8003678 <MX_GPIO_Init+0x1c0>)
 8003504:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003508:	6153      	str	r3, [r2, #20]
 800350a:	4b5b      	ldr	r3, [pc, #364]	; (8003678 <MX_GPIO_Init+0x1c0>)
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003516:	4b58      	ldr	r3, [pc, #352]	; (8003678 <MX_GPIO_Init+0x1c0>)
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	4a57      	ldr	r2, [pc, #348]	; (8003678 <MX_GPIO_Init+0x1c0>)
 800351c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003520:	6153      	str	r3, [r2, #20]
 8003522:	4b55      	ldr	r3, [pc, #340]	; (8003678 <MX_GPIO_Init+0x1c0>)
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800352e:	4b52      	ldr	r3, [pc, #328]	; (8003678 <MX_GPIO_Init+0x1c0>)
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	4a51      	ldr	r2, [pc, #324]	; (8003678 <MX_GPIO_Init+0x1c0>)
 8003534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003538:	6153      	str	r3, [r2, #20]
 800353a:	4b4f      	ldr	r3, [pc, #316]	; (8003678 <MX_GPIO_Init+0x1c0>)
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003546:	4b4c      	ldr	r3, [pc, #304]	; (8003678 <MX_GPIO_Init+0x1c0>)
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	4a4b      	ldr	r2, [pc, #300]	; (8003678 <MX_GPIO_Init+0x1c0>)
 800354c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003550:	6153      	str	r3, [r2, #20]
 8003552:	4b49      	ldr	r3, [pc, #292]	; (8003678 <MX_GPIO_Init+0x1c0>)
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800355e:	2200      	movs	r2, #0
 8003560:	f64f 7108 	movw	r1, #65288	; 0xff08
 8003564:	4845      	ldr	r0, [pc, #276]	; (800367c <MX_GPIO_Init+0x1c4>)
 8003566:	f001 ff97 	bl	8005498 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800356a:	2200      	movs	r2, #0
 800356c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003570:	4843      	ldr	r0, [pc, #268]	; (8003680 <MX_GPIO_Init+0x1c8>)
 8003572:	f001 ff91 	bl	8005498 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003576:	2200      	movs	r2, #0
 8003578:	21f0      	movs	r1, #240	; 0xf0
 800357a:	4842      	ldr	r0, [pc, #264]	; (8003684 <MX_GPIO_Init+0x1cc>)
 800357c:	f001 ff8c 	bl	8005498 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8003580:	f64f 7308 	movw	r3, #65288	; 0xff08
 8003584:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003586:	2301      	movs	r3, #1
 8003588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358e:	2300      	movs	r3, #0
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003592:	f107 031c 	add.w	r3, r7, #28
 8003596:	4619      	mov	r1, r3
 8003598:	4838      	ldr	r0, [pc, #224]	; (800367c <MX_GPIO_Init+0x1c4>)
 800359a:	f001 fdeb 	bl	8005174 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin;
 800359e:	2330      	movs	r3, #48	; 0x30
 80035a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80035a2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80035a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035ac:	f107 031c 	add.w	r3, r7, #28
 80035b0:	4619      	mov	r1, r3
 80035b2:	4832      	ldr	r0, [pc, #200]	; (800367c <MX_GPIO_Init+0x1c4>)
 80035b4:	f001 fdde 	bl	8005174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80035b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80035bc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035be:	2301      	movs	r3, #1
 80035c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c6:	2300      	movs	r3, #0
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ca:	f107 031c 	add.w	r3, r7, #28
 80035ce:	4619      	mov	r1, r3
 80035d0:	482b      	ldr	r0, [pc, #172]	; (8003680 <MX_GPIO_Init+0x1c8>)
 80035d2:	f001 fdcf 	bl	8005174 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80035d6:	2301      	movs	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035da:	2300      	movs	r3, #0
 80035dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80035e2:	f107 031c 	add.w	r3, r7, #28
 80035e6:	4619      	mov	r1, r3
 80035e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ec:	f001 fdc2 	bl	8005174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80035f0:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80035f4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035fe:	f107 031c 	add.w	r3, r7, #28
 8003602:	4619      	mov	r1, r3
 8003604:	481f      	ldr	r0, [pc, #124]	; (8003684 <MX_GPIO_Init+0x1cc>)
 8003606:	f001 fdb5 	bl	8005174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800360a:	2307      	movs	r3, #7
 800360c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800360e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003614:	2302      	movs	r3, #2
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003618:	f107 031c 	add.w	r3, r7, #28
 800361c:	4619      	mov	r1, r3
 800361e:	4819      	ldr	r0, [pc, #100]	; (8003684 <MX_GPIO_Init+0x1cc>)
 8003620:	f001 fda8 	bl	8005174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003624:	23f0      	movs	r3, #240	; 0xf0
 8003626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003628:	2301      	movs	r3, #1
 800362a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003630:	2300      	movs	r3, #0
 8003632:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003634:	f107 031c 	add.w	r3, r7, #28
 8003638:	4619      	mov	r1, r3
 800363a:	4812      	ldr	r0, [pc, #72]	; (8003684 <MX_GPIO_Init+0x1cc>)
 800363c:	f001 fd9a 	bl	8005174 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8003640:	2200      	movs	r2, #0
 8003642:	2101      	movs	r1, #1
 8003644:	2006      	movs	r0, #6
 8003646:	f001 fd5e 	bl	8005106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800364a:	2006      	movs	r0, #6
 800364c:	f001 fd77 	bl	800513e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8003650:	2200      	movs	r2, #0
 8003652:	2101      	movs	r1, #1
 8003654:	2007      	movs	r0, #7
 8003656:	f001 fd56 	bl	8005106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800365a:	2007      	movs	r0, #7
 800365c:	f001 fd6f 	bl	800513e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 1, 0);
 8003660:	2200      	movs	r2, #0
 8003662:	2101      	movs	r1, #1
 8003664:	2008      	movs	r0, #8
 8003666:	f001 fd4e 	bl	8005106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 800366a:	2008      	movs	r0, #8
 800366c:	f001 fd67 	bl	800513e <HAL_NVIC_EnableIRQ>

}
 8003670:	bf00      	nop
 8003672:	3730      	adds	r7, #48	; 0x30
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40021000 	.word	0x40021000
 800367c:	48001000 	.word	0x48001000
 8003680:	48000800 	.word	0x48000800
 8003684:	48000c00 	.word	0x48000c00

08003688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800368c:	b672      	cpsid	i
}
 800368e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003690:	e7fe      	b.n	8003690 <Error_Handler+0x8>
	...

08003694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <HAL_MspInit+0x44>)
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	4a0e      	ldr	r2, [pc, #56]	; (80036d8 <HAL_MspInit+0x44>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6193      	str	r3, [r2, #24]
 80036a6:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <HAL_MspInit+0x44>)
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	607b      	str	r3, [r7, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036b2:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_MspInit+0x44>)
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <HAL_MspInit+0x44>)
 80036b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036bc:	61d3      	str	r3, [r2, #28]
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <HAL_MspInit+0x44>)
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80036ca:	2005      	movs	r0, #5
 80036cc:	f001 fd10 	bl	80050f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	; 0x28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	f107 0314 	add.w	r3, r7, #20
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a17      	ldr	r2, [pc, #92]	; (8003758 <HAL_I2C_MspInit+0x7c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d127      	bne.n	800374e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fe:	4b17      	ldr	r3, [pc, #92]	; (800375c <HAL_I2C_MspInit+0x80>)
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	4a16      	ldr	r2, [pc, #88]	; (800375c <HAL_I2C_MspInit+0x80>)
 8003704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003708:	6153      	str	r3, [r2, #20]
 800370a:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_I2C_MspInit+0x80>)
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8003716:	23c0      	movs	r3, #192	; 0xc0
 8003718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800371a:	2312      	movs	r3, #18
 800371c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800371e:	2301      	movs	r3, #1
 8003720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003722:	2303      	movs	r3, #3
 8003724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003726:	2304      	movs	r3, #4
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372a:	f107 0314 	add.w	r3, r7, #20
 800372e:	4619      	mov	r1, r3
 8003730:	480b      	ldr	r0, [pc, #44]	; (8003760 <HAL_I2C_MspInit+0x84>)
 8003732:	f001 fd1f 	bl	8005174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_I2C_MspInit+0x80>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	4a08      	ldr	r2, [pc, #32]	; (800375c <HAL_I2C_MspInit+0x80>)
 800373c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003740:	61d3      	str	r3, [r2, #28]
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_I2C_MspInit+0x80>)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800374e:	bf00      	nop
 8003750:	3728      	adds	r7, #40	; 0x28
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40005400 	.word	0x40005400
 800375c:	40021000 	.word	0x40021000
 8003760:	48000400 	.word	0x48000400

08003764 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0d      	ldr	r2, [pc, #52]	; (80037a8 <HAL_RTC_MspInit+0x44>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d111      	bne.n	800379a <HAL_RTC_MspInit+0x36>
 8003776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800377a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003784:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <HAL_RTC_MspInit+0x48>)
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	461a      	mov	r2, r3
 8003796:	2301      	movs	r3, #1
 8003798:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40002800 	.word	0x40002800
 80037ac:	10908100 	.word	0x10908100

080037b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a17      	ldr	r2, [pc, #92]	; (800382c <HAL_SPI_MspInit+0x7c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d128      	bne.n	8003824 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037d2:	4b17      	ldr	r3, [pc, #92]	; (8003830 <HAL_SPI_MspInit+0x80>)
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	4a16      	ldr	r2, [pc, #88]	; (8003830 <HAL_SPI_MspInit+0x80>)
 80037d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037dc:	6193      	str	r3, [r2, #24]
 80037de:	4b14      	ldr	r3, [pc, #80]	; (8003830 <HAL_SPI_MspInit+0x80>)
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ea:	4b11      	ldr	r3, [pc, #68]	; (8003830 <HAL_SPI_MspInit+0x80>)
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	4a10      	ldr	r2, [pc, #64]	; (8003830 <HAL_SPI_MspInit+0x80>)
 80037f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f4:	6153      	str	r3, [r2, #20]
 80037f6:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <HAL_SPI_MspInit+0x80>)
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8003802:	23e0      	movs	r3, #224	; 0xe0
 8003804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003806:	2302      	movs	r3, #2
 8003808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800380e:	2303      	movs	r3, #3
 8003810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003812:	2305      	movs	r3, #5
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003816:	f107 0314 	add.w	r3, r7, #20
 800381a:	4619      	mov	r1, r3
 800381c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003820:	f001 fca8 	bl	8005174 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003824:	bf00      	nop
 8003826:	3728      	adds	r7, #40	; 0x28
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40013000 	.word	0x40013000
 8003830:	40021000 	.word	0x40021000

08003834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003844:	d10b      	bne.n	800385e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_TIM_Base_MspInit+0x38>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	4a08      	ldr	r2, [pc, #32]	; (800386c <HAL_TIM_Base_MspInit+0x38>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	61d3      	str	r3, [r2, #28]
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_TIM_Base_MspInit+0x38>)
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800385e:	bf00      	nop
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000

08003870 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003878:	f107 030c 	add.w	r3, r7, #12
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003890:	d11c      	bne.n	80038cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_TIM_MspPostInit+0x64>)
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	4a0f      	ldr	r2, [pc, #60]	; (80038d4 <HAL_TIM_MspPostInit+0x64>)
 8003898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389c:	6153      	str	r3, [r2, #20]
 800389e:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <HAL_TIM_MspPostInit+0x64>)
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80038aa:	2302      	movs	r3, #2
 80038ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ae:	2302      	movs	r3, #2
 80038b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038ba:	2301      	movs	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038be:	f107 030c 	add.w	r3, r7, #12
 80038c2:	4619      	mov	r1, r3
 80038c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038c8:	f001 fc54 	bl	8005174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80038cc:	bf00      	nop
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021000 	.word	0x40021000

080038d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	; 0x28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e0:	f107 0314 	add.w	r3, r7, #20
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	60da      	str	r2, [r3, #12]
 80038ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a17      	ldr	r2, [pc, #92]	; (8003954 <HAL_UART_MspInit+0x7c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d128      	bne.n	800394c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80038fa:	4b17      	ldr	r3, [pc, #92]	; (8003958 <HAL_UART_MspInit+0x80>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	4a16      	ldr	r2, [pc, #88]	; (8003958 <HAL_UART_MspInit+0x80>)
 8003900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003904:	61d3      	str	r3, [r2, #28]
 8003906:	4b14      	ldr	r3, [pc, #80]	; (8003958 <HAL_UART_MspInit+0x80>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <HAL_UART_MspInit+0x80>)
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	4a10      	ldr	r2, [pc, #64]	; (8003958 <HAL_UART_MspInit+0x80>)
 8003918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800391c:	6153      	str	r3, [r2, #20]
 800391e:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <HAL_UART_MspInit+0x80>)
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800392a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800392e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003930:	2302      	movs	r3, #2
 8003932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003934:	2300      	movs	r3, #0
 8003936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003938:	2303      	movs	r3, #3
 800393a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800393c:	2307      	movs	r3, #7
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	4619      	mov	r1, r3
 8003946:	4805      	ldr	r0, [pc, #20]	; (800395c <HAL_UART_MspInit+0x84>)
 8003948:	f001 fc14 	bl	8005174 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800394c:	bf00      	nop
 800394e:	3728      	adds	r7, #40	; 0x28
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40004800 	.word	0x40004800
 8003958:	40021000 	.word	0x40021000
 800395c:	48000400 	.word	0x48000400

08003960 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b08a      	sub	sp, #40	; 0x28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a18      	ldr	r2, [pc, #96]	; (80039e0 <HAL_PCD_MspInit+0x80>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d129      	bne.n	80039d6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <HAL_PCD_MspInit+0x84>)
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	4a17      	ldr	r2, [pc, #92]	; (80039e4 <HAL_PCD_MspInit+0x84>)
 8003988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800398c:	6153      	str	r3, [r2, #20]
 800398e:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <HAL_PCD_MspInit+0x84>)
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800399a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800399e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a0:	2302      	movs	r3, #2
 80039a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039a8:	2303      	movs	r3, #3
 80039aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80039ac:	230e      	movs	r3, #14
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	4619      	mov	r1, r3
 80039b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ba:	f001 fbdb 	bl	8005174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <HAL_PCD_MspInit+0x84>)
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <HAL_PCD_MspInit+0x84>)
 80039c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039c8:	61d3      	str	r3, [r2, #28]
 80039ca:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <HAL_PCD_MspInit+0x84>)
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80039d6:	bf00      	nop
 80039d8:	3728      	adds	r7, #40	; 0x28
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40005c00 	.word	0x40005c00
 80039e4:	40021000 	.word	0x40021000

080039e8 <On_First7segment>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern point;
extern minute;
 void On_First7segment(){
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  	   	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,0);
 80039ec:	2200      	movs	r2, #0
 80039ee:	2180      	movs	r1, #128	; 0x80
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <On_First7segment+0x14>)
 80039f2:	f001 fd51 	bl	8005498 <HAL_GPIO_WritePin>
  	   }
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	48000800 	.word	0x48000800

08003a00 <On_Second7segment>:
  	   void On_Second7segment(){
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  	   	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,0);}
 8003a04:	2200      	movs	r2, #0
 8003a06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a0a:	4802      	ldr	r0, [pc, #8]	; (8003a14 <On_Second7segment+0x14>)
 8003a0c:	f001 fd44 	bl	8005498 <HAL_GPIO_WritePin>
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	48000800 	.word	0x48000800

08003a18 <On_Third7segment>:
  	   void On_Third7segment(){
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  	   	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,0);
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a22:	4802      	ldr	r0, [pc, #8]	; (8003a2c <On_Third7segment+0x14>)
 8003a24:	f001 fd38 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  }
 8003a28:	bf00      	nop
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	48000800 	.word	0x48000800

08003a30 <On_Forth7segment>:

  	   void On_Forth7segment(){
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  	   	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,0);
 8003a34:	2200      	movs	r2, #0
 8003a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a3a:	4802      	ldr	r0, [pc, #8]	; (8003a44 <On_Forth7segment+0x14>)
 8003a3c:	f001 fd2c 	bl	8005498 <HAL_GPIO_WritePin>
  	   }
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	48000800 	.word	0x48000800

08003a48 <Off_First7segment>:
  	   void Off_First7segment(){
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
   	   	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,1);
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	2180      	movs	r1, #128	; 0x80
 8003a50:	4813      	ldr	r0, [pc, #76]	; (8003aa0 <Off_First7segment+0x58>)
 8003a52:	f001 fd21 	bl	8005498 <HAL_GPIO_WritePin>
  	   	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,0);
 8003a56:	2200      	movs	r2, #0
 8003a58:	2101      	movs	r1, #1
 8003a5a:	4811      	ldr	r0, [pc, #68]	; (8003aa0 <Off_First7segment+0x58>)
 8003a5c:	f001 fd1c 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
 8003a60:	2200      	movs	r2, #0
 8003a62:	2102      	movs	r1, #2
 8003a64:	480e      	ldr	r0, [pc, #56]	; (8003aa0 <Off_First7segment+0x58>)
 8003a66:	f001 fd17 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,0);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2104      	movs	r1, #4
 8003a6e:	480c      	ldr	r0, [pc, #48]	; (8003aa0 <Off_First7segment+0x58>)
 8003a70:	f001 fd12 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,0);
 8003a74:	2200      	movs	r2, #0
 8003a76:	2108      	movs	r1, #8
 8003a78:	4809      	ldr	r0, [pc, #36]	; (8003aa0 <Off_First7segment+0x58>)
 8003a7a:	f001 fd0d 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,0);
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2110      	movs	r1, #16
 8003a82:	4807      	ldr	r0, [pc, #28]	; (8003aa0 <Off_First7segment+0x58>)
 8003a84:	f001 fd08 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,0);
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2120      	movs	r1, #32
 8003a8c:	4804      	ldr	r0, [pc, #16]	; (8003aa0 <Off_First7segment+0x58>)
 8003a8e:	f001 fd03 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0);
 8003a92:	2200      	movs	r2, #0
 8003a94:	2140      	movs	r1, #64	; 0x40
 8003a96:	4802      	ldr	r0, [pc, #8]	; (8003aa0 <Off_First7segment+0x58>)
 8003a98:	f001 fcfe 	bl	8005498 <HAL_GPIO_WritePin>
  	   }
 8003a9c:	bf00      	nop
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	48000800 	.word	0x48000800

08003aa4 <Off_Second7segment>:
  	   void Off_Second7segment(){
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  	   	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,1);
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003aae:	4814      	ldr	r0, [pc, #80]	; (8003b00 <Off_Second7segment+0x5c>)
 8003ab0:	f001 fcf2 	bl	8005498 <HAL_GPIO_WritePin>
  	   	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,0);
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	4811      	ldr	r0, [pc, #68]	; (8003b00 <Off_Second7segment+0x5c>)
 8003aba:	f001 fced 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	480f      	ldr	r0, [pc, #60]	; (8003b00 <Off_Second7segment+0x5c>)
 8003ac4:	f001 fce8 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,0);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2104      	movs	r1, #4
 8003acc:	480c      	ldr	r0, [pc, #48]	; (8003b00 <Off_Second7segment+0x5c>)
 8003ace:	f001 fce3 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,0);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2108      	movs	r1, #8
 8003ad6:	480a      	ldr	r0, [pc, #40]	; (8003b00 <Off_Second7segment+0x5c>)
 8003ad8:	f001 fcde 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,0);
 8003adc:	2200      	movs	r2, #0
 8003ade:	2110      	movs	r1, #16
 8003ae0:	4807      	ldr	r0, [pc, #28]	; (8003b00 <Off_Second7segment+0x5c>)
 8003ae2:	f001 fcd9 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,0);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2120      	movs	r1, #32
 8003aea:	4805      	ldr	r0, [pc, #20]	; (8003b00 <Off_Second7segment+0x5c>)
 8003aec:	f001 fcd4 	bl	8005498 <HAL_GPIO_WritePin>
  	   		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0);}
 8003af0:	2200      	movs	r2, #0
 8003af2:	2140      	movs	r1, #64	; 0x40
 8003af4:	4802      	ldr	r0, [pc, #8]	; (8003b00 <Off_Second7segment+0x5c>)
 8003af6:	f001 fccf 	bl	8005498 <HAL_GPIO_WritePin>
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	48000800 	.word	0x48000800

08003b04 <Off_Third7segment>:
  	   void Off_Third7segment(){
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  	   	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,1);
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b0e:	4814      	ldr	r0, [pc, #80]	; (8003b60 <Off_Third7segment+0x5c>)
 8003b10:	f001 fcc2 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,0);
 8003b14:	2200      	movs	r2, #0
 8003b16:	2101      	movs	r1, #1
 8003b18:	4811      	ldr	r0, [pc, #68]	; (8003b60 <Off_Third7segment+0x5c>)
 8003b1a:	f001 fcbd 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2102      	movs	r1, #2
 8003b22:	480f      	ldr	r0, [pc, #60]	; (8003b60 <Off_Third7segment+0x5c>)
 8003b24:	f001 fcb8 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  		   		  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,0);
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2104      	movs	r1, #4
 8003b2c:	480c      	ldr	r0, [pc, #48]	; (8003b60 <Off_Third7segment+0x5c>)
 8003b2e:	f001 fcb3 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,0);
 8003b32:	2200      	movs	r2, #0
 8003b34:	2108      	movs	r1, #8
 8003b36:	480a      	ldr	r0, [pc, #40]	; (8003b60 <Off_Third7segment+0x5c>)
 8003b38:	f001 fcae 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,0);
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2110      	movs	r1, #16
 8003b40:	4807      	ldr	r0, [pc, #28]	; (8003b60 <Off_Third7segment+0x5c>)
 8003b42:	f001 fca9 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	2120      	movs	r1, #32
 8003b4a:	4805      	ldr	r0, [pc, #20]	; (8003b60 <Off_Third7segment+0x5c>)
 8003b4c:	f001 fca4 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  		   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0);
 8003b50:	2200      	movs	r2, #0
 8003b52:	2140      	movs	r1, #64	; 0x40
 8003b54:	4802      	ldr	r0, [pc, #8]	; (8003b60 <Off_Third7segment+0x5c>)
 8003b56:	f001 fc9f 	bl	8005498 <HAL_GPIO_WritePin>
  	   	  }
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	48000800 	.word	0x48000800

08003b64 <Off_Forth7segment>:

  	   void Off_Forth7segment(){
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  	   	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,1);
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b6e:	4814      	ldr	r0, [pc, #80]	; (8003bc0 <Off_Forth7segment+0x5c>)
 8003b70:	f001 fc92 	bl	8005498 <HAL_GPIO_WritePin>

  	   	 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,0);
 8003b74:	2200      	movs	r2, #0
 8003b76:	2101      	movs	r1, #1
 8003b78:	4811      	ldr	r0, [pc, #68]	; (8003bc0 <Off_Forth7segment+0x5c>)
 8003b7a:	f001 fc8d 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,0);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2102      	movs	r1, #2
 8003b82:	480f      	ldr	r0, [pc, #60]	; (8003bc0 <Off_Forth7segment+0x5c>)
 8003b84:	f001 fc88 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,0);
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2104      	movs	r1, #4
 8003b8c:	480c      	ldr	r0, [pc, #48]	; (8003bc0 <Off_Forth7segment+0x5c>)
 8003b8e:	f001 fc83 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,0);
 8003b92:	2200      	movs	r2, #0
 8003b94:	2108      	movs	r1, #8
 8003b96:	480a      	ldr	r0, [pc, #40]	; (8003bc0 <Off_Forth7segment+0x5c>)
 8003b98:	f001 fc7e 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,0);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2110      	movs	r1, #16
 8003ba0:	4807      	ldr	r0, [pc, #28]	; (8003bc0 <Off_Forth7segment+0x5c>)
 8003ba2:	f001 fc79 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,0);
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2120      	movs	r1, #32
 8003baa:	4805      	ldr	r0, [pc, #20]	; (8003bc0 <Off_Forth7segment+0x5c>)
 8003bac:	f001 fc74 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,0);
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2140      	movs	r1, #64	; 0x40
 8003bb4:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <Off_Forth7segment+0x5c>)
 8003bb6:	f001 fc6f 	bl	8005498 <HAL_GPIO_WritePin>
  	   }
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	48000800 	.word	0x48000800

08003bc4 <Number>:
  	  void Number (int number){
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  	  	  if(number==0){
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d11d      	bne.n	8003c0e <Number+0x4a>
  	  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	4889      	ldr	r0, [pc, #548]	; (8003dfc <Number+0x238>)
 8003bd8:	f001 fc5e 	bl	8005498 <HAL_GPIO_WritePin>
  	  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8003bdc:	2201      	movs	r2, #1
 8003bde:	2102      	movs	r1, #2
 8003be0:	4886      	ldr	r0, [pc, #536]	; (8003dfc <Number+0x238>)
 8003be2:	f001 fc59 	bl	8005498 <HAL_GPIO_WritePin>
  	  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8003be6:	2201      	movs	r2, #1
 8003be8:	2104      	movs	r1, #4
 8003bea:	4884      	ldr	r0, [pc, #528]	; (8003dfc <Number+0x238>)
 8003bec:	f001 fc54 	bl	8005498 <HAL_GPIO_WritePin>
  	  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	2108      	movs	r1, #8
 8003bf4:	4881      	ldr	r0, [pc, #516]	; (8003dfc <Number+0x238>)
 8003bf6:	f001 fc4f 	bl	8005498 <HAL_GPIO_WritePin>
  	  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,1);
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	2110      	movs	r1, #16
 8003bfe:	487f      	ldr	r0, [pc, #508]	; (8003dfc <Number+0x238>)
 8003c00:	f001 fc4a 	bl	8005498 <HAL_GPIO_WritePin>
  	  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8003c04:	2201      	movs	r2, #1
 8003c06:	2120      	movs	r1, #32
 8003c08:	487c      	ldr	r0, [pc, #496]	; (8003dfc <Number+0x238>)
 8003c0a:	f001 fc45 	bl	8005498 <HAL_GPIO_WritePin>

  	  	  }

  	  	  if(number==1){
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d109      	bne.n	8003c28 <Number+0x64>
  	  		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8003c14:	2201      	movs	r2, #1
 8003c16:	2102      	movs	r1, #2
 8003c18:	4878      	ldr	r0, [pc, #480]	; (8003dfc <Number+0x238>)
 8003c1a:	f001 fc3d 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8003c1e:	2201      	movs	r2, #1
 8003c20:	2104      	movs	r1, #4
 8003c22:	4876      	ldr	r0, [pc, #472]	; (8003dfc <Number+0x238>)
 8003c24:	f001 fc38 	bl	8005498 <HAL_GPIO_WritePin>

  	  	  }
  	  	  if(number==2){
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d118      	bne.n	8003c60 <Number+0x9c>
  	  		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8003c2e:	2201      	movs	r2, #1
 8003c30:	2101      	movs	r1, #1
 8003c32:	4872      	ldr	r0, [pc, #456]	; (8003dfc <Number+0x238>)
 8003c34:	f001 fc30 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8003c38:	2201      	movs	r2, #1
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	486f      	ldr	r0, [pc, #444]	; (8003dfc <Number+0x238>)
 8003c3e:	f001 fc2b 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8003c42:	2201      	movs	r2, #1
 8003c44:	2108      	movs	r1, #8
 8003c46:	486d      	ldr	r0, [pc, #436]	; (8003dfc <Number+0x238>)
 8003c48:	f001 fc26 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,1);
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	2110      	movs	r1, #16
 8003c50:	486a      	ldr	r0, [pc, #424]	; (8003dfc <Number+0x238>)
 8003c52:	f001 fc21 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 8003c56:	2201      	movs	r2, #1
 8003c58:	2140      	movs	r1, #64	; 0x40
 8003c5a:	4868      	ldr	r0, [pc, #416]	; (8003dfc <Number+0x238>)
 8003c5c:	f001 fc1c 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  }
  	  	  if(number==3){
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d118      	bne.n	8003c98 <Number+0xd4>
  	  		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8003c66:	2201      	movs	r2, #1
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4864      	ldr	r0, [pc, #400]	; (8003dfc <Number+0x238>)
 8003c6c:	f001 fc14 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8003c70:	2201      	movs	r2, #1
 8003c72:	2102      	movs	r1, #2
 8003c74:	4861      	ldr	r0, [pc, #388]	; (8003dfc <Number+0x238>)
 8003c76:	f001 fc0f 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	2104      	movs	r1, #4
 8003c7e:	485f      	ldr	r0, [pc, #380]	; (8003dfc <Number+0x238>)
 8003c80:	f001 fc0a 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8003c84:	2201      	movs	r2, #1
 8003c86:	2108      	movs	r1, #8
 8003c88:	485c      	ldr	r0, [pc, #368]	; (8003dfc <Number+0x238>)
 8003c8a:	f001 fc05 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 8003c8e:	2201      	movs	r2, #1
 8003c90:	2140      	movs	r1, #64	; 0x40
 8003c92:	485a      	ldr	r0, [pc, #360]	; (8003dfc <Number+0x238>)
 8003c94:	f001 fc00 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  }
  	  	  if(number==4){
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d113      	bne.n	8003cc6 <Number+0x102>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	2102      	movs	r1, #2
 8003ca2:	4856      	ldr	r0, [pc, #344]	; (8003dfc <Number+0x238>)
 8003ca4:	f001 fbf8 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8003ca8:	2201      	movs	r2, #1
 8003caa:	2104      	movs	r1, #4
 8003cac:	4853      	ldr	r0, [pc, #332]	; (8003dfc <Number+0x238>)
 8003cae:	f001 fbf3 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	2120      	movs	r1, #32
 8003cb6:	4851      	ldr	r0, [pc, #324]	; (8003dfc <Number+0x238>)
 8003cb8:	f001 fbee 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	2140      	movs	r1, #64	; 0x40
 8003cc0:	484e      	ldr	r0, [pc, #312]	; (8003dfc <Number+0x238>)
 8003cc2:	f001 fbe9 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  }
  	  	  if(number==5){
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b05      	cmp	r3, #5
 8003cca:	d118      	bne.n	8003cfe <Number+0x13a>
  	  		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8003ccc:	2201      	movs	r2, #1
 8003cce:	2101      	movs	r1, #1
 8003cd0:	484a      	ldr	r0, [pc, #296]	; (8003dfc <Number+0x238>)
 8003cd2:	f001 fbe1 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	2104      	movs	r1, #4
 8003cda:	4848      	ldr	r0, [pc, #288]	; (8003dfc <Number+0x238>)
 8003cdc:	f001 fbdc 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	2108      	movs	r1, #8
 8003ce4:	4845      	ldr	r0, [pc, #276]	; (8003dfc <Number+0x238>)
 8003ce6:	f001 fbd7 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8003cea:	2201      	movs	r2, #1
 8003cec:	2120      	movs	r1, #32
 8003cee:	4843      	ldr	r0, [pc, #268]	; (8003dfc <Number+0x238>)
 8003cf0:	f001 fbd2 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	2140      	movs	r1, #64	; 0x40
 8003cf8:	4840      	ldr	r0, [pc, #256]	; (8003dfc <Number+0x238>)
 8003cfa:	f001 fbcd 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  }
  	  	  if(number==6){
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b06      	cmp	r3, #6
 8003d02:	d11d      	bne.n	8003d40 <Number+0x17c>
  	  		                  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8003d04:	2201      	movs	r2, #1
 8003d06:	2101      	movs	r1, #1
 8003d08:	483c      	ldr	r0, [pc, #240]	; (8003dfc <Number+0x238>)
 8003d0a:	f001 fbc5 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8003d0e:	2201      	movs	r2, #1
 8003d10:	2104      	movs	r1, #4
 8003d12:	483a      	ldr	r0, [pc, #232]	; (8003dfc <Number+0x238>)
 8003d14:	f001 fbc0 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8003d18:	2201      	movs	r2, #1
 8003d1a:	2108      	movs	r1, #8
 8003d1c:	4837      	ldr	r0, [pc, #220]	; (8003dfc <Number+0x238>)
 8003d1e:	f001 fbbb 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,1);
 8003d22:	2201      	movs	r2, #1
 8003d24:	2110      	movs	r1, #16
 8003d26:	4835      	ldr	r0, [pc, #212]	; (8003dfc <Number+0x238>)
 8003d28:	f001 fbb6 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	2120      	movs	r1, #32
 8003d30:	4832      	ldr	r0, [pc, #200]	; (8003dfc <Number+0x238>)
 8003d32:	f001 fbb1 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 8003d36:	2201      	movs	r2, #1
 8003d38:	2140      	movs	r1, #64	; 0x40
 8003d3a:	4830      	ldr	r0, [pc, #192]	; (8003dfc <Number+0x238>)
 8003d3c:	f001 fbac 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  }
  	  	  if(number==7){
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b07      	cmp	r3, #7
 8003d44:	d10e      	bne.n	8003d64 <Number+0x1a0>
  	  		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8003d46:	2201      	movs	r2, #1
 8003d48:	2101      	movs	r1, #1
 8003d4a:	482c      	ldr	r0, [pc, #176]	; (8003dfc <Number+0x238>)
 8003d4c:	f001 fba4 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8003d50:	2201      	movs	r2, #1
 8003d52:	2102      	movs	r1, #2
 8003d54:	4829      	ldr	r0, [pc, #164]	; (8003dfc <Number+0x238>)
 8003d56:	f001 fb9f 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	2104      	movs	r1, #4
 8003d5e:	4827      	ldr	r0, [pc, #156]	; (8003dfc <Number+0x238>)
 8003d60:	f001 fb9a 	bl	8005498 <HAL_GPIO_WritePin>

  	  	  }
  	  	  if(number==8){
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d122      	bne.n	8003db0 <Number+0x1ec>
  	  		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4823      	ldr	r0, [pc, #140]	; (8003dfc <Number+0x238>)
 8003d70:	f001 fb92 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8003d74:	2201      	movs	r2, #1
 8003d76:	2102      	movs	r1, #2
 8003d78:	4820      	ldr	r0, [pc, #128]	; (8003dfc <Number+0x238>)
 8003d7a:	f001 fb8d 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8003d7e:	2201      	movs	r2, #1
 8003d80:	2104      	movs	r1, #4
 8003d82:	481e      	ldr	r0, [pc, #120]	; (8003dfc <Number+0x238>)
 8003d84:	f001 fb88 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8003d88:	2201      	movs	r2, #1
 8003d8a:	2108      	movs	r1, #8
 8003d8c:	481b      	ldr	r0, [pc, #108]	; (8003dfc <Number+0x238>)
 8003d8e:	f001 fb83 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,1);
 8003d92:	2201      	movs	r2, #1
 8003d94:	2110      	movs	r1, #16
 8003d96:	4819      	ldr	r0, [pc, #100]	; (8003dfc <Number+0x238>)
 8003d98:	f001 fb7e 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	2120      	movs	r1, #32
 8003da0:	4816      	ldr	r0, [pc, #88]	; (8003dfc <Number+0x238>)
 8003da2:	f001 fb79 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 8003da6:	2201      	movs	r2, #1
 8003da8:	2140      	movs	r1, #64	; 0x40
 8003daa:	4814      	ldr	r0, [pc, #80]	; (8003dfc <Number+0x238>)
 8003dac:	f001 fb74 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  }
  	  	  if(number==9){
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b09      	cmp	r3, #9
 8003db4:	d11d      	bne.n	8003df2 <Number+0x22e>

  	  		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,1);
 8003db6:	2201      	movs	r2, #1
 8003db8:	2101      	movs	r1, #1
 8003dba:	4810      	ldr	r0, [pc, #64]	; (8003dfc <Number+0x238>)
 8003dbc:	f001 fb6c 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,1);
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	480d      	ldr	r0, [pc, #52]	; (8003dfc <Number+0x238>)
 8003dc6:	f001 fb67 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    	  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,1);
 8003dca:	2201      	movs	r2, #1
 8003dcc:	2104      	movs	r1, #4
 8003dce:	480b      	ldr	r0, [pc, #44]	; (8003dfc <Number+0x238>)
 8003dd0:	f001 fb62 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,1);
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	2108      	movs	r1, #8
 8003dd8:	4808      	ldr	r0, [pc, #32]	; (8003dfc <Number+0x238>)
 8003dda:	f001 fb5d 	bl	8005498 <HAL_GPIO_WritePin>
  	   		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,1);
 8003dde:	2201      	movs	r2, #1
 8003de0:	2120      	movs	r1, #32
 8003de2:	4806      	ldr	r0, [pc, #24]	; (8003dfc <Number+0x238>)
 8003de4:	f001 fb58 	bl	8005498 <HAL_GPIO_WritePin>
  	  		  	    		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,1);
 8003de8:	2201      	movs	r2, #1
 8003dea:	2140      	movs	r1, #64	; 0x40
 8003dec:	4803      	ldr	r0, [pc, #12]	; (8003dfc <Number+0x238>)
 8003dee:	f001 fb53 	bl	8005498 <HAL_GPIO_WritePin>
  	  	  }
  	    }
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	48000800 	.word	0x48000800

08003e00 <PWM_starts>:
uint32_t pwm_channels=TIM_CHANNEL_2;

//change this later
volatile uint16_t volume=0;

void PWM_starts(){
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(pwm_timers,pwm_channels);
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <PWM_starts+0x18>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a04      	ldr	r2, [pc, #16]	; (8003e1c <PWM_starts+0x1c>)
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f003 fe24 	bl	8007a5c <HAL_TIM_PWM_Start>

}
 8003e14:	bf00      	nop
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	2000005c 	.word	0x2000005c
 8003e1c:	20000060 	.word	0x20000060

08003e20 <PWM_Change_Tones>:

void PWM_Change_Tones(uint16_t pwm_freq,uint16_t volume){
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	460a      	mov	r2, r1
 8003e2a:	80fb      	strh	r3, [r7, #6]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	80bb      	strh	r3, [r7, #4]
	  TIM4->CCR2=10;
 8003e30:	4b58      	ldr	r3, [pc, #352]	; (8003f94 <PWM_Change_Tones+0x174>)
 8003e32:	220a      	movs	r2, #10
 8003e34:	639a      	str	r2, [r3, #56]	; 0x38
	  if(pwm_freq==0||pwm_freq>20000){
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <PWM_Change_Tones+0x26>
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d937      	bls.n	8003eb6 <PWM_Change_Tones+0x96>


		  __HAL_TIM_SET_COMPARE(pwm_timers,pwm_channels,0);
 8003e46:	4b54      	ldr	r3, [pc, #336]	; (8003f98 <PWM_Change_Tones+0x178>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d105      	bne.n	8003e5a <PWM_Change_Tones+0x3a>
 8003e4e:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <PWM_Change_Tones+0x17c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2200      	movs	r2, #0
 8003e56:	635a      	str	r2, [r3, #52]	; 0x34
 8003e58:	e097      	b.n	8003f8a <PWM_Change_Tones+0x16a>
 8003e5a:	4b4f      	ldr	r3, [pc, #316]	; (8003f98 <PWM_Change_Tones+0x178>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d105      	bne.n	8003e6e <PWM_Change_Tones+0x4e>
 8003e62:	4b4e      	ldr	r3, [pc, #312]	; (8003f9c <PWM_Change_Tones+0x17c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	6393      	str	r3, [r2, #56]	; 0x38
 8003e6c:	e08d      	b.n	8003f8a <PWM_Change_Tones+0x16a>
 8003e6e:	4b4a      	ldr	r3, [pc, #296]	; (8003f98 <PWM_Change_Tones+0x178>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d105      	bne.n	8003e82 <PWM_Change_Tones+0x62>
 8003e76:	4b49      	ldr	r3, [pc, #292]	; (8003f9c <PWM_Change_Tones+0x17c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003e80:	e083      	b.n	8003f8a <PWM_Change_Tones+0x16a>
 8003e82:	4b45      	ldr	r3, [pc, #276]	; (8003f98 <PWM_Change_Tones+0x178>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b0c      	cmp	r3, #12
 8003e88:	d105      	bne.n	8003e96 <PWM_Change_Tones+0x76>
 8003e8a:	4b44      	ldr	r3, [pc, #272]	; (8003f9c <PWM_Change_Tones+0x17c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	2300      	movs	r3, #0
 8003e92:	6413      	str	r3, [r2, #64]	; 0x40
 8003e94:	e079      	b.n	8003f8a <PWM_Change_Tones+0x16a>
 8003e96:	4b40      	ldr	r3, [pc, #256]	; (8003f98 <PWM_Change_Tones+0x178>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b10      	cmp	r3, #16
 8003e9c:	d105      	bne.n	8003eaa <PWM_Change_Tones+0x8a>
 8003e9e:	4b3f      	ldr	r3, [pc, #252]	; (8003f9c <PWM_Change_Tones+0x17c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ea8:	e06f      	b.n	8003f8a <PWM_Change_Tones+0x16a>
 8003eaa:	4b3c      	ldr	r3, [pc, #240]	; (8003f9c <PWM_Change_Tones+0x17c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003eb4:	e069      	b.n	8003f8a <PWM_Change_Tones+0x16a>


	  }
	  else{
		  const uint32_t internal_Clock_freq=HAL_RCC_GetSysClockFreq();
 8003eb6:	f002 fef7 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 8003eba:	61f8      	str	r0, [r7, #28]
		  const uint16_t prescaler=1+internal_Clock_freq/pwm_freq/60000;
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	4a36      	ldr	r2, [pc, #216]	; (8003fa0 <PWM_Change_Tones+0x180>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	0b9b      	lsrs	r3, r3, #14
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	837b      	strh	r3, [r7, #26]
		  const uint32_t timer_clock=internal_Clock_freq/ prescaler;
 8003ed2:	8b7b      	ldrh	r3, [r7, #26]
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eda:	617b      	str	r3, [r7, #20]
		  const uint32_t period_cycle=timer_clock/pwm_freq;
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	613b      	str	r3, [r7, #16]
        const uint32_t pulse_width=volume*period_cycle/1000/2;
 8003ee6:	88bb      	ldrh	r3, [r7, #4]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	4a2d      	ldr	r2, [pc, #180]	; (8003fa4 <PWM_Change_Tones+0x184>)
 8003ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef4:	09db      	lsrs	r3, r3, #7
 8003ef6:	60fb      	str	r3, [r7, #12]

        pwm_timers->Instance->PSC=prescaler-1;
 8003ef8:	8b7b      	ldrh	r3, [r7, #26]
 8003efa:	1e5a      	subs	r2, r3, #1
 8003efc:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <PWM_Change_Tones+0x17c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	629a      	str	r2, [r3, #40]	; 0x28
        pwm_timers->Instance->ARR=period_cycle-1;
 8003f04:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <PWM_Change_Tones+0x17c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	3a01      	subs	r2, #1
 8003f0e:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_timers->Instance->EGR=TIM_EGR_UG;
 8003f10:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <PWM_Change_Tones+0x17c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2201      	movs	r2, #1
 8003f18:	615a      	str	r2, [r3, #20]
__HAL_TIM_SET_COMPARE(pwm_timers,pwm_channels,pulse_width);
 8003f1a:	4b1f      	ldr	r3, [pc, #124]	; (8003f98 <PWM_Change_Tones+0x178>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d105      	bne.n	8003f2e <PWM_Change_Tones+0x10e>
 8003f22:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <PWM_Change_Tones+0x17c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	635a      	str	r2, [r3, #52]	; 0x34


	  }

}
 8003f2c:	e02d      	b.n	8003f8a <PWM_Change_Tones+0x16a>
__HAL_TIM_SET_COMPARE(pwm_timers,pwm_channels,pulse_width);
 8003f2e:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <PWM_Change_Tones+0x178>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d105      	bne.n	8003f42 <PWM_Change_Tones+0x122>
 8003f36:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <PWM_Change_Tones+0x17c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003f40:	e023      	b.n	8003f8a <PWM_Change_Tones+0x16a>
__HAL_TIM_SET_COMPARE(pwm_timers,pwm_channels,pulse_width);
 8003f42:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <PWM_Change_Tones+0x178>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d105      	bne.n	8003f56 <PWM_Change_Tones+0x136>
 8003f4a:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <PWM_Change_Tones+0x17c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003f54:	e019      	b.n	8003f8a <PWM_Change_Tones+0x16a>
__HAL_TIM_SET_COMPARE(pwm_timers,pwm_channels,pulse_width);
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <PWM_Change_Tones+0x178>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b0c      	cmp	r3, #12
 8003f5c:	d105      	bne.n	8003f6a <PWM_Change_Tones+0x14a>
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <PWM_Change_Tones+0x17c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003f68:	e00f      	b.n	8003f8a <PWM_Change_Tones+0x16a>
__HAL_TIM_SET_COMPARE(pwm_timers,pwm_channels,pulse_width);
 8003f6a:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <PWM_Change_Tones+0x178>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d105      	bne.n	8003f7e <PWM_Change_Tones+0x15e>
 8003f72:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <PWM_Change_Tones+0x17c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003f7c:	e005      	b.n	8003f8a <PWM_Change_Tones+0x16a>
__HAL_TIM_SET_COMPARE(pwm_timers,pwm_channels,pulse_width);
 8003f7e:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <PWM_Change_Tones+0x17c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8003f88:	e7ff      	b.n	8003f8a <PWM_Change_Tones+0x16a>
 8003f8a:	bf00      	nop
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40000800 	.word	0x40000800
 8003f98:	20000060 	.word	0x20000060
 8003f9c:	2000005c 	.word	0x2000005c
 8003fa0:	45e7b273 	.word	0x45e7b273
 8003fa4:	10624dd3 	.word	0x10624dd3

08003fa8 <Change_Melody>:
  {NOTE_E4, 112},
  {NOTE_E4, 900},
  {		 0,   0}

};
void Change_Melody(const Tone *melody,uint16_t tone_count){
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	807b      	strh	r3, [r7, #2]
	melody_ptr=melody;
 8003fb4:	4a07      	ldr	r2, [pc, #28]	; (8003fd4 <Change_Melody+0x2c>)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6013      	str	r3, [r2, #0]
	melody_tone_count=tone_count;
 8003fba:	4a07      	ldr	r2, [pc, #28]	; (8003fd8 <Change_Melody+0x30>)
 8003fbc:	887b      	ldrh	r3, [r7, #2]
 8003fbe:	8013      	strh	r3, [r2, #0]
	current_tone_number=0;
 8003fc0:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <Change_Melody+0x34>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	801a      	strh	r2, [r3, #0]

}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000748 	.word	0x20000748
 8003fd8:	2000074c 	.word	0x2000074c
 8003fdc:	2000074e 	.word	0x2000074e

08003fe0 <Update_Melody>:


int c=0;
//c=melody_tone_count
void Update_Melody(){
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0

	if(pause!=1){
 8003fe6:	4b26      	ldr	r3, [pc, #152]	; (8004080 <Update_Melody+0xa0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d03f      	beq.n	800406e <Update_Melody+0x8e>

	if((HAL_GetTick()>current_tone_end)&&(current_tone_number<melody_tone_count)){
 8003fee:	f000 ff7f 	bl	8004ef0 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	4b23      	ldr	r3, [pc, #140]	; (8004084 <Update_Melody+0xa4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d92c      	bls.n	8004056 <Update_Melody+0x76>
 8003ffc:	4b22      	ldr	r3, [pc, #136]	; (8004088 <Update_Melody+0xa8>)
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	b29a      	uxth	r2, r3
 8004002:	4b22      	ldr	r3, [pc, #136]	; (800408c <Update_Melody+0xac>)
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	b29b      	uxth	r3, r3
 8004008:	429a      	cmp	r2, r3
 800400a:	d224      	bcs.n	8004056 <Update_Melody+0x76>

		const Tone active_tone=*(melody_ptr+current_tone_number);
 800400c:	4b20      	ldr	r3, [pc, #128]	; (8004090 <Update_Melody+0xb0>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <Update_Melody+0xa8>)
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	b29b      	uxth	r3, r3
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	441a      	add	r2, r3
 800401a:	1d3b      	adds	r3, r7, #4
 800401c:	6810      	ldr	r0, [r2, #0]
 800401e:	6018      	str	r0, [r3, #0]
		PWM_Change_Tones(active_tone.frequency,volume);
 8004020:	88bb      	ldrh	r3, [r7, #4]
 8004022:	4a1c      	ldr	r2, [pc, #112]	; (8004094 <Update_Melody+0xb4>)
 8004024:	8812      	ldrh	r2, [r2, #0]
 8004026:	b292      	uxth	r2, r2
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fef8 	bl	8003e20 <PWM_Change_Tones>
		current_tone_end=HAL_GetTick()+active_tone.duration;
 8004030:	f000 ff5e 	bl	8004ef0 <HAL_GetTick>
 8004034:	4603      	mov	r3, r0
 8004036:	88fa      	ldrh	r2, [r7, #6]
 8004038:	4413      	add	r3, r2
 800403a:	4a12      	ldr	r2, [pc, #72]	; (8004084 <Update_Melody+0xa4>)
 800403c:	6013      	str	r3, [r2, #0]
		current_tone_number++;
 800403e:	4b12      	ldr	r3, [pc, #72]	; (8004088 <Update_Melody+0xa8>)
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	b29b      	uxth	r3, r3
 8004044:	3301      	adds	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <Update_Melody+0xa8>)
 800404a:	801a      	strh	r2, [r3, #0]
c++;
 800404c:	4b12      	ldr	r3, [pc, #72]	; (8004098 <Update_Melody+0xb8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3301      	adds	r3, #1
 8004052:	4a11      	ldr	r2, [pc, #68]	; (8004098 <Update_Melody+0xb8>)
 8004054:	6013      	str	r3, [r2, #0]
	}
	if(c==ARRAY_LENGTH( pink_panther)){
 8004056:	4b10      	ldr	r3, [pc, #64]	; (8004098 <Update_Melody+0xb8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b59      	cmp	r3, #89	; 0x59
 800405c:	d10b      	bne.n	8004076 <Update_Melody+0x96>
		c=0;
 800405e:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <Update_Melody+0xb8>)
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
			Change_Melody( pink_panther,ARRAY_LENGTH( pink_panther));
 8004064:	2159      	movs	r1, #89	; 0x59
 8004066:	480d      	ldr	r0, [pc, #52]	; (800409c <Update_Melody+0xbc>)
 8004068:	f7ff ff9e 	bl	8003fa8 <Change_Melody>
	}




}
 800406c:	e003      	b.n	8004076 <Update_Melody+0x96>
		PWM_Change_Tones(0,0);
 800406e:	2100      	movs	r1, #0
 8004070:	2000      	movs	r0, #0
 8004072:	f7ff fed5 	bl	8003e20 <PWM_Change_Tones>
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	200005ac 	.word	0x200005ac
 8004084:	20000750 	.word	0x20000750
 8004088:	2000074e 	.word	0x2000074e
 800408c:	2000074c 	.word	0x2000074c
 8004090:	20000748 	.word	0x20000748
 8004094:	20000744 	.word	0x20000744
 8004098:	20000754 	.word	0x20000754
 800409c:	0800ab50 	.word	0x0800ab50

080040a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040a4:	e7fe      	b.n	80040a4 <NMI_Handler+0x4>

080040a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040a6:	b480      	push	{r7}
 80040a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040aa:	e7fe      	b.n	80040aa <HardFault_Handler+0x4>

080040ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040b0:	e7fe      	b.n	80040b0 <MemManage_Handler+0x4>

080040b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040b2:	b480      	push	{r7}
 80040b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040b6:	e7fe      	b.n	80040b6 <BusFault_Handler+0x4>

080040b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040bc:	e7fe      	b.n	80040bc <UsageFault_Handler+0x4>

080040be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040be:	b480      	push	{r7}
 80040c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040da:	b480      	push	{r7}
 80040dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040de:	bf00      	nop
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040ee:	f000 feeb 	bl	8004ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(start==0){
 80040f2:	4b96      	ldr	r3, [pc, #600]	; (800434c <SysTick_Handler+0x264>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d108      	bne.n	800410c <SysTick_Handler+0x24>
	  PWM_starts();
 80040fa:	f7ff fe81 	bl	8003e00 <PWM_starts>
	  		Change_Melody( pink_panther,ARRAY_LENGTH( pink_panther));
 80040fe:	2159      	movs	r1, #89	; 0x59
 8004100:	4893      	ldr	r0, [pc, #588]	; (8004350 <SysTick_Handler+0x268>)
 8004102:	f7ff ff51 	bl	8003fa8 <Change_Melody>
  start=1;
 8004106:	4b91      	ldr	r3, [pc, #580]	; (800434c <SysTick_Handler+0x264>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]
  }
  Update_Melody();
 800410c:	f7ff ff68 	bl	8003fe0 <Update_Melody>
  	  	  	int firstpoint=0;
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
  			int secondpoint=0;
 8004114:	2300      	movs	r3, #0
 8004116:	60bb      	str	r3, [r7, #8]
  			secondpoint=point/10;
 8004118:	4b8e      	ldr	r3, [pc, #568]	; (8004354 <SysTick_Handler+0x26c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a8e      	ldr	r2, [pc, #568]	; (8004358 <SysTick_Handler+0x270>)
 800411e:	fb82 1203 	smull	r1, r2, r2, r3
 8004122:	1092      	asrs	r2, r2, #2
 8004124:	17db      	asrs	r3, r3, #31
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	60bb      	str	r3, [r7, #8]
  			firstpoint=point%10;
 800412a:	4b8a      	ldr	r3, [pc, #552]	; (8004354 <SysTick_Handler+0x26c>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4b8a      	ldr	r3, [pc, #552]	; (8004358 <SysTick_Handler+0x270>)
 8004130:	fb83 1302 	smull	r1, r3, r3, r2
 8004134:	1099      	asrs	r1, r3, #2
 8004136:	17d3      	asrs	r3, r2, #31
 8004138:	1ac9      	subs	r1, r1, r3
 800413a:	460b      	mov	r3, r1
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	60fb      	str	r3, [r7, #12]

  			Off_First7segment();
 8004146:	f7ff fc7f 	bl	8003a48 <Off_First7segment>
  			Off_Third7segment();
 800414a:	f7ff fcdb 	bl	8003b04 <Off_Third7segment>
  			Off_Forth7segment();
 800414e:	f7ff fd09 	bl	8003b64 <Off_Forth7segment>
  			Off_Second7segment();
 8004152:	f7ff fca7 	bl	8003aa4 <Off_Second7segment>
  			On_First7segment();
 8004156:	f7ff fc47 	bl	80039e8 <On_First7segment>
  				if(secondpoint==0)Number(0);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d102      	bne.n	8004166 <SysTick_Handler+0x7e>
 8004160:	2000      	movs	r0, #0
 8004162:	f7ff fd2f 	bl	8003bc4 <Number>
  				if(secondpoint==1)Number(1);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d102      	bne.n	8004172 <SysTick_Handler+0x8a>
 800416c:	2001      	movs	r0, #1
 800416e:	f7ff fd29 	bl	8003bc4 <Number>
  				if(secondpoint==2)Number(2);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d102      	bne.n	800417e <SysTick_Handler+0x96>
 8004178:	2002      	movs	r0, #2
 800417a:	f7ff fd23 	bl	8003bc4 <Number>
  				if(secondpoint==3)Number(3);
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d102      	bne.n	800418a <SysTick_Handler+0xa2>
 8004184:	2003      	movs	r0, #3
 8004186:	f7ff fd1d 	bl	8003bc4 <Number>
  				if(secondpoint==4)Number(4);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b04      	cmp	r3, #4
 800418e:	d102      	bne.n	8004196 <SysTick_Handler+0xae>
 8004190:	2004      	movs	r0, #4
 8004192:	f7ff fd17 	bl	8003bc4 <Number>
  				if(secondpoint==5)Number(5);
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b05      	cmp	r3, #5
 800419a:	d102      	bne.n	80041a2 <SysTick_Handler+0xba>
 800419c:	2005      	movs	r0, #5
 800419e:	f7ff fd11 	bl	8003bc4 <Number>
  				if(secondpoint==6)Number(6);
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b06      	cmp	r3, #6
 80041a6:	d102      	bne.n	80041ae <SysTick_Handler+0xc6>
 80041a8:	2006      	movs	r0, #6
 80041aa:	f7ff fd0b 	bl	8003bc4 <Number>
  				if(secondpoint==7)Number(7);
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b07      	cmp	r3, #7
 80041b2:	d102      	bne.n	80041ba <SysTick_Handler+0xd2>
 80041b4:	2007      	movs	r0, #7
 80041b6:	f7ff fd05 	bl	8003bc4 <Number>
  				if(secondpoint==8)Number(8);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d102      	bne.n	80041c6 <SysTick_Handler+0xde>
 80041c0:	2008      	movs	r0, #8
 80041c2:	f7ff fcff 	bl	8003bc4 <Number>
  				if(secondpoint==9)Number(9);
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	d102      	bne.n	80041d2 <SysTick_Handler+0xea>
 80041cc:	2009      	movs	r0, #9
 80041ce:	f7ff fcf9 	bl	8003bc4 <Number>
for(int i=0;i<30;i++);
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	e002      	b.n	80041de <SysTick_Handler+0xf6>
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	3301      	adds	r3, #1
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	2b1d      	cmp	r3, #29
 80041e2:	ddf9      	ble.n	80041d8 <SysTick_Handler+0xf0>
  				Off_First7segment();
 80041e4:	f7ff fc30 	bl	8003a48 <Off_First7segment>
  				Off_Second7segment();
 80041e8:	f7ff fc5c 	bl	8003aa4 <Off_Second7segment>
  				Off_Third7segment();
 80041ec:	f7ff fc8a 	bl	8003b04 <Off_Third7segment>
  				Off_Forth7segment();
 80041f0:	f7ff fcb8 	bl	8003b64 <Off_Forth7segment>
  				On_Second7segment();
 80041f4:	f7ff fc04 	bl	8003a00 <On_Second7segment>

  					if(firstpoint==0)Number(0);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d102      	bne.n	8004204 <SysTick_Handler+0x11c>
 80041fe:	2000      	movs	r0, #0
 8004200:	f7ff fce0 	bl	8003bc4 <Number>
  					if(firstpoint==1)Number(1);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d102      	bne.n	8004210 <SysTick_Handler+0x128>
 800420a:	2001      	movs	r0, #1
 800420c:	f7ff fcda 	bl	8003bc4 <Number>
  					if(firstpoint==2)Number(2);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d102      	bne.n	800421c <SysTick_Handler+0x134>
 8004216:	2002      	movs	r0, #2
 8004218:	f7ff fcd4 	bl	8003bc4 <Number>
  					if(firstpoint==3)Number(3);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b03      	cmp	r3, #3
 8004220:	d102      	bne.n	8004228 <SysTick_Handler+0x140>
 8004222:	2003      	movs	r0, #3
 8004224:	f7ff fcce 	bl	8003bc4 <Number>
  					if(firstpoint==4)Number(4);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b04      	cmp	r3, #4
 800422c:	d102      	bne.n	8004234 <SysTick_Handler+0x14c>
 800422e:	2004      	movs	r0, #4
 8004230:	f7ff fcc8 	bl	8003bc4 <Number>
  					if(firstpoint==5)Number(5);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b05      	cmp	r3, #5
 8004238:	d102      	bne.n	8004240 <SysTick_Handler+0x158>
 800423a:	2005      	movs	r0, #5
 800423c:	f7ff fcc2 	bl	8003bc4 <Number>
  					if(firstpoint==6)Number(6);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b06      	cmp	r3, #6
 8004244:	d102      	bne.n	800424c <SysTick_Handler+0x164>
 8004246:	2006      	movs	r0, #6
 8004248:	f7ff fcbc 	bl	8003bc4 <Number>
  					if(firstpoint==7)Number(7);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b07      	cmp	r3, #7
 8004250:	d102      	bne.n	8004258 <SysTick_Handler+0x170>
 8004252:	2007      	movs	r0, #7
 8004254:	f7ff fcb6 	bl	8003bc4 <Number>
  					if(firstpoint==8)Number(8);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b08      	cmp	r3, #8
 800425c:	d102      	bne.n	8004264 <SysTick_Handler+0x17c>
 800425e:	2008      	movs	r0, #8
 8004260:	f7ff fcb0 	bl	8003bc4 <Number>
  					if(firstpoint==9)Number(9);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b09      	cmp	r3, #9
 8004268:	d102      	bne.n	8004270 <SysTick_Handler+0x188>
 800426a:	2009      	movs	r0, #9
 800426c:	f7ff fcaa 	bl	8003bc4 <Number>

  					for(int i=0;i<30;i++);
 8004270:	2300      	movs	r3, #0
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	e002      	b.n	800427c <SysTick_Handler+0x194>
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	3301      	adds	r3, #1
 800427a:	61bb      	str	r3, [r7, #24]
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b1d      	cmp	r3, #29
 8004280:	ddf9      	ble.n	8004276 <SysTick_Handler+0x18e>

  		  	  	  	int firsttime=0;
 8004282:	2300      	movs	r3, #0
 8004284:	607b      	str	r3, [r7, #4]
  		  			int secondtime=0;
 8004286:	2300      	movs	r3, #0
 8004288:	603b      	str	r3, [r7, #0]
  		  			secondtime=minute/10;
 800428a:	4b34      	ldr	r3, [pc, #208]	; (800435c <SysTick_Handler+0x274>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a32      	ldr	r2, [pc, #200]	; (8004358 <SysTick_Handler+0x270>)
 8004290:	fb82 1203 	smull	r1, r2, r2, r3
 8004294:	1092      	asrs	r2, r2, #2
 8004296:	17db      	asrs	r3, r3, #31
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	603b      	str	r3, [r7, #0]
  		  			firsttime=minute%10;
 800429c:	4b2f      	ldr	r3, [pc, #188]	; (800435c <SysTick_Handler+0x274>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b2d      	ldr	r3, [pc, #180]	; (8004358 <SysTick_Handler+0x270>)
 80042a2:	fb83 1302 	smull	r1, r3, r3, r2
 80042a6:	1099      	asrs	r1, r3, #2
 80042a8:	17d3      	asrs	r3, r2, #31
 80042aa:	1ac9      	subs	r1, r1, r3
 80042ac:	460b      	mov	r3, r1
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	607b      	str	r3, [r7, #4]



  		  						Off_First7segment();
 80042b8:	f7ff fbc6 	bl	8003a48 <Off_First7segment>
  		  		  				Off_Second7segment();
 80042bc:	f7ff fbf2 	bl	8003aa4 <Off_Second7segment>
  		  		  				Off_Third7segment();
 80042c0:	f7ff fc20 	bl	8003b04 <Off_Third7segment>
  		  		  				Off_Forth7segment();
 80042c4:	f7ff fc4e 	bl	8003b64 <Off_Forth7segment>
  		  		  				On_Third7segment();
 80042c8:	f7ff fba6 	bl	8003a18 <On_Third7segment>

  		  		  					if(secondtime==0)Number(0);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <SysTick_Handler+0x1f0>
 80042d2:	2000      	movs	r0, #0
 80042d4:	f7ff fc76 	bl	8003bc4 <Number>
  		  		  					if(secondtime==1)Number(1);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d102      	bne.n	80042e4 <SysTick_Handler+0x1fc>
 80042de:	2001      	movs	r0, #1
 80042e0:	f7ff fc70 	bl	8003bc4 <Number>
  		  		  					if(secondtime==2)Number(2);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d102      	bne.n	80042f0 <SysTick_Handler+0x208>
 80042ea:	2002      	movs	r0, #2
 80042ec:	f7ff fc6a 	bl	8003bc4 <Number>
  		  		  					if(secondtime==3)Number(3);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d102      	bne.n	80042fc <SysTick_Handler+0x214>
 80042f6:	2003      	movs	r0, #3
 80042f8:	f7ff fc64 	bl	8003bc4 <Number>
  		  		  					if(secondtime==4)Number(4);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d102      	bne.n	8004308 <SysTick_Handler+0x220>
 8004302:	2004      	movs	r0, #4
 8004304:	f7ff fc5e 	bl	8003bc4 <Number>
  		  		  					if(secondtime==5)Number(5);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b05      	cmp	r3, #5
 800430c:	d102      	bne.n	8004314 <SysTick_Handler+0x22c>
 800430e:	2005      	movs	r0, #5
 8004310:	f7ff fc58 	bl	8003bc4 <Number>
  		  		  					if(secondtime==6)Number(6);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2b06      	cmp	r3, #6
 8004318:	d102      	bne.n	8004320 <SysTick_Handler+0x238>
 800431a:	2006      	movs	r0, #6
 800431c:	f7ff fc52 	bl	8003bc4 <Number>
  		  		  					if(secondtime==7)Number(7);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2b07      	cmp	r3, #7
 8004324:	d102      	bne.n	800432c <SysTick_Handler+0x244>
 8004326:	2007      	movs	r0, #7
 8004328:	f7ff fc4c 	bl	8003bc4 <Number>
  		  		  					if(secondtime==8)Number(8);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b08      	cmp	r3, #8
 8004330:	d102      	bne.n	8004338 <SysTick_Handler+0x250>
 8004332:	2008      	movs	r0, #8
 8004334:	f7ff fc46 	bl	8003bc4 <Number>
  		  		  					if(secondtime==9)Number(9);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b09      	cmp	r3, #9
 800433c:	d102      	bne.n	8004344 <SysTick_Handler+0x25c>
 800433e:	2009      	movs	r0, #9
 8004340:	f7ff fc40 	bl	8003bc4 <Number>

  		  	  					for(int i=0;i<30;i++);
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e00d      	b.n	8004366 <SysTick_Handler+0x27e>
 800434a:	bf00      	nop
 800434c:	200005b0 	.word	0x200005b0
 8004350:	0800ab50 	.word	0x0800ab50
 8004354:	20000734 	.word	0x20000734
 8004358:	66666667 	.word	0x66666667
 800435c:	20000738 	.word	0x20000738
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	3301      	adds	r3, #1
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b1d      	cmp	r3, #29
 800436a:	ddf9      	ble.n	8004360 <SysTick_Handler+0x278>


  		  						Off_First7segment();
 800436c:	f7ff fb6c 	bl	8003a48 <Off_First7segment>
  		  		  				Off_Second7segment();
 8004370:	f7ff fb98 	bl	8003aa4 <Off_Second7segment>
  		  		  				Off_Third7segment();
 8004374:	f7ff fbc6 	bl	8003b04 <Off_Third7segment>
  		  		  				Off_Forth7segment();
 8004378:	f7ff fbf4 	bl	8003b64 <Off_Forth7segment>
  		  		  				On_Forth7segment();
 800437c:	f7ff fb58 	bl	8003a30 <On_Forth7segment>

  		  		  					if(firsttime==0)Number(0);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d102      	bne.n	800438c <SysTick_Handler+0x2a4>
 8004386:	2000      	movs	r0, #0
 8004388:	f7ff fc1c 	bl	8003bc4 <Number>
  		  		  					if(firsttime==1)Number(1);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d102      	bne.n	8004398 <SysTick_Handler+0x2b0>
 8004392:	2001      	movs	r0, #1
 8004394:	f7ff fc16 	bl	8003bc4 <Number>
  		  		  					if(firsttime==2)Number(2);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d102      	bne.n	80043a4 <SysTick_Handler+0x2bc>
 800439e:	2002      	movs	r0, #2
 80043a0:	f7ff fc10 	bl	8003bc4 <Number>
  		  		  					if(firsttime==3)Number(3);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d102      	bne.n	80043b0 <SysTick_Handler+0x2c8>
 80043aa:	2003      	movs	r0, #3
 80043ac:	f7ff fc0a 	bl	8003bc4 <Number>
  		  		  					if(firsttime==4)Number(4);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d102      	bne.n	80043bc <SysTick_Handler+0x2d4>
 80043b6:	2004      	movs	r0, #4
 80043b8:	f7ff fc04 	bl	8003bc4 <Number>
  		  		  					if(firsttime==5)Number(5);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b05      	cmp	r3, #5
 80043c0:	d102      	bne.n	80043c8 <SysTick_Handler+0x2e0>
 80043c2:	2005      	movs	r0, #5
 80043c4:	f7ff fbfe 	bl	8003bc4 <Number>
  		  		  					if(firsttime==6)Number(6);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b06      	cmp	r3, #6
 80043cc:	d102      	bne.n	80043d4 <SysTick_Handler+0x2ec>
 80043ce:	2006      	movs	r0, #6
 80043d0:	f7ff fbf8 	bl	8003bc4 <Number>
  		  		  					if(firsttime==7)Number(7);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b07      	cmp	r3, #7
 80043d8:	d102      	bne.n	80043e0 <SysTick_Handler+0x2f8>
 80043da:	2007      	movs	r0, #7
 80043dc:	f7ff fbf2 	bl	8003bc4 <Number>
  		  		  					if(firsttime==8)Number(8);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d102      	bne.n	80043ec <SysTick_Handler+0x304>
 80043e6:	2008      	movs	r0, #8
 80043e8:	f7ff fbec 	bl	8003bc4 <Number>
  		  		  					if(firsttime==9)Number(9);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b09      	cmp	r3, #9
 80043f0:	d102      	bne.n	80043f8 <SysTick_Handler+0x310>
 80043f2:	2009      	movs	r0, #9
 80043f4:	f7ff fbe6 	bl	8003bc4 <Number>
  	  		  	  					for(int i=0;i<30;i++);
 80043f8:	2300      	movs	r3, #0
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	e002      	b.n	8004404 <SysTick_Handler+0x31c>
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	3301      	adds	r3, #1
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b1d      	cmp	r3, #29
 8004408:	ddf9      	ble.n	80043fe <SysTick_Handler+0x316>

  	  		  						Off_First7segment();
 800440a:	f7ff fb1d 	bl	8003a48 <Off_First7segment>
  	  		  		  				Off_Second7segment();
 800440e:	f7ff fb49 	bl	8003aa4 <Off_Second7segment>
  	  		  		  				Off_Third7segment();
 8004412:	f7ff fb77 	bl	8003b04 <Off_Third7segment>
  	  		  		  				Off_Forth7segment();
 8004416:	f7ff fba5 	bl	8003b64 <Off_Forth7segment>

  /* USER CODE END SysTick_IRQn 1 */
}
 800441a:	bf00      	nop
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop

08004424 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800442a:	2001      	movs	r0, #1
 800442c:	f001 f866 	bl	80054fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

    // Initialize all rows to low state
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8004430:	2200      	movs	r2, #0
 8004432:	2110      	movs	r1, #16
 8004434:	488c      	ldr	r0, [pc, #560]	; (8004668 <EXTI0_IRQHandler+0x244>)
 8004436:	f001 f82f 	bl	8005498 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 800443a:	2200      	movs	r2, #0
 800443c:	2120      	movs	r1, #32
 800443e:	488a      	ldr	r0, [pc, #552]	; (8004668 <EXTI0_IRQHandler+0x244>)
 8004440:	f001 f82a 	bl	8005498 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8004444:	2200      	movs	r2, #0
 8004446:	2140      	movs	r1, #64	; 0x40
 8004448:	4887      	ldr	r0, [pc, #540]	; (8004668 <EXTI0_IRQHandler+0x244>)
 800444a:	f001 f825 	bl	8005498 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800444e:	2200      	movs	r2, #0
 8004450:	2180      	movs	r1, #128	; 0x80
 8004452:	4885      	ldr	r0, [pc, #532]	; (8004668 <EXTI0_IRQHandler+0x244>)
 8004454:	f001 f820 	bl	8005498 <HAL_GPIO_WritePin>

    // Introduce a small delay for debounce (if necessary)
   // HAL_Delay(10);

    for (int turn = 0; turn < 4; turn++) {
 8004458:	2300      	movs	r3, #0
 800445a:	607b      	str	r3, [r7, #4]
 800445c:	e0db      	b.n	8004616 <EXTI0_IRQHandler+0x1f2>
      switch(turn) {
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d823      	bhi.n	80044ac <EXTI0_IRQHandler+0x88>
 8004464:	a201      	add	r2, pc, #4	; (adr r2, 800446c <EXTI0_IRQHandler+0x48>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	0800447d 	.word	0x0800447d
 8004470:	08004489 	.word	0x08004489
 8004474:	08004495 	.word	0x08004495
 8004478:	080044a1 	.word	0x080044a1
        case 0:

           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800447c:	2201      	movs	r2, #1
 800447e:	2110      	movs	r1, #16
 8004480:	4879      	ldr	r0, [pc, #484]	; (8004668 <EXTI0_IRQHandler+0x244>)
 8004482:	f001 f809 	bl	8005498 <HAL_GPIO_WritePin>

        	break;
 8004486:	e011      	b.n	80044ac <EXTI0_IRQHandler+0x88>
        case 1:
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8004488:	2201      	movs	r2, #1
 800448a:	2120      	movs	r1, #32
 800448c:	4876      	ldr	r0, [pc, #472]	; (8004668 <EXTI0_IRQHandler+0x244>)
 800448e:	f001 f803 	bl	8005498 <HAL_GPIO_WritePin>

        	break;
 8004492:	e00b      	b.n	80044ac <EXTI0_IRQHandler+0x88>
        case 2:
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8004494:	2201      	movs	r2, #1
 8004496:	2140      	movs	r1, #64	; 0x40
 8004498:	4873      	ldr	r0, [pc, #460]	; (8004668 <EXTI0_IRQHandler+0x244>)
 800449a:	f000 fffd 	bl	8005498 <HAL_GPIO_WritePin>
          break;
 800449e:	e005      	b.n	80044ac <EXTI0_IRQHandler+0x88>
        case 3:
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80044a0:	2201      	movs	r2, #1
 80044a2:	2180      	movs	r1, #128	; 0x80
 80044a4:	4870      	ldr	r0, [pc, #448]	; (8004668 <EXTI0_IRQHandler+0x244>)
 80044a6:	f000 fff7 	bl	8005498 <HAL_GPIO_WritePin>
          break;
 80044aa:	bf00      	nop
      }

      // Check if any button in the current row is pressed
      if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0)) {
 80044ac:	2101      	movs	r1, #1
 80044ae:	486e      	ldr	r0, [pc, #440]	; (8004668 <EXTI0_IRQHandler+0x244>)
 80044b0:	f000 ffda 	bl	8005468 <HAL_GPIO_ReadPin>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 8084 	beq.w	80045c4 <EXTI0_IRQHandler+0x1a0>
        switch(turn) {
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b03      	cmp	r3, #3
 80044c0:	f200 80ae 	bhi.w	8004620 <EXTI0_IRQHandler+0x1fc>
 80044c4:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <EXTI0_IRQHandler+0xa8>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	080044dd 	.word	0x080044dd
 80044d0:	080044e5 	.word	0x080044e5
 80044d4:	08004541 	.word	0x08004541
 80044d8:	0800459d 	.word	0x0800459d
          case 0:
          	menu=1;
 80044dc:	4b63      	ldr	r3, [pc, #396]	; (800466c <EXTI0_IRQHandler+0x248>)
 80044de:	2201      	movs	r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

            //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
            break;
 80044e2:	e06e      	b.n	80045c2 <EXTI0_IRQHandler+0x19e>

          case 1:
        	  if(HAL_GetTick()-last_enter_time<200)
 80044e4:	f000 fd04 	bl	8004ef0 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b61      	ldr	r3, [pc, #388]	; (8004670 <EXTI0_IRQHandler+0x24c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2bc7      	cmp	r3, #199	; 0xc7
 80044f2:	f240 80b3 	bls.w	800465c <EXTI0_IRQHandler+0x238>
        	         	 		 return;

        	         	 		 last_enter_time=HAL_GetTick();
 80044f6:	f000 fcfb 	bl	8004ef0 <HAL_GetTick>
 80044fa:	4603      	mov	r3, r0
 80044fc:	4a5c      	ldr	r2, [pc, #368]	; (8004670 <EXTI0_IRQHandler+0x24c>)
 80044fe:	6013      	str	r3, [r2, #0]

        	         		  if(menuposition==0)menuposition=1;
 8004500:	4b5c      	ldr	r3, [pc, #368]	; (8004674 <EXTI0_IRQHandler+0x250>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d103      	bne.n	8004510 <EXTI0_IRQHandler+0xec>
 8004508:	4b5a      	ldr	r3, [pc, #360]	; (8004674 <EXTI0_IRQHandler+0x250>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]
        	         		  else if(menuposition==1)menuposition=2;
        	         		  else if(menuposition==2)menuposition=3;
        	         		  else if(menuposition==3)menuposition=0;

break;
 800450e:	e053      	b.n	80045b8 <EXTI0_IRQHandler+0x194>
        	         		  else if(menuposition==1)menuposition=2;
 8004510:	4b58      	ldr	r3, [pc, #352]	; (8004674 <EXTI0_IRQHandler+0x250>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d103      	bne.n	8004520 <EXTI0_IRQHandler+0xfc>
 8004518:	4b56      	ldr	r3, [pc, #344]	; (8004674 <EXTI0_IRQHandler+0x250>)
 800451a:	2202      	movs	r2, #2
 800451c:	601a      	str	r2, [r3, #0]
break;
 800451e:	e04b      	b.n	80045b8 <EXTI0_IRQHandler+0x194>
        	         		  else if(menuposition==2)menuposition=3;
 8004520:	4b54      	ldr	r3, [pc, #336]	; (8004674 <EXTI0_IRQHandler+0x250>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b02      	cmp	r3, #2
 8004526:	d103      	bne.n	8004530 <EXTI0_IRQHandler+0x10c>
 8004528:	4b52      	ldr	r3, [pc, #328]	; (8004674 <EXTI0_IRQHandler+0x250>)
 800452a:	2203      	movs	r2, #3
 800452c:	601a      	str	r2, [r3, #0]
break;
 800452e:	e043      	b.n	80045b8 <EXTI0_IRQHandler+0x194>
        	         		  else if(menuposition==3)menuposition=0;
 8004530:	4b50      	ldr	r3, [pc, #320]	; (8004674 <EXTI0_IRQHandler+0x250>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d13f      	bne.n	80045b8 <EXTI0_IRQHandler+0x194>
 8004538:	4b4e      	ldr	r3, [pc, #312]	; (8004674 <EXTI0_IRQHandler+0x250>)
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
break;
 800453e:	e03b      	b.n	80045b8 <EXTI0_IRQHandler+0x194>
}*/


                 //  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);

        	  if(HAL_GetTick()-last_enter_time<200)
 8004540:	f000 fcd6 	bl	8004ef0 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	4b4a      	ldr	r3, [pc, #296]	; (8004670 <EXTI0_IRQHandler+0x24c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2bc7      	cmp	r3, #199	; 0xc7
 800454e:	f240 8087 	bls.w	8004660 <EXTI0_IRQHandler+0x23c>
                	         	 		 return;

                	         	 		 last_enter_time=HAL_GetTick();
 8004552:	f000 fccd 	bl	8004ef0 <HAL_GetTick>
 8004556:	4603      	mov	r3, r0
 8004558:	4a45      	ldr	r2, [pc, #276]	; (8004670 <EXTI0_IRQHandler+0x24c>)
 800455a:	6013      	str	r3, [r2, #0]

                	         		  if(menuposition==3)menuposition=2;
 800455c:	4b45      	ldr	r3, [pc, #276]	; (8004674 <EXTI0_IRQHandler+0x250>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b03      	cmp	r3, #3
 8004562:	d103      	bne.n	800456c <EXTI0_IRQHandler+0x148>
 8004564:	4b43      	ldr	r3, [pc, #268]	; (8004674 <EXTI0_IRQHandler+0x250>)
 8004566:	2202      	movs	r2, #2
 8004568:	601a      	str	r2, [r3, #0]
                	         		  else if(menuposition==2)menuposition=1;
                	         		  else if(menuposition==1)menuposition=0;
                	         		  else if(menuposition==0)menuposition=3;

        	  break;
 800456a:	e027      	b.n	80045bc <EXTI0_IRQHandler+0x198>
                	         		  else if(menuposition==2)menuposition=1;
 800456c:	4b41      	ldr	r3, [pc, #260]	; (8004674 <EXTI0_IRQHandler+0x250>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d103      	bne.n	800457c <EXTI0_IRQHandler+0x158>
 8004574:	4b3f      	ldr	r3, [pc, #252]	; (8004674 <EXTI0_IRQHandler+0x250>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]
        	  break;
 800457a:	e01f      	b.n	80045bc <EXTI0_IRQHandler+0x198>
                	         		  else if(menuposition==1)menuposition=0;
 800457c:	4b3d      	ldr	r3, [pc, #244]	; (8004674 <EXTI0_IRQHandler+0x250>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d103      	bne.n	800458c <EXTI0_IRQHandler+0x168>
 8004584:	4b3b      	ldr	r3, [pc, #236]	; (8004674 <EXTI0_IRQHandler+0x250>)
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
        	  break;
 800458a:	e017      	b.n	80045bc <EXTI0_IRQHandler+0x198>
                	         		  else if(menuposition==0)menuposition=3;
 800458c:	4b39      	ldr	r3, [pc, #228]	; (8004674 <EXTI0_IRQHandler+0x250>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d113      	bne.n	80045bc <EXTI0_IRQHandler+0x198>
 8004594:	4b37      	ldr	r3, [pc, #220]	; (8004674 <EXTI0_IRQHandler+0x250>)
 8004596:	2203      	movs	r2, #3
 8004598:	601a      	str	r2, [r3, #0]
        	  break;
 800459a:	e00f      	b.n	80045bc <EXTI0_IRQHandler+0x198>
          case 3:
        	  menuchoice=1;
 800459c:	4b36      	ldr	r3, [pc, #216]	; (8004678 <EXTI0_IRQHandler+0x254>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
        	  if(menuposition==0){
 80045a2:	4b34      	ldr	r3, [pc, #208]	; (8004674 <EXTI0_IRQHandler+0x250>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <EXTI0_IRQHandler+0x19c>
        		  volume=0;
 80045aa:	4b34      	ldr	r3, [pc, #208]	; (800467c <EXTI0_IRQHandler+0x258>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	801a      	strh	r2, [r3, #0]
        		  vol=0;
 80045b0:	4b33      	ldr	r3, [pc, #204]	; (8004680 <EXTI0_IRQHandler+0x25c>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
        	  }

        	/*  if (pause==0)pause=1;
        	  else pause=0;*/
        	  break;
 80045b6:	e003      	b.n	80045c0 <EXTI0_IRQHandler+0x19c>
break;
 80045b8:	bf00      	nop
 80045ba:	e031      	b.n	8004620 <EXTI0_IRQHandler+0x1fc>
        	  break;
 80045bc:	bf00      	nop
 80045be:	e02f      	b.n	8004620 <EXTI0_IRQHandler+0x1fc>
        	  break;
 80045c0:	bf00      	nop
        }
        // Add a delay or handle the button press accordingly
        break; // Exit the loop if a button press is detected
 80045c2:	e02d      	b.n	8004620 <EXTI0_IRQHandler+0x1fc>
      }

      // Reset the row pin after checking
      switch(turn) {
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d822      	bhi.n	8004610 <EXTI0_IRQHandler+0x1ec>
 80045ca:	a201      	add	r2, pc, #4	; (adr r2, 80045d0 <EXTI0_IRQHandler+0x1ac>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	080045e1 	.word	0x080045e1
 80045d4:	080045ed 	.word	0x080045ed
 80045d8:	080045f9 	.word	0x080045f9
 80045dc:	08004605 	.word	0x08004605
        case 0:
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80045e0:	2200      	movs	r2, #0
 80045e2:	2110      	movs	r1, #16
 80045e4:	4820      	ldr	r0, [pc, #128]	; (8004668 <EXTI0_IRQHandler+0x244>)
 80045e6:	f000 ff57 	bl	8005498 <HAL_GPIO_WritePin>
          break;
 80045ea:	e011      	b.n	8004610 <EXTI0_IRQHandler+0x1ec>
        case 1:
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 80045ec:	2200      	movs	r2, #0
 80045ee:	2120      	movs	r1, #32
 80045f0:	481d      	ldr	r0, [pc, #116]	; (8004668 <EXTI0_IRQHandler+0x244>)
 80045f2:	f000 ff51 	bl	8005498 <HAL_GPIO_WritePin>
          break;
 80045f6:	e00b      	b.n	8004610 <EXTI0_IRQHandler+0x1ec>
        case 2:
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80045f8:	2200      	movs	r2, #0
 80045fa:	2140      	movs	r1, #64	; 0x40
 80045fc:	481a      	ldr	r0, [pc, #104]	; (8004668 <EXTI0_IRQHandler+0x244>)
 80045fe:	f000 ff4b 	bl	8005498 <HAL_GPIO_WritePin>
          break;
 8004602:	e005      	b.n	8004610 <EXTI0_IRQHandler+0x1ec>
        case 3:
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8004604:	2200      	movs	r2, #0
 8004606:	2180      	movs	r1, #128	; 0x80
 8004608:	4817      	ldr	r0, [pc, #92]	; (8004668 <EXTI0_IRQHandler+0x244>)
 800460a:	f000 ff45 	bl	8005498 <HAL_GPIO_WritePin>
          break;
 800460e:	bf00      	nop
    for (int turn = 0; turn < 4; turn++) {
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3301      	adds	r3, #1
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b03      	cmp	r3, #3
 800461a:	f77f af20 	ble.w	800445e <EXTI0_IRQHandler+0x3a>
 800461e:	e000      	b.n	8004622 <EXTI0_IRQHandler+0x1fe>
        break; // Exit the loop if a button press is detected
 8004620:	bf00      	nop
      }
    }

    // Ensure all rows are reset to high state after processing
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8004622:	2201      	movs	r2, #1
 8004624:	2110      	movs	r1, #16
 8004626:	4810      	ldr	r0, [pc, #64]	; (8004668 <EXTI0_IRQHandler+0x244>)
 8004628:	f000 ff36 	bl	8005498 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 800462c:	2201      	movs	r2, #1
 800462e:	2120      	movs	r1, #32
 8004630:	480d      	ldr	r0, [pc, #52]	; (8004668 <EXTI0_IRQHandler+0x244>)
 8004632:	f000 ff31 	bl	8005498 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8004636:	2201      	movs	r2, #1
 8004638:	2140      	movs	r1, #64	; 0x40
 800463a:	480b      	ldr	r0, [pc, #44]	; (8004668 <EXTI0_IRQHandler+0x244>)
 800463c:	f000 ff2c 	bl	8005498 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8004640:	2201      	movs	r2, #1
 8004642:	2180      	movs	r1, #128	; 0x80
 8004644:	4808      	ldr	r0, [pc, #32]	; (8004668 <EXTI0_IRQHandler+0x244>)
 8004646:	f000 ff27 	bl	8005498 <HAL_GPIO_WritePin>

    // Wait for the button to be released (debouncing)
    while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0));
 800464a:	bf00      	nop
 800464c:	2101      	movs	r1, #1
 800464e:	4806      	ldr	r0, [pc, #24]	; (8004668 <EXTI0_IRQHandler+0x244>)
 8004650:	f000 ff0a 	bl	8005468 <HAL_GPIO_ReadPin>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f8      	bne.n	800464c <EXTI0_IRQHandler+0x228>
 800465a:	e002      	b.n	8004662 <EXTI0_IRQHandler+0x23e>
        	         	 		 return;
 800465c:	bf00      	nop
 800465e:	e000      	b.n	8004662 <EXTI0_IRQHandler+0x23e>
                	         	 		 return;
 8004660:	bf00      	nop

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	48000c00 	.word	0x48000c00
 800466c:	200005d4 	.word	0x200005d4
 8004670:	20000740 	.word	0x20000740
 8004674:	20000004 	.word	0x20000004
 8004678:	200005d8 	.word	0x200005d8
 800467c:	20000744 	.word	0x20000744
 8004680:	20000010 	.word	0x20000010

08004684 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800468a:	2002      	movs	r0, #2
 800468c:	f000 ff36 	bl	80054fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  // Initialize all rows to low state
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8004690:	2200      	movs	r2, #0
 8004692:	2110      	movs	r1, #16
 8004694:	48a1      	ldr	r0, [pc, #644]	; (800491c <EXTI1_IRQHandler+0x298>)
 8004696:	f000 feff 	bl	8005498 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 800469a:	2200      	movs	r2, #0
 800469c:	2120      	movs	r1, #32
 800469e:	489f      	ldr	r0, [pc, #636]	; (800491c <EXTI1_IRQHandler+0x298>)
 80046a0:	f000 fefa 	bl	8005498 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80046a4:	2200      	movs	r2, #0
 80046a6:	2140      	movs	r1, #64	; 0x40
 80046a8:	489c      	ldr	r0, [pc, #624]	; (800491c <EXTI1_IRQHandler+0x298>)
 80046aa:	f000 fef5 	bl	8005498 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80046ae:	2200      	movs	r2, #0
 80046b0:	2180      	movs	r1, #128	; 0x80
 80046b2:	489a      	ldr	r0, [pc, #616]	; (800491c <EXTI1_IRQHandler+0x298>)
 80046b4:	f000 fef0 	bl	8005498 <HAL_GPIO_WritePin>

     // Introduce a small delay for debounce (if necessary)
    // HAL_Delay(10);

     for (int turn = 0; turn < 4; turn++) {
 80046b8:	2300      	movs	r3, #0
 80046ba:	607b      	str	r3, [r7, #4]
 80046bc:	e159      	b.n	8004972 <EXTI1_IRQHandler+0x2ee>
       switch(turn) {
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d823      	bhi.n	800470c <EXTI1_IRQHandler+0x88>
 80046c4:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <EXTI1_IRQHandler+0x48>)
 80046c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ca:	bf00      	nop
 80046cc:	080046dd 	.word	0x080046dd
 80046d0:	080046e9 	.word	0x080046e9
 80046d4:	080046f5 	.word	0x080046f5
 80046d8:	08004701 	.word	0x08004701
         case 0:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80046dc:	2201      	movs	r2, #1
 80046de:	2110      	movs	r1, #16
 80046e0:	488e      	ldr	r0, [pc, #568]	; (800491c <EXTI1_IRQHandler+0x298>)
 80046e2:	f000 fed9 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 80046e6:	e011      	b.n	800470c <EXTI1_IRQHandler+0x88>
         case 1:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 80046e8:	2201      	movs	r2, #1
 80046ea:	2120      	movs	r1, #32
 80046ec:	488b      	ldr	r0, [pc, #556]	; (800491c <EXTI1_IRQHandler+0x298>)
 80046ee:	f000 fed3 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 80046f2:	e00b      	b.n	800470c <EXTI1_IRQHandler+0x88>
         case 2:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80046f4:	2201      	movs	r2, #1
 80046f6:	2140      	movs	r1, #64	; 0x40
 80046f8:	4888      	ldr	r0, [pc, #544]	; (800491c <EXTI1_IRQHandler+0x298>)
 80046fa:	f000 fecd 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 80046fe:	e005      	b.n	800470c <EXTI1_IRQHandler+0x88>
         case 3:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8004700:	2201      	movs	r2, #1
 8004702:	2180      	movs	r1, #128	; 0x80
 8004704:	4885      	ldr	r0, [pc, #532]	; (800491c <EXTI1_IRQHandler+0x298>)
 8004706:	f000 fec7 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 800470a:	bf00      	nop
       }

       // Check if any button in the current row is pressed
       if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)) {
 800470c:	2102      	movs	r1, #2
 800470e:	4883      	ldr	r0, [pc, #524]	; (800491c <EXTI1_IRQHandler+0x298>)
 8004710:	f000 feaa 	bl	8005468 <HAL_GPIO_ReadPin>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80e5 	beq.w	80048e6 <EXTI1_IRQHandler+0x262>
         switch(turn) {
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b03      	cmp	r3, #3
 8004720:	f200 812c 	bhi.w	800497c <EXTI1_IRQHandler+0x2f8>
 8004724:	a201      	add	r2, pc, #4	; (adr r2, 800472c <EXTI1_IRQHandler+0xa8>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	0800473d 	.word	0x0800473d
 8004730:	080047fd 	.word	0x080047fd
 8004734:	08004861 	.word	0x08004861
 8004738:	080048bf 	.word	0x080048bf
           case 0:
        	   if(HAL_GetTick()-last_enter_time<200)
 800473c:	f000 fbd8 	bl	8004ef0 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	4b77      	ldr	r3, [pc, #476]	; (8004920 <EXTI1_IRQHandler+0x29c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2bc7      	cmp	r3, #199	; 0xc7
 800474a:	f240 8135 	bls.w	80049b8 <EXTI1_IRQHandler+0x334>
        	                      	         	 		 return;

        	                      	         	 		 last_enter_time=HAL_GetTick();
 800474e:	f000 fbcf 	bl	8004ef0 <HAL_GetTick>
 8004752:	4603      	mov	r3, r0
 8004754:	4a72      	ldr	r2, [pc, #456]	; (8004920 <EXTI1_IRQHandler+0x29c>)
 8004756:	6013      	str	r3, [r2, #0]
        	   if(settingoption==0){
 8004758:	4b72      	ldr	r3, [pc, #456]	; (8004924 <EXTI1_IRQHandler+0x2a0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10c      	bne.n	800477a <EXTI1_IRQHandler+0xf6>
        		   health++;
 8004760:	4b71      	ldr	r3, [pc, #452]	; (8004928 <EXTI1_IRQHandler+0x2a4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3301      	adds	r3, #1
 8004766:	4a70      	ldr	r2, [pc, #448]	; (8004928 <EXTI1_IRQHandler+0x2a4>)
 8004768:	6013      	str	r3, [r2, #0]
        		   if(health==100)health=1;
 800476a:	4b6f      	ldr	r3, [pc, #444]	; (8004928 <EXTI1_IRQHandler+0x2a4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b64      	cmp	r3, #100	; 0x64
 8004770:	d13e      	bne.n	80047f0 <EXTI1_IRQHandler+0x16c>
 8004772:	4b6d      	ldr	r3, [pc, #436]	; (8004928 <EXTI1_IRQHandler+0x2a4>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	e03a      	b.n	80047f0 <EXTI1_IRQHandler+0x16c>
        	   }
        	   else    if(settingoption==1){
 800477a:	4b6a      	ldr	r3, [pc, #424]	; (8004924 <EXTI1_IRQHandler+0x2a0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d10c      	bne.n	800479c <EXTI1_IRQHandler+0x118>
        		   speed++;
 8004782:	4b6a      	ldr	r3, [pc, #424]	; (800492c <EXTI1_IRQHandler+0x2a8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3301      	adds	r3, #1
 8004788:	4a68      	ldr	r2, [pc, #416]	; (800492c <EXTI1_IRQHandler+0x2a8>)
 800478a:	6013      	str	r3, [r2, #0]
        		   if(speed==11)speed=0;
 800478c:	4b67      	ldr	r3, [pc, #412]	; (800492c <EXTI1_IRQHandler+0x2a8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b0b      	cmp	r3, #11
 8004792:	d12d      	bne.n	80047f0 <EXTI1_IRQHandler+0x16c>
 8004794:	4b65      	ldr	r3, [pc, #404]	; (800492c <EXTI1_IRQHandler+0x2a8>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e029      	b.n	80047f0 <EXTI1_IRQHandler+0x16c>
        	   }
        	   else if(settingoption==2){
 800479c:	4b61      	ldr	r3, [pc, #388]	; (8004924 <EXTI1_IRQHandler+0x2a0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d115      	bne.n	80047d0 <EXTI1_IRQHandler+0x14c>
        		   if(vol==0){
 80047a4:	4b62      	ldr	r3, [pc, #392]	; (8004930 <EXTI1_IRQHandler+0x2ac>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <EXTI1_IRQHandler+0x136>
        			   vol=1;
 80047ac:	4b60      	ldr	r3, [pc, #384]	; (8004930 <EXTI1_IRQHandler+0x2ac>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
        			   volume=100;
 80047b2:	4b60      	ldr	r3, [pc, #384]	; (8004934 <EXTI1_IRQHandler+0x2b0>)
 80047b4:	2264      	movs	r2, #100	; 0x64
 80047b6:	801a      	strh	r2, [r3, #0]
 80047b8:	e01a      	b.n	80047f0 <EXTI1_IRQHandler+0x16c>

        		   }
        		   else if(vol==1){
 80047ba:	4b5d      	ldr	r3, [pc, #372]	; (8004930 <EXTI1_IRQHandler+0x2ac>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d116      	bne.n	80047f0 <EXTI1_IRQHandler+0x16c>
        			   vol=0;
 80047c2:	4b5b      	ldr	r3, [pc, #364]	; (8004930 <EXTI1_IRQHandler+0x2ac>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
        			   volume=0;
 80047c8:	4b5a      	ldr	r3, [pc, #360]	; (8004934 <EXTI1_IRQHandler+0x2b0>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	801a      	strh	r2, [r3, #0]
 80047ce:	e00f      	b.n	80047f0 <EXTI1_IRQHandler+0x16c>

        		   }

        	   }
        	   else if(settingoption==3){
 80047d0:	4b54      	ldr	r3, [pc, #336]	; (8004924 <EXTI1_IRQHandler+0x2a0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d10b      	bne.n	80047f0 <EXTI1_IRQHandler+0x16c>
        		   blocks++;
 80047d8:	4b57      	ldr	r3, [pc, #348]	; (8004938 <EXTI1_IRQHandler+0x2b4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	4a56      	ldr	r2, [pc, #344]	; (8004938 <EXTI1_IRQHandler+0x2b4>)
 80047e0:	6013      	str	r3, [r2, #0]
        		   if(blocks==7)blocks=0;
 80047e2:	4b55      	ldr	r3, [pc, #340]	; (8004938 <EXTI1_IRQHandler+0x2b4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b07      	cmp	r3, #7
 80047e8:	d102      	bne.n	80047f0 <EXTI1_IRQHandler+0x16c>
 80047ea:	4b53      	ldr	r3, [pc, #332]	; (8004938 <EXTI1_IRQHandler+0x2b4>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
        	   }
             HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 80047f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047f4:	4851      	ldr	r0, [pc, #324]	; (800493c <EXTI1_IRQHandler+0x2b8>)
 80047f6:	f000 fe67 	bl	80054c8 <HAL_GPIO_TogglePin>
             break;
 80047fa:	e073      	b.n	80048e4 <EXTI1_IRQHandler+0x260>
           case 1:
        	   if(HAL_GetTick()-last_enter_time<200)
 80047fc:	f000 fb78 	bl	8004ef0 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	4b47      	ldr	r3, [pc, #284]	; (8004920 <EXTI1_IRQHandler+0x29c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2bc7      	cmp	r3, #199	; 0xc7
 800480a:	f240 80d7 	bls.w	80049bc <EXTI1_IRQHandler+0x338>
        	                      	         	 		 return;

        	                      	         	 		 last_enter_time=HAL_GetTick();
 800480e:	f000 fb6f 	bl	8004ef0 <HAL_GetTick>
 8004812:	4603      	mov	r3, r0
 8004814:	4a42      	ldr	r2, [pc, #264]	; (8004920 <EXTI1_IRQHandler+0x29c>)
 8004816:	6013      	str	r3, [r2, #0]
        	   if(menu==2){
 8004818:	4b49      	ldr	r3, [pc, #292]	; (8004940 <EXTI1_IRQHandler+0x2bc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d160      	bne.n	80048e2 <EXTI1_IRQHandler+0x25e>
        	                      	         		  if(settingoption==0)settingoption=1;
 8004820:	4b40      	ldr	r3, [pc, #256]	; (8004924 <EXTI1_IRQHandler+0x2a0>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d103      	bne.n	8004830 <EXTI1_IRQHandler+0x1ac>
 8004828:	4b3e      	ldr	r3, [pc, #248]	; (8004924 <EXTI1_IRQHandler+0x2a0>)
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]
        	                      	         		  else if(settingoption==1)settingoption=2;
        	                       	         		  else if(settingoption==2)settingoption=3;
        	                       	         		  else if(settingoption==3)settingoption=0;

        	   }
             break;
 800482e:	e058      	b.n	80048e2 <EXTI1_IRQHandler+0x25e>
        	                      	         		  else if(settingoption==1)settingoption=2;
 8004830:	4b3c      	ldr	r3, [pc, #240]	; (8004924 <EXTI1_IRQHandler+0x2a0>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d103      	bne.n	8004840 <EXTI1_IRQHandler+0x1bc>
 8004838:	4b3a      	ldr	r3, [pc, #232]	; (8004924 <EXTI1_IRQHandler+0x2a0>)
 800483a:	2202      	movs	r2, #2
 800483c:	601a      	str	r2, [r3, #0]
             break;
 800483e:	e050      	b.n	80048e2 <EXTI1_IRQHandler+0x25e>
        	                       	         		  else if(settingoption==2)settingoption=3;
 8004840:	4b38      	ldr	r3, [pc, #224]	; (8004924 <EXTI1_IRQHandler+0x2a0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d103      	bne.n	8004850 <EXTI1_IRQHandler+0x1cc>
 8004848:	4b36      	ldr	r3, [pc, #216]	; (8004924 <EXTI1_IRQHandler+0x2a0>)
 800484a:	2203      	movs	r2, #3
 800484c:	601a      	str	r2, [r3, #0]
             break;
 800484e:	e048      	b.n	80048e2 <EXTI1_IRQHandler+0x25e>
        	                       	         		  else if(settingoption==3)settingoption=0;
 8004850:	4b34      	ldr	r3, [pc, #208]	; (8004924 <EXTI1_IRQHandler+0x2a0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d144      	bne.n	80048e2 <EXTI1_IRQHandler+0x25e>
 8004858:	4b32      	ldr	r3, [pc, #200]	; (8004924 <EXTI1_IRQHandler+0x2a0>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
             break;
 800485e:	e040      	b.n	80048e2 <EXTI1_IRQHandler+0x25e>
           case 2:
        	   //choose mode
        	   if(HAL_GetTick()-last_enter_time<200)
 8004860:	f000 fb46 	bl	8004ef0 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	4b2e      	ldr	r3, [pc, #184]	; (8004920 <EXTI1_IRQHandler+0x29c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2bc7      	cmp	r3, #199	; 0xc7
 800486e:	f240 80a7 	bls.w	80049c0 <EXTI1_IRQHandler+0x33c>
        	                      	         	 		 return;

        	                      	         	 		 last_enter_time=HAL_GetTick();
 8004872:	f000 fb3d 	bl	8004ef0 <HAL_GetTick>
 8004876:	4603      	mov	r3, r0
 8004878:	4a29      	ldr	r2, [pc, #164]	; (8004920 <EXTI1_IRQHandler+0x29c>)
 800487a:	6013      	str	r3, [r2, #0]
        	   if(menu==2){
 800487c:	4b30      	ldr	r3, [pc, #192]	; (8004940 <EXTI1_IRQHandler+0x2bc>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b02      	cmp	r3, #2
 8004882:	d116      	bne.n	80048b2 <EXTI1_IRQHandler+0x22e>
        	                      	         		  if(mode==0)mode=1;
 8004884:	4b2f      	ldr	r3, [pc, #188]	; (8004944 <EXTI1_IRQHandler+0x2c0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d103      	bne.n	8004894 <EXTI1_IRQHandler+0x210>
 800488c:	4b2d      	ldr	r3, [pc, #180]	; (8004944 <EXTI1_IRQHandler+0x2c0>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	e00e      	b.n	80048b2 <EXTI1_IRQHandler+0x22e>
        	                      	         		  else if(mode==1)mode=2;
 8004894:	4b2b      	ldr	r3, [pc, #172]	; (8004944 <EXTI1_IRQHandler+0x2c0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d103      	bne.n	80048a4 <EXTI1_IRQHandler+0x220>
 800489c:	4b29      	ldr	r3, [pc, #164]	; (8004944 <EXTI1_IRQHandler+0x2c0>)
 800489e:	2202      	movs	r2, #2
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e006      	b.n	80048b2 <EXTI1_IRQHandler+0x22e>
        	                       	         		  else if(mode==2)mode=0;
 80048a4:	4b27      	ldr	r3, [pc, #156]	; (8004944 <EXTI1_IRQHandler+0x2c0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d102      	bne.n	80048b2 <EXTI1_IRQHandler+0x22e>
 80048ac:	4b25      	ldr	r3, [pc, #148]	; (8004944 <EXTI1_IRQHandler+0x2c0>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
        	   }
             HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 80048b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048b6:	4821      	ldr	r0, [pc, #132]	; (800493c <EXTI1_IRQHandler+0x2b8>)
 80048b8:	f000 fe06 	bl	80054c8 <HAL_GPIO_TogglePin>

             break;
 80048bc:	e012      	b.n	80048e4 <EXTI1_IRQHandler+0x260>
           case 3:
        	   //back
        	   menuchoice=0;
 80048be:	4b22      	ldr	r3, [pc, #136]	; (8004948 <EXTI1_IRQHandler+0x2c4>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
        	   clearmenuchoice=0;
 80048c4:	4b21      	ldr	r3, [pc, #132]	; (800494c <EXTI1_IRQHandler+0x2c8>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
        	   menu=1;
 80048ca:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <EXTI1_IRQHandler+0x2bc>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
        	   returnfromchosen=1;
 80048d0:	4b1f      	ldr	r3, [pc, #124]	; (8004950 <EXTI1_IRQHandler+0x2cc>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

             HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 80048d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048da:	4818      	ldr	r0, [pc, #96]	; (800493c <EXTI1_IRQHandler+0x2b8>)
 80048dc:	f000 fdf4 	bl	80054c8 <HAL_GPIO_TogglePin>
             break;
 80048e0:	e000      	b.n	80048e4 <EXTI1_IRQHandler+0x260>
             break;
 80048e2:	bf00      	nop
         }
         // Add a delay or handle the button press accordingly
         break; // Exit the loop if a button press is detected
 80048e4:	e04a      	b.n	800497c <EXTI1_IRQHandler+0x2f8>
       }

       // Reset the row pin after checking
       switch(turn) {
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d83f      	bhi.n	800496c <EXTI1_IRQHandler+0x2e8>
 80048ec:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <EXTI1_IRQHandler+0x270>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004905 	.word	0x08004905
 80048f8:	08004911 	.word	0x08004911
 80048fc:	08004955 	.word	0x08004955
 8004900:	08004961 	.word	0x08004961
         case 0:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8004904:	2200      	movs	r2, #0
 8004906:	2110      	movs	r1, #16
 8004908:	4804      	ldr	r0, [pc, #16]	; (800491c <EXTI1_IRQHandler+0x298>)
 800490a:	f000 fdc5 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 800490e:	e02d      	b.n	800496c <EXTI1_IRQHandler+0x2e8>
         case 1:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 8004910:	2200      	movs	r2, #0
 8004912:	2120      	movs	r1, #32
 8004914:	4801      	ldr	r0, [pc, #4]	; (800491c <EXTI1_IRQHandler+0x298>)
 8004916:	f000 fdbf 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 800491a:	e027      	b.n	800496c <EXTI1_IRQHandler+0x2e8>
 800491c:	48000c00 	.word	0x48000c00
 8004920:	20000740 	.word	0x20000740
 8004924:	200005e0 	.word	0x200005e0
 8004928:	20000008 	.word	0x20000008
 800492c:	2000000c 	.word	0x2000000c
 8004930:	20000010 	.word	0x20000010
 8004934:	20000744 	.word	0x20000744
 8004938:	20000014 	.word	0x20000014
 800493c:	48001000 	.word	0x48001000
 8004940:	200005d4 	.word	0x200005d4
 8004944:	200005d0 	.word	0x200005d0
 8004948:	200005d8 	.word	0x200005d8
 800494c:	200005dc 	.word	0x200005dc
 8004950:	200005e4 	.word	0x200005e4
         case 2:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8004954:	2200      	movs	r2, #0
 8004956:	2140      	movs	r1, #64	; 0x40
 8004958:	481b      	ldr	r0, [pc, #108]	; (80049c8 <EXTI1_IRQHandler+0x344>)
 800495a:	f000 fd9d 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 800495e:	e005      	b.n	800496c <EXTI1_IRQHandler+0x2e8>
         case 3:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8004960:	2200      	movs	r2, #0
 8004962:	2180      	movs	r1, #128	; 0x80
 8004964:	4818      	ldr	r0, [pc, #96]	; (80049c8 <EXTI1_IRQHandler+0x344>)
 8004966:	f000 fd97 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 800496a:	bf00      	nop
     for (int turn = 0; turn < 4; turn++) {
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3301      	adds	r3, #1
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b03      	cmp	r3, #3
 8004976:	f77f aea2 	ble.w	80046be <EXTI1_IRQHandler+0x3a>
 800497a:	e000      	b.n	800497e <EXTI1_IRQHandler+0x2fa>
         break; // Exit the loop if a button press is detected
 800497c:	bf00      	nop
       }
     }

     // Ensure all rows are reset to high state after processing
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800497e:	2201      	movs	r2, #1
 8004980:	2110      	movs	r1, #16
 8004982:	4811      	ldr	r0, [pc, #68]	; (80049c8 <EXTI1_IRQHandler+0x344>)
 8004984:	f000 fd88 	bl	8005498 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8004988:	2201      	movs	r2, #1
 800498a:	2120      	movs	r1, #32
 800498c:	480e      	ldr	r0, [pc, #56]	; (80049c8 <EXTI1_IRQHandler+0x344>)
 800498e:	f000 fd83 	bl	8005498 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8004992:	2201      	movs	r2, #1
 8004994:	2140      	movs	r1, #64	; 0x40
 8004996:	480c      	ldr	r0, [pc, #48]	; (80049c8 <EXTI1_IRQHandler+0x344>)
 8004998:	f000 fd7e 	bl	8005498 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800499c:	2201      	movs	r2, #1
 800499e:	2180      	movs	r1, #128	; 0x80
 80049a0:	4809      	ldr	r0, [pc, #36]	; (80049c8 <EXTI1_IRQHandler+0x344>)
 80049a2:	f000 fd79 	bl	8005498 <HAL_GPIO_WritePin>

     // Wait for the button to be released (debouncing)
     while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1));
 80049a6:	bf00      	nop
 80049a8:	2102      	movs	r1, #2
 80049aa:	4807      	ldr	r0, [pc, #28]	; (80049c8 <EXTI1_IRQHandler+0x344>)
 80049ac:	f000 fd5c 	bl	8005468 <HAL_GPIO_ReadPin>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f8      	bne.n	80049a8 <EXTI1_IRQHandler+0x324>
 80049b6:	e004      	b.n	80049c2 <EXTI1_IRQHandler+0x33e>
        	                      	         	 		 return;
 80049b8:	bf00      	nop
 80049ba:	e002      	b.n	80049c2 <EXTI1_IRQHandler+0x33e>
        	                      	         	 		 return;
 80049bc:	bf00      	nop
 80049be:	e000      	b.n	80049c2 <EXTI1_IRQHandler+0x33e>
        	                      	         	 		 return;
 80049c0:	bf00      	nop

  /* USER CODE END EXTI1_IRQn 1 */
}
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	48000c00 	.word	0x48000c00

080049cc <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80049d2:	2004      	movs	r0, #4
 80049d4:	f000 fd92 	bl	80054fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */
  // Initialize all rows to low state
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80049d8:	2200      	movs	r2, #0
 80049da:	2110      	movs	r1, #16
 80049dc:	4892      	ldr	r0, [pc, #584]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 80049de:	f000 fd5b 	bl	8005498 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 80049e2:	2200      	movs	r2, #0
 80049e4:	2120      	movs	r1, #32
 80049e6:	4890      	ldr	r0, [pc, #576]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 80049e8:	f000 fd56 	bl	8005498 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80049ec:	2200      	movs	r2, #0
 80049ee:	2140      	movs	r1, #64	; 0x40
 80049f0:	488d      	ldr	r0, [pc, #564]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 80049f2:	f000 fd51 	bl	8005498 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80049f6:	2200      	movs	r2, #0
 80049f8:	2180      	movs	r1, #128	; 0x80
 80049fa:	488b      	ldr	r0, [pc, #556]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 80049fc:	f000 fd4c 	bl	8005498 <HAL_GPIO_WritePin>

     // Introduce a small delay for debounce (if necessary)
    // HAL_Delay(10);

     for (int turn = 0; turn < 4; turn++) {
 8004a00:	2300      	movs	r3, #0
 8004a02:	607b      	str	r3, [r7, #4]
 8004a04:	e0e3      	b.n	8004bce <EXTI2_TSC_IRQHandler+0x202>
       switch(turn) {
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d823      	bhi.n	8004a54 <EXTI2_TSC_IRQHandler+0x88>
 8004a0c:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <EXTI2_TSC_IRQHandler+0x48>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a25 	.word	0x08004a25
 8004a18:	08004a31 	.word	0x08004a31
 8004a1c:	08004a3d 	.word	0x08004a3d
 8004a20:	08004a49 	.word	0x08004a49
         case 0:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8004a24:	2201      	movs	r2, #1
 8004a26:	2110      	movs	r1, #16
 8004a28:	487f      	ldr	r0, [pc, #508]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 8004a2a:	f000 fd35 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 8004a2e:	e011      	b.n	8004a54 <EXTI2_TSC_IRQHandler+0x88>
         case 1:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8004a30:	2201      	movs	r2, #1
 8004a32:	2120      	movs	r1, #32
 8004a34:	487c      	ldr	r0, [pc, #496]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 8004a36:	f000 fd2f 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 8004a3a:	e00b      	b.n	8004a54 <EXTI2_TSC_IRQHandler+0x88>
         case 2:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	2140      	movs	r1, #64	; 0x40
 8004a40:	4879      	ldr	r0, [pc, #484]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 8004a42:	f000 fd29 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 8004a46:	e005      	b.n	8004a54 <EXTI2_TSC_IRQHandler+0x88>
         case 3:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8004a48:	2201      	movs	r2, #1
 8004a4a:	2180      	movs	r1, #128	; 0x80
 8004a4c:	4876      	ldr	r0, [pc, #472]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 8004a4e:	f000 fd23 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 8004a52:	bf00      	nop
       }

       // Check if any button in the current row is pressed
       if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) {
 8004a54:	2104      	movs	r1, #4
 8004a56:	4874      	ldr	r0, [pc, #464]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 8004a58:	f000 fd06 	bl	8005468 <HAL_GPIO_ReadPin>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 808c 	beq.w	8004b7c <EXTI2_TSC_IRQHandler+0x1b0>
         switch(turn) {
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	f200 80b6 	bhi.w	8004bd8 <EXTI2_TSC_IRQHandler+0x20c>
 8004a6c:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <EXTI2_TSC_IRQHandler+0xa8>)
 8004a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004a85 	.word	0x08004a85
 8004a78:	08004ac3 	.word	0x08004ac3
 8004a7c:	08004b01 	.word	0x08004b01
 8004a80:	08004b3f 	.word	0x08004b3f
           case 0:
        	   if(HAL_GetTick()-last_enter_time<200)
 8004a84:	f000 fa34 	bl	8004ef0 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	4b68      	ldr	r3, [pc, #416]	; (8004c2c <EXTI2_TSC_IRQHandler+0x260>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2bc7      	cmp	r3, #199	; 0xc7
 8004a92:	f240 80bf 	bls.w	8004c14 <EXTI2_TSC_IRQHandler+0x248>
        	                 	         	 		 return;
        	                 	         	 		 last_enter_time=HAL_GetTick();
 8004a96:	f000 fa2b 	bl	8004ef0 <HAL_GetTick>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	4a63      	ldr	r2, [pc, #396]	; (8004c2c <EXTI2_TSC_IRQHandler+0x260>)
 8004a9e:	6013      	str	r3, [r2, #0]
//up
        	                 	         	 		 //1=up 2=down 3=left 4 =right
if(direction==3||direction==4)direction=1;
 8004aa0:	4b63      	ldr	r3, [pc, #396]	; (8004c30 <EXTI2_TSC_IRQHandler+0x264>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d003      	beq.n	8004ab0 <EXTI2_TSC_IRQHandler+0xe4>
 8004aa8:	4b61      	ldr	r3, [pc, #388]	; (8004c30 <EXTI2_TSC_IRQHandler+0x264>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d102      	bne.n	8004ab6 <EXTI2_TSC_IRQHandler+0xea>
 8004ab0:	4b5f      	ldr	r3, [pc, #380]	; (8004c30 <EXTI2_TSC_IRQHandler+0x264>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
             HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8004ab6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004aba:	485e      	ldr	r0, [pc, #376]	; (8004c34 <EXTI2_TSC_IRQHandler+0x268>)
 8004abc:	f000 fd04 	bl	80054c8 <HAL_GPIO_TogglePin>
             break;
 8004ac0:	e05b      	b.n	8004b7a <EXTI2_TSC_IRQHandler+0x1ae>
           case 1:
        	   if(HAL_GetTick()-last_enter_time<200)
 8004ac2:	f000 fa15 	bl	8004ef0 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	4b58      	ldr	r3, [pc, #352]	; (8004c2c <EXTI2_TSC_IRQHandler+0x260>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2bc7      	cmp	r3, #199	; 0xc7
 8004ad0:	f240 80a2 	bls.w	8004c18 <EXTI2_TSC_IRQHandler+0x24c>
        	        	                 	         	 		 return;
        	        	                 	         	 		 last_enter_time=HAL_GetTick();
 8004ad4:	f000 fa0c 	bl	8004ef0 <HAL_GetTick>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	4a54      	ldr	r2, [pc, #336]	; (8004c2c <EXTI2_TSC_IRQHandler+0x260>)
 8004adc:	6013      	str	r3, [r2, #0]
        	   //down
        	   if(direction==3||direction==4)direction=2;
 8004ade:	4b54      	ldr	r3, [pc, #336]	; (8004c30 <EXTI2_TSC_IRQHandler+0x264>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d003      	beq.n	8004aee <EXTI2_TSC_IRQHandler+0x122>
 8004ae6:	4b52      	ldr	r3, [pc, #328]	; (8004c30 <EXTI2_TSC_IRQHandler+0x264>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d102      	bne.n	8004af4 <EXTI2_TSC_IRQHandler+0x128>
 8004aee:	4b50      	ldr	r3, [pc, #320]	; (8004c30 <EXTI2_TSC_IRQHandler+0x264>)
 8004af0:	2202      	movs	r2, #2
 8004af2:	601a      	str	r2, [r3, #0]

             HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8004af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004af8:	484e      	ldr	r0, [pc, #312]	; (8004c34 <EXTI2_TSC_IRQHandler+0x268>)
 8004afa:	f000 fce5 	bl	80054c8 <HAL_GPIO_TogglePin>
             break;
 8004afe:	e03c      	b.n	8004b7a <EXTI2_TSC_IRQHandler+0x1ae>
           case 2:
        	   if(HAL_GetTick()-last_enter_time<200)
 8004b00:	f000 f9f6 	bl	8004ef0 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b49      	ldr	r3, [pc, #292]	; (8004c2c <EXTI2_TSC_IRQHandler+0x260>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2bc7      	cmp	r3, #199	; 0xc7
 8004b0e:	f240 8085 	bls.w	8004c1c <EXTI2_TSC_IRQHandler+0x250>
        	        	                 	         	 		 return;
        	        	                 	         	 		 last_enter_time=HAL_GetTick();
 8004b12:	f000 f9ed 	bl	8004ef0 <HAL_GetTick>
 8004b16:	4603      	mov	r3, r0
 8004b18:	4a44      	ldr	r2, [pc, #272]	; (8004c2c <EXTI2_TSC_IRQHandler+0x260>)
 8004b1a:	6013      	str	r3, [r2, #0]
        	   //left
        	   if(direction==1||direction==2)direction=3;
 8004b1c:	4b44      	ldr	r3, [pc, #272]	; (8004c30 <EXTI2_TSC_IRQHandler+0x264>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d003      	beq.n	8004b2c <EXTI2_TSC_IRQHandler+0x160>
 8004b24:	4b42      	ldr	r3, [pc, #264]	; (8004c30 <EXTI2_TSC_IRQHandler+0x264>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d102      	bne.n	8004b32 <EXTI2_TSC_IRQHandler+0x166>
 8004b2c:	4b40      	ldr	r3, [pc, #256]	; (8004c30 <EXTI2_TSC_IRQHandler+0x264>)
 8004b2e:	2203      	movs	r2, #3
 8004b30:	601a      	str	r2, [r3, #0]

             HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 8004b32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b36:	483f      	ldr	r0, [pc, #252]	; (8004c34 <EXTI2_TSC_IRQHandler+0x268>)
 8004b38:	f000 fcc6 	bl	80054c8 <HAL_GPIO_TogglePin>
             break;
 8004b3c:	e01d      	b.n	8004b7a <EXTI2_TSC_IRQHandler+0x1ae>
           case 3:   if(HAL_GetTick()-last_enter_time<200)
 8004b3e:	f000 f9d7 	bl	8004ef0 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	4b39      	ldr	r3, [pc, #228]	; (8004c2c <EXTI2_TSC_IRQHandler+0x260>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2bc7      	cmp	r3, #199	; 0xc7
 8004b4c:	d968      	bls.n	8004c20 <EXTI2_TSC_IRQHandler+0x254>
    	 		 return;
    	 		 last_enter_time=HAL_GetTick();
 8004b4e:	f000 f9cf 	bl	8004ef0 <HAL_GetTick>
 8004b52:	4603      	mov	r3, r0
 8004b54:	4a35      	ldr	r2, [pc, #212]	; (8004c2c <EXTI2_TSC_IRQHandler+0x260>)
 8004b56:	6013      	str	r3, [r2, #0]
        	   if(direction==1||direction==2)direction=4;
 8004b58:	4b35      	ldr	r3, [pc, #212]	; (8004c30 <EXTI2_TSC_IRQHandler+0x264>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d003      	beq.n	8004b68 <EXTI2_TSC_IRQHandler+0x19c>
 8004b60:	4b33      	ldr	r3, [pc, #204]	; (8004c30 <EXTI2_TSC_IRQHandler+0x264>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d102      	bne.n	8004b6e <EXTI2_TSC_IRQHandler+0x1a2>
 8004b68:	4b31      	ldr	r3, [pc, #196]	; (8004c30 <EXTI2_TSC_IRQHandler+0x264>)
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	601a      	str	r2, [r3, #0]

             HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8004b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b72:	4830      	ldr	r0, [pc, #192]	; (8004c34 <EXTI2_TSC_IRQHandler+0x268>)
 8004b74:	f000 fca8 	bl	80054c8 <HAL_GPIO_TogglePin>
             break;
 8004b78:	bf00      	nop
         }
         // Add a delay or handle the button press accordingly
         break; // Exit the loop if a button press is detected
 8004b7a:	e02d      	b.n	8004bd8 <EXTI2_TSC_IRQHandler+0x20c>
       }

       // Reset the row pin after checking
       switch(turn) {
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d822      	bhi.n	8004bc8 <EXTI2_TSC_IRQHandler+0x1fc>
 8004b82:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <EXTI2_TSC_IRQHandler+0x1bc>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004b99 	.word	0x08004b99
 8004b8c:	08004ba5 	.word	0x08004ba5
 8004b90:	08004bb1 	.word	0x08004bb1
 8004b94:	08004bbd 	.word	0x08004bbd
         case 0:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2110      	movs	r1, #16
 8004b9c:	4822      	ldr	r0, [pc, #136]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 8004b9e:	f000 fc7b 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 8004ba2:	e011      	b.n	8004bc8 <EXTI2_TSC_IRQHandler+0x1fc>
         case 1:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2120      	movs	r1, #32
 8004ba8:	481f      	ldr	r0, [pc, #124]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 8004baa:	f000 fc75 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 8004bae:	e00b      	b.n	8004bc8 <EXTI2_TSC_IRQHandler+0x1fc>
         case 2:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2140      	movs	r1, #64	; 0x40
 8004bb4:	481c      	ldr	r0, [pc, #112]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 8004bb6:	f000 fc6f 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 8004bba:	e005      	b.n	8004bc8 <EXTI2_TSC_IRQHandler+0x1fc>
         case 3:
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2180      	movs	r1, #128	; 0x80
 8004bc0:	4819      	ldr	r0, [pc, #100]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 8004bc2:	f000 fc69 	bl	8005498 <HAL_GPIO_WritePin>
           break;
 8004bc6:	bf00      	nop
     for (int turn = 0; turn < 4; turn++) {
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	607b      	str	r3, [r7, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	f77f af18 	ble.w	8004a06 <EXTI2_TSC_IRQHandler+0x3a>
 8004bd6:	e000      	b.n	8004bda <EXTI2_TSC_IRQHandler+0x20e>
         break; // Exit the loop if a button press is detected
 8004bd8:	bf00      	nop
       }
     }

     // Ensure all rows are reset to high state after processing
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8004bda:	2201      	movs	r2, #1
 8004bdc:	2110      	movs	r1, #16
 8004bde:	4812      	ldr	r0, [pc, #72]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 8004be0:	f000 fc5a 	bl	8005498 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8004be4:	2201      	movs	r2, #1
 8004be6:	2120      	movs	r1, #32
 8004be8:	480f      	ldr	r0, [pc, #60]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 8004bea:	f000 fc55 	bl	8005498 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8004bee:	2201      	movs	r2, #1
 8004bf0:	2140      	movs	r1, #64	; 0x40
 8004bf2:	480d      	ldr	r0, [pc, #52]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 8004bf4:	f000 fc50 	bl	8005498 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	2180      	movs	r1, #128	; 0x80
 8004bfc:	480a      	ldr	r0, [pc, #40]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 8004bfe:	f000 fc4b 	bl	8005498 <HAL_GPIO_WritePin>

     // Wait for the button to be released (debouncing)
     while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2));
 8004c02:	bf00      	nop
 8004c04:	2104      	movs	r1, #4
 8004c06:	4808      	ldr	r0, [pc, #32]	; (8004c28 <EXTI2_TSC_IRQHandler+0x25c>)
 8004c08:	f000 fc2e 	bl	8005468 <HAL_GPIO_ReadPin>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f8      	bne.n	8004c04 <EXTI2_TSC_IRQHandler+0x238>
 8004c12:	e006      	b.n	8004c22 <EXTI2_TSC_IRQHandler+0x256>
        	                 	         	 		 return;
 8004c14:	bf00      	nop
 8004c16:	e004      	b.n	8004c22 <EXTI2_TSC_IRQHandler+0x256>
        	        	                 	         	 		 return;
 8004c18:	bf00      	nop
 8004c1a:	e002      	b.n	8004c22 <EXTI2_TSC_IRQHandler+0x256>
        	        	                 	         	 		 return;
 8004c1c:	bf00      	nop
 8004c1e:	e000      	b.n	8004c22 <EXTI2_TSC_IRQHandler+0x256>
    	 		 return;
 8004c20:	bf00      	nop

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	48000c00 	.word	0x48000c00
 8004c2c:	20000740 	.word	0x20000740
 8004c30:	20000018 	.word	0x20000018
 8004c34:	48001000 	.word	0x48001000

08004c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  return 1;
 8004c3c:	2301      	movs	r3, #1
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <_kill>:

int _kill(int pid, int sig)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004c52:	f004 fc3b 	bl	80094cc <__errno>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2216      	movs	r2, #22
 8004c5a:	601a      	str	r2, [r3, #0]
  return -1;
 8004c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <_exit>:

void _exit (int status)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004c70:	f04f 31ff 	mov.w	r1, #4294967295
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ffe7 	bl	8004c48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004c7a:	e7fe      	b.n	8004c7a <_exit+0x12>

08004c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e00a      	b.n	8004ca4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004c8e:	f3af 8000 	nop.w
 8004c92:	4601      	mov	r1, r0
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	60ba      	str	r2, [r7, #8]
 8004c9a:	b2ca      	uxtb	r2, r1
 8004c9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	dbf0      	blt.n	8004c8e <_read+0x12>
  }

  return len;
 8004cac:	687b      	ldr	r3, [r7, #4]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b086      	sub	sp, #24
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	e009      	b.n	8004cdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	60ba      	str	r2, [r7, #8]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	dbf1      	blt.n	8004cc8 <_write+0x12>
  }
  return len;
 8004ce4:	687b      	ldr	r3, [r7, #4]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <_close>:

int _close(int file)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d16:	605a      	str	r2, [r3, #4]
  return 0;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <_isatty>:

int _isatty(int file)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004d2e:	2301      	movs	r3, #1
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d60:	4a14      	ldr	r2, [pc, #80]	; (8004db4 <_sbrk+0x5c>)
 8004d62:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <_sbrk+0x60>)
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d6c:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <_sbrk+0x64>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d102      	bne.n	8004d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d74:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <_sbrk+0x64>)
 8004d76:	4a12      	ldr	r2, [pc, #72]	; (8004dc0 <_sbrk+0x68>)
 8004d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d7a:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <_sbrk+0x64>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4413      	add	r3, r2
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d207      	bcs.n	8004d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d88:	f004 fba0 	bl	80094cc <__errno>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	220c      	movs	r2, #12
 8004d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d92:	f04f 33ff 	mov.w	r3, #4294967295
 8004d96:	e009      	b.n	8004dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d98:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <_sbrk+0x64>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d9e:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <_sbrk+0x64>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4413      	add	r3, r2
 8004da6:	4a05      	ldr	r2, [pc, #20]	; (8004dbc <_sbrk+0x64>)
 8004da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004daa:	68fb      	ldr	r3, [r7, #12]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	2000a000 	.word	0x2000a000
 8004db8:	00000400 	.word	0x00000400
 8004dbc:	20000758 	.word	0x20000758
 8004dc0:	20000770 	.word	0x20000770

08004dc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <SystemInit+0x20>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dce:	4a05      	ldr	r2, [pc, #20]	; (8004de4 <SystemInit+0x20>)
 8004dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	e000ed00 	.word	0xe000ed00

08004de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e20 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004dec:	f7ff ffea 	bl	8004dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004df0:	480c      	ldr	r0, [pc, #48]	; (8004e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8004df2:	490d      	ldr	r1, [pc, #52]	; (8004e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004df4:	4a0d      	ldr	r2, [pc, #52]	; (8004e2c <LoopForever+0xe>)
  movs r3, #0
 8004df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004df8:	e002      	b.n	8004e00 <LoopCopyDataInit>

08004dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dfe:	3304      	adds	r3, #4

08004e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e04:	d3f9      	bcc.n	8004dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e06:	4a0a      	ldr	r2, [pc, #40]	; (8004e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004e08:	4c0a      	ldr	r4, [pc, #40]	; (8004e34 <LoopForever+0x16>)
  movs r3, #0
 8004e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e0c:	e001      	b.n	8004e12 <LoopFillZerobss>

08004e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e10:	3204      	adds	r2, #4

08004e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e14:	d3fb      	bcc.n	8004e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e16:	f004 fb5f 	bl	80094d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004e1a:	f7fb feb7 	bl	8000b8c <main>

08004e1e <LoopForever>:

LoopForever:
    b LoopForever
 8004e1e:	e7fe      	b.n	8004e1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004e20:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e28:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8004e2c:	0800ae3c 	.word	0x0800ae3c
  ldr r2, =_sbss
 8004e30:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8004e34:	20000770 	.word	0x20000770

08004e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004e38:	e7fe      	b.n	8004e38 <ADC1_2_IRQHandler>
	...

08004e3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e40:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <HAL_Init+0x28>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a07      	ldr	r2, [pc, #28]	; (8004e64 <HAL_Init+0x28>)
 8004e46:	f043 0310 	orr.w	r3, r3, #16
 8004e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e4c:	2003      	movs	r0, #3
 8004e4e:	f000 f94f 	bl	80050f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e52:	2000      	movs	r0, #0
 8004e54:	f000 f808 	bl	8004e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e58:	f7fe fc1c 	bl	8003694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40022000 	.word	0x40022000

08004e68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e70:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <HAL_InitTick+0x54>)
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <HAL_InitTick+0x58>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f967 	bl	800515a <HAL_SYSTICK_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e00e      	b.n	8004eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b0f      	cmp	r3, #15
 8004e9a:	d80a      	bhi.n	8004eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea4:	f000 f92f 	bl	8005106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ea8:	4a06      	ldr	r2, [pc, #24]	; (8004ec4 <HAL_InitTick+0x5c>)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e000      	b.n	8004eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000064 	.word	0x20000064
 8004ec0:	2000006c 	.word	0x2000006c
 8004ec4:	20000068 	.word	0x20000068

08004ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ecc:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <HAL_IncTick+0x20>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4b06      	ldr	r3, [pc, #24]	; (8004eec <HAL_IncTick+0x24>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	4a04      	ldr	r2, [pc, #16]	; (8004eec <HAL_IncTick+0x24>)
 8004eda:	6013      	str	r3, [r2, #0]
}
 8004edc:	bf00      	nop
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	2000006c 	.word	0x2000006c
 8004eec:	2000075c 	.word	0x2000075c

08004ef0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  return uwTick;  
 8004ef4:	4b03      	ldr	r3, [pc, #12]	; (8004f04 <HAL_GetTick+0x14>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	2000075c 	.word	0x2000075c

08004f08 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f10:	f7ff ffee 	bl	8004ef0 <HAL_GetTick>
 8004f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d005      	beq.n	8004f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f22:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <HAL_Delay+0x44>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004f2e:	bf00      	nop
 8004f30:	f7ff ffde 	bl	8004ef0 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d8f7      	bhi.n	8004f30 <HAL_Delay+0x28>
  {
  }
}
 8004f40:	bf00      	nop
 8004f42:	bf00      	nop
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	2000006c 	.word	0x2000006c

08004f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f60:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <__NVIC_SetPriorityGrouping+0x44>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f82:	4a04      	ldr	r2, [pc, #16]	; (8004f94 <__NVIC_SetPriorityGrouping+0x44>)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	60d3      	str	r3, [r2, #12]
}
 8004f88:	bf00      	nop
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	e000ed00 	.word	0xe000ed00

08004f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f9c:	4b04      	ldr	r3, [pc, #16]	; (8004fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	0a1b      	lsrs	r3, r3, #8
 8004fa2:	f003 0307 	and.w	r3, r3, #7
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	e000ed00 	.word	0xe000ed00

08004fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	db0b      	blt.n	8004fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	f003 021f 	and.w	r2, r3, #31
 8004fcc:	4907      	ldr	r1, [pc, #28]	; (8004fec <__NVIC_EnableIRQ+0x38>)
 8004fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8004fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	e000e100 	.word	0xe000e100

08004ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	6039      	str	r1, [r7, #0]
 8004ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005000:	2b00      	cmp	r3, #0
 8005002:	db0a      	blt.n	800501a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	b2da      	uxtb	r2, r3
 8005008:	490c      	ldr	r1, [pc, #48]	; (800503c <__NVIC_SetPriority+0x4c>)
 800500a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800500e:	0112      	lsls	r2, r2, #4
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	440b      	add	r3, r1
 8005014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005018:	e00a      	b.n	8005030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	b2da      	uxtb	r2, r3
 800501e:	4908      	ldr	r1, [pc, #32]	; (8005040 <__NVIC_SetPriority+0x50>)
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	3b04      	subs	r3, #4
 8005028:	0112      	lsls	r2, r2, #4
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	440b      	add	r3, r1
 800502e:	761a      	strb	r2, [r3, #24]
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	e000e100 	.word	0xe000e100
 8005040:	e000ed00 	.word	0xe000ed00

08005044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005044:	b480      	push	{r7}
 8005046:	b089      	sub	sp, #36	; 0x24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f1c3 0307 	rsb	r3, r3, #7
 800505e:	2b04      	cmp	r3, #4
 8005060:	bf28      	it	cs
 8005062:	2304      	movcs	r3, #4
 8005064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	3304      	adds	r3, #4
 800506a:	2b06      	cmp	r3, #6
 800506c:	d902      	bls.n	8005074 <NVIC_EncodePriority+0x30>
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	3b03      	subs	r3, #3
 8005072:	e000      	b.n	8005076 <NVIC_EncodePriority+0x32>
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005078:	f04f 32ff 	mov.w	r2, #4294967295
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	43da      	mvns	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	401a      	ands	r2, r3
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800508c:	f04f 31ff 	mov.w	r1, #4294967295
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	fa01 f303 	lsl.w	r3, r1, r3
 8005096:	43d9      	mvns	r1, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800509c:	4313      	orrs	r3, r2
         );
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3724      	adds	r7, #36	; 0x24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
	...

080050ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050bc:	d301      	bcc.n	80050c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050be:	2301      	movs	r3, #1
 80050c0:	e00f      	b.n	80050e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050c2:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <SysTick_Config+0x40>)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050ca:	210f      	movs	r1, #15
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	f7ff ff8e 	bl	8004ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050d4:	4b05      	ldr	r3, [pc, #20]	; (80050ec <SysTick_Config+0x40>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050da:	4b04      	ldr	r3, [pc, #16]	; (80050ec <SysTick_Config+0x40>)
 80050dc:	2207      	movs	r2, #7
 80050de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	e000e010 	.word	0xe000e010

080050f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7ff ff29 	bl	8004f50 <__NVIC_SetPriorityGrouping>
}
 80050fe:	bf00      	nop
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b086      	sub	sp, #24
 800510a:	af00      	add	r7, sp, #0
 800510c:	4603      	mov	r3, r0
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	607a      	str	r2, [r7, #4]
 8005112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005118:	f7ff ff3e 	bl	8004f98 <__NVIC_GetPriorityGrouping>
 800511c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	6978      	ldr	r0, [r7, #20]
 8005124:	f7ff ff8e 	bl	8005044 <NVIC_EncodePriority>
 8005128:	4602      	mov	r2, r0
 800512a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800512e:	4611      	mov	r1, r2
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff ff5d 	bl	8004ff0 <__NVIC_SetPriority>
}
 8005136:	bf00      	nop
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
 8005144:	4603      	mov	r3, r0
 8005146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff ff31 	bl	8004fb4 <__NVIC_EnableIRQ>
}
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b082      	sub	sp, #8
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff ffa2 	bl	80050ac <SysTick_Config>
 8005168:	4603      	mov	r3, r0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005182:	e154      	b.n	800542e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	2101      	movs	r1, #1
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	fa01 f303 	lsl.w	r3, r1, r3
 8005190:	4013      	ands	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 8146 	beq.w	8005428 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d005      	beq.n	80051b4 <HAL_GPIO_Init+0x40>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f003 0303 	and.w	r3, r3, #3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d130      	bne.n	8005216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	2203      	movs	r2, #3
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	43db      	mvns	r3, r3
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4013      	ands	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051ea:	2201      	movs	r2, #1
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	43db      	mvns	r3, r3
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4013      	ands	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	f003 0201 	and.w	r2, r3, #1
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b03      	cmp	r3, #3
 8005220:	d017      	beq.n	8005252 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	2203      	movs	r2, #3
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	43db      	mvns	r3, r3
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4013      	ands	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d123      	bne.n	80052a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	08da      	lsrs	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3208      	adds	r2, #8
 8005266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800526a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	220f      	movs	r2, #15
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	43db      	mvns	r3, r3
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4013      	ands	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	691a      	ldr	r2, [r3, #16]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	08da      	lsrs	r2, r3, #3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3208      	adds	r2, #8
 80052a0:	6939      	ldr	r1, [r7, #16]
 80052a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	2203      	movs	r2, #3
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	43db      	mvns	r3, r3
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4013      	ands	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f003 0203 	and.w	r2, r3, #3
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	fa02 f303 	lsl.w	r3, r2, r3
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 80a0 	beq.w	8005428 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052e8:	4b58      	ldr	r3, [pc, #352]	; (800544c <HAL_GPIO_Init+0x2d8>)
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	4a57      	ldr	r2, [pc, #348]	; (800544c <HAL_GPIO_Init+0x2d8>)
 80052ee:	f043 0301 	orr.w	r3, r3, #1
 80052f2:	6193      	str	r3, [r2, #24]
 80052f4:	4b55      	ldr	r3, [pc, #340]	; (800544c <HAL_GPIO_Init+0x2d8>)
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005300:	4a53      	ldr	r2, [pc, #332]	; (8005450 <HAL_GPIO_Init+0x2dc>)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	089b      	lsrs	r3, r3, #2
 8005306:	3302      	adds	r3, #2
 8005308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800530c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	220f      	movs	r2, #15
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	43db      	mvns	r3, r3
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	4013      	ands	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800532a:	d019      	beq.n	8005360 <HAL_GPIO_Init+0x1ec>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a49      	ldr	r2, [pc, #292]	; (8005454 <HAL_GPIO_Init+0x2e0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <HAL_GPIO_Init+0x1e8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a48      	ldr	r2, [pc, #288]	; (8005458 <HAL_GPIO_Init+0x2e4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00d      	beq.n	8005358 <HAL_GPIO_Init+0x1e4>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a47      	ldr	r2, [pc, #284]	; (800545c <HAL_GPIO_Init+0x2e8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <HAL_GPIO_Init+0x1e0>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a46      	ldr	r2, [pc, #280]	; (8005460 <HAL_GPIO_Init+0x2ec>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d101      	bne.n	8005350 <HAL_GPIO_Init+0x1dc>
 800534c:	2304      	movs	r3, #4
 800534e:	e008      	b.n	8005362 <HAL_GPIO_Init+0x1ee>
 8005350:	2305      	movs	r3, #5
 8005352:	e006      	b.n	8005362 <HAL_GPIO_Init+0x1ee>
 8005354:	2303      	movs	r3, #3
 8005356:	e004      	b.n	8005362 <HAL_GPIO_Init+0x1ee>
 8005358:	2302      	movs	r3, #2
 800535a:	e002      	b.n	8005362 <HAL_GPIO_Init+0x1ee>
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <HAL_GPIO_Init+0x1ee>
 8005360:	2300      	movs	r3, #0
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	f002 0203 	and.w	r2, r2, #3
 8005368:	0092      	lsls	r2, r2, #2
 800536a:	4093      	lsls	r3, r2
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005372:	4937      	ldr	r1, [pc, #220]	; (8005450 <HAL_GPIO_Init+0x2dc>)
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	089b      	lsrs	r3, r3, #2
 8005378:	3302      	adds	r3, #2
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005380:	4b38      	ldr	r3, [pc, #224]	; (8005464 <HAL_GPIO_Init+0x2f0>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	43db      	mvns	r3, r3
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4013      	ands	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80053a4:	4a2f      	ldr	r2, [pc, #188]	; (8005464 <HAL_GPIO_Init+0x2f0>)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053aa:	4b2e      	ldr	r3, [pc, #184]	; (8005464 <HAL_GPIO_Init+0x2f0>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	43db      	mvns	r3, r3
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4013      	ands	r3, r2
 80053b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80053ce:	4a25      	ldr	r2, [pc, #148]	; (8005464 <HAL_GPIO_Init+0x2f0>)
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053d4:	4b23      	ldr	r3, [pc, #140]	; (8005464 <HAL_GPIO_Init+0x2f0>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	43db      	mvns	r3, r3
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4013      	ands	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80053f8:	4a1a      	ldr	r2, [pc, #104]	; (8005464 <HAL_GPIO_Init+0x2f0>)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053fe:	4b19      	ldr	r3, [pc, #100]	; (8005464 <HAL_GPIO_Init+0x2f0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	43db      	mvns	r3, r3
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4013      	ands	r3, r2
 800540c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005422:	4a10      	ldr	r2, [pc, #64]	; (8005464 <HAL_GPIO_Init+0x2f0>)
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	3301      	adds	r3, #1
 800542c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	fa22 f303 	lsr.w	r3, r2, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	f47f aea3 	bne.w	8005184 <HAL_GPIO_Init+0x10>
  }
}
 800543e:	bf00      	nop
 8005440:	bf00      	nop
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	40021000 	.word	0x40021000
 8005450:	40010000 	.word	0x40010000
 8005454:	48000400 	.word	0x48000400
 8005458:	48000800 	.word	0x48000800
 800545c:	48000c00 	.word	0x48000c00
 8005460:	48001000 	.word	0x48001000
 8005464:	40010400 	.word	0x40010400

08005468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	887b      	ldrh	r3, [r7, #2]
 800547a:	4013      	ands	r3, r2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005480:	2301      	movs	r3, #1
 8005482:	73fb      	strb	r3, [r7, #15]
 8005484:	e001      	b.n	800548a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005486:	2300      	movs	r3, #0
 8005488:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800548a:	7bfb      	ldrb	r3, [r7, #15]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	807b      	strh	r3, [r7, #2]
 80054a4:	4613      	mov	r3, r2
 80054a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054a8:	787b      	ldrb	r3, [r7, #1]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054ae:	887a      	ldrh	r2, [r7, #2]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054b4:	e002      	b.n	80054bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054b6:	887a      	ldrh	r2, [r7, #2]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054da:	887a      	ldrh	r2, [r7, #2]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4013      	ands	r3, r2
 80054e0:	041a      	lsls	r2, r3, #16
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	43d9      	mvns	r1, r3
 80054e6:	887b      	ldrh	r3, [r7, #2]
 80054e8:	400b      	ands	r3, r1
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	619a      	str	r2, [r3, #24]
}
 80054f0:	bf00      	nop
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	4603      	mov	r3, r0
 8005504:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005506:	4b08      	ldr	r3, [pc, #32]	; (8005528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	88fb      	ldrh	r3, [r7, #6]
 800550c:	4013      	ands	r3, r2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d006      	beq.n	8005520 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005512:	4a05      	ldr	r2, [pc, #20]	; (8005528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005514:	88fb      	ldrh	r3, [r7, #6]
 8005516:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005518:	88fb      	ldrh	r3, [r7, #6]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 f806 	bl	800552c <HAL_GPIO_EXTI_Callback>
  }
}
 8005520:	bf00      	nop
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40010400 	.word	0x40010400

0800552c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e081      	b.n	8005658 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d106      	bne.n	800556e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7fe f8b7 	bl	80036dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2224      	movs	r2, #36	; 0x24
 8005572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0201 	bic.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005592:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689a      	ldr	r2, [r3, #8]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d107      	bne.n	80055bc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055b8:	609a      	str	r2, [r3, #8]
 80055ba:	e006      	b.n	80055ca <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80055c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d104      	bne.n	80055dc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055da:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80055ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ee:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69d9      	ldr	r1, [r3, #28]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1a      	ldr	r2, [r3, #32]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0201 	orr.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b20      	cmp	r3, #32
 8005674:	d138      	bne.n	80056e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005680:	2302      	movs	r3, #2
 8005682:	e032      	b.n	80056ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2224      	movs	r2, #36	; 0x24
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0201 	bic.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6819      	ldr	r1, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e000      	b.n	80056ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056e8:	2302      	movs	r3, #2
  }
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b085      	sub	sp, #20
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b20      	cmp	r3, #32
 800570a:	d139      	bne.n	8005780 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005716:	2302      	movs	r3, #2
 8005718:	e033      	b.n	8005782 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2224      	movs	r2, #36	; 0x24
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0201 	bic.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005748:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	021b      	lsls	r3, r3, #8
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	e000      	b.n	8005782 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005780:	2302      	movs	r3, #2
  }
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800578e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005790:	b08b      	sub	sp, #44	; 0x2c
 8005792:	af06      	add	r7, sp, #24
 8005794:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e0c4      	b.n	800592a <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d106      	bne.n	80057ba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7fe f8d3 	bl	8003960 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2203      	movs	r2, #3
 80057be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f003 fe43 	bl	8009452 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057cc:	2300      	movs	r3, #0
 80057ce:	73fb      	strb	r3, [r7, #15]
 80057d0:	e040      	b.n	8005854 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	440b      	add	r3, r1
 80057e2:	3301      	adds	r3, #1
 80057e4:	2201      	movs	r2, #1
 80057e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	440b      	add	r3, r1
 80057f8:	7bfa      	ldrb	r2, [r7, #15]
 80057fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	440b      	add	r3, r1
 800580c:	3303      	adds	r3, #3
 800580e:	2200      	movs	r2, #0
 8005810:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005812:	7bfa      	ldrb	r2, [r7, #15]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	440b      	add	r3, r1
 8005820:	3338      	adds	r3, #56	; 0x38
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005826:	7bfa      	ldrb	r2, [r7, #15]
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	440b      	add	r3, r1
 8005834:	333c      	adds	r3, #60	; 0x3c
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800583a:	7bfa      	ldrb	r2, [r7, #15]
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	440b      	add	r3, r1
 8005848:	3340      	adds	r3, #64	; 0x40
 800584a:	2200      	movs	r2, #0
 800584c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	3301      	adds	r3, #1
 8005852:	73fb      	strb	r3, [r7, #15]
 8005854:	7bfa      	ldrb	r2, [r7, #15]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	d3b9      	bcc.n	80057d2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800585e:	2300      	movs	r3, #0
 8005860:	73fb      	strb	r3, [r7, #15]
 8005862:	e044      	b.n	80058ee <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005864:	7bfa      	ldrb	r2, [r7, #15]
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	4613      	mov	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	440b      	add	r3, r1
 8005872:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005876:	2200      	movs	r2, #0
 8005878:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800587a:	7bfa      	ldrb	r2, [r7, #15]
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	4613      	mov	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	440b      	add	r3, r1
 8005888:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800588c:	7bfa      	ldrb	r2, [r7, #15]
 800588e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005890:	7bfa      	ldrb	r2, [r7, #15]
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	440b      	add	r3, r1
 800589e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80058a2:	2200      	movs	r2, #0
 80058a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058a6:	7bfa      	ldrb	r2, [r7, #15]
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	440b      	add	r3, r1
 80058b4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80058bc:	7bfa      	ldrb	r2, [r7, #15]
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	440b      	add	r3, r1
 80058ca:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80058d2:	7bfa      	ldrb	r2, [r7, #15]
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	440b      	add	r3, r1
 80058e0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	3301      	adds	r3, #1
 80058ec:	73fb      	strb	r3, [r7, #15]
 80058ee:	7bfa      	ldrb	r2, [r7, #15]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d3b5      	bcc.n	8005864 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	603b      	str	r3, [r7, #0]
 80058fe:	687e      	ldr	r6, [r7, #4]
 8005900:	466d      	mov	r5, sp
 8005902:	f106 0410 	add.w	r4, r6, #16
 8005906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	602b      	str	r3, [r5, #0]
 800590e:	1d33      	adds	r3, r6, #4
 8005910:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005912:	6838      	ldr	r0, [r7, #0]
 8005914:	f003 fdb8 	bl	8009488 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005934 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800593a:	af00      	add	r7, sp, #0
 800593c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005940:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005944:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800594a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d102      	bne.n	800595a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	f001 b823 	b.w	80069a0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800595a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800595e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 817d 	beq.w	8005c6a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005970:	4bbc      	ldr	r3, [pc, #752]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f003 030c 	and.w	r3, r3, #12
 8005978:	2b04      	cmp	r3, #4
 800597a:	d00c      	beq.n	8005996 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800597c:	4bb9      	ldr	r3, [pc, #740]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f003 030c 	and.w	r3, r3, #12
 8005984:	2b08      	cmp	r3, #8
 8005986:	d15c      	bne.n	8005a42 <HAL_RCC_OscConfig+0x10e>
 8005988:	4bb6      	ldr	r3, [pc, #728]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005994:	d155      	bne.n	8005a42 <HAL_RCC_OscConfig+0x10e>
 8005996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800599a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80059a2:	fa93 f3a3 	rbit	r3, r3
 80059a6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80059aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ae:	fab3 f383 	clz	r3, r3
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	095b      	lsrs	r3, r3, #5
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f043 0301 	orr.w	r3, r3, #1
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d102      	bne.n	80059c8 <HAL_RCC_OscConfig+0x94>
 80059c2:	4ba8      	ldr	r3, [pc, #672]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	e015      	b.n	80059f4 <HAL_RCC_OscConfig+0xc0>
 80059c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059cc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80059d4:	fa93 f3a3 	rbit	r3, r3
 80059d8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80059dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059e0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80059e4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80059e8:	fa93 f3a3 	rbit	r3, r3
 80059ec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80059f0:	4b9c      	ldr	r3, [pc, #624]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059f8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80059fc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005a00:	fa92 f2a2 	rbit	r2, r2
 8005a04:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005a08:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005a0c:	fab2 f282 	clz	r2, r2
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	f042 0220 	orr.w	r2, r2, #32
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	f002 021f 	and.w	r2, r2, #31
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 811f 	beq.w	8005c68 <HAL_RCC_OscConfig+0x334>
 8005a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f040 8116 	bne.w	8005c68 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f000 bfaf 	b.w	80069a0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a52:	d106      	bne.n	8005a62 <HAL_RCC_OscConfig+0x12e>
 8005a54:	4b83      	ldr	r3, [pc, #524]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a82      	ldr	r2, [pc, #520]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	e036      	b.n	8005ad0 <HAL_RCC_OscConfig+0x19c>
 8005a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10c      	bne.n	8005a8c <HAL_RCC_OscConfig+0x158>
 8005a72:	4b7c      	ldr	r3, [pc, #496]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a7b      	ldr	r2, [pc, #492]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	4b79      	ldr	r3, [pc, #484]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a78      	ldr	r2, [pc, #480]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	e021      	b.n	8005ad0 <HAL_RCC_OscConfig+0x19c>
 8005a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a9c:	d10c      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x184>
 8005a9e:	4b71      	ldr	r3, [pc, #452]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a70      	ldr	r2, [pc, #448]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	4b6e      	ldr	r3, [pc, #440]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a6d      	ldr	r2, [pc, #436]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e00b      	b.n	8005ad0 <HAL_RCC_OscConfig+0x19c>
 8005ab8:	4b6a      	ldr	r3, [pc, #424]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a69      	ldr	r2, [pc, #420]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	4b67      	ldr	r3, [pc, #412]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a66      	ldr	r2, [pc, #408]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ace:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ad0:	4b64      	ldr	r3, [pc, #400]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	f023 020f 	bic.w	r2, r3, #15
 8005ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005adc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	495f      	ldr	r1, [pc, #380]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d059      	beq.n	8005bae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afa:	f7ff f9f9 	bl	8004ef0 <HAL_GetTick>
 8005afe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b02:	e00a      	b.n	8005b1a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b04:	f7ff f9f4 	bl	8004ef0 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b64      	cmp	r3, #100	; 0x64
 8005b12:	d902      	bls.n	8005b1a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	f000 bf43 	b.w	80069a0 <HAL_RCC_OscConfig+0x106c>
 8005b1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b1e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b22:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005b26:	fa93 f3a3 	rbit	r3, r3
 8005b2a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005b2e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b32:	fab3 f383 	clz	r3, r3
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	095b      	lsrs	r3, r3, #5
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	f043 0301 	orr.w	r3, r3, #1
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d102      	bne.n	8005b4c <HAL_RCC_OscConfig+0x218>
 8005b46:	4b47      	ldr	r3, [pc, #284]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	e015      	b.n	8005b78 <HAL_RCC_OscConfig+0x244>
 8005b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b50:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b54:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005b58:	fa93 f3a3 	rbit	r3, r3
 8005b5c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005b60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b64:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005b68:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005b6c:	fa93 f3a3 	rbit	r3, r3
 8005b70:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005b74:	4b3b      	ldr	r3, [pc, #236]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b7c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005b80:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005b84:	fa92 f2a2 	rbit	r2, r2
 8005b88:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005b8c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005b90:	fab2 f282 	clz	r2, r2
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	f042 0220 	orr.w	r2, r2, #32
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	f002 021f 	and.w	r2, r2, #31
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0ab      	beq.n	8005b04 <HAL_RCC_OscConfig+0x1d0>
 8005bac:	e05d      	b.n	8005c6a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bae:	f7ff f99f 	bl	8004ef0 <HAL_GetTick>
 8005bb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bb6:	e00a      	b.n	8005bce <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bb8:	f7ff f99a 	bl	8004ef0 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b64      	cmp	r3, #100	; 0x64
 8005bc6:	d902      	bls.n	8005bce <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	f000 bee9 	b.w	80069a0 <HAL_RCC_OscConfig+0x106c>
 8005bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bd2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005bda:	fa93 f3a3 	rbit	r3, r3
 8005bde:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005be2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005be6:	fab3 f383 	clz	r3, r3
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	095b      	lsrs	r3, r3, #5
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	f043 0301 	orr.w	r3, r3, #1
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d102      	bne.n	8005c00 <HAL_RCC_OscConfig+0x2cc>
 8005bfa:	4b1a      	ldr	r3, [pc, #104]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	e015      	b.n	8005c2c <HAL_RCC_OscConfig+0x2f8>
 8005c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c04:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c08:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005c0c:	fa93 f3a3 	rbit	r3, r3
 8005c10:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005c14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c18:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005c1c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005c20:	fa93 f3a3 	rbit	r3, r3
 8005c24:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005c28:	4b0e      	ldr	r3, [pc, #56]	; (8005c64 <HAL_RCC_OscConfig+0x330>)
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005c30:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005c34:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005c38:	fa92 f2a2 	rbit	r2, r2
 8005c3c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005c40:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005c44:	fab2 f282 	clz	r2, r2
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	f042 0220 	orr.w	r2, r2, #32
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	f002 021f 	and.w	r2, r2, #31
 8005c54:	2101      	movs	r1, #1
 8005c56:	fa01 f202 	lsl.w	r2, r1, r2
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1ab      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x284>
 8005c60:	e003      	b.n	8005c6a <HAL_RCC_OscConfig+0x336>
 8005c62:	bf00      	nop
 8005c64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 817d 	beq.w	8005f7a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005c80:	4ba6      	ldr	r3, [pc, #664]	; (8005f1c <HAL_RCC_OscConfig+0x5e8>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f003 030c 	and.w	r3, r3, #12
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00b      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005c8c:	4ba3      	ldr	r3, [pc, #652]	; (8005f1c <HAL_RCC_OscConfig+0x5e8>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f003 030c 	and.w	r3, r3, #12
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d172      	bne.n	8005d7e <HAL_RCC_OscConfig+0x44a>
 8005c98:	4ba0      	ldr	r3, [pc, #640]	; (8005f1c <HAL_RCC_OscConfig+0x5e8>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d16c      	bne.n	8005d7e <HAL_RCC_OscConfig+0x44a>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005caa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005cae:	fa93 f3a3 	rbit	r3, r3
 8005cb2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005cb6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cba:	fab3 f383 	clz	r3, r3
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f043 0301 	orr.w	r3, r3, #1
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d102      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x3a0>
 8005cce:	4b93      	ldr	r3, [pc, #588]	; (8005f1c <HAL_RCC_OscConfig+0x5e8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	e013      	b.n	8005cfc <HAL_RCC_OscConfig+0x3c8>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cda:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005cde:	fa93 f3a3 	rbit	r3, r3
 8005ce2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005cec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005cf0:	fa93 f3a3 	rbit	r3, r3
 8005cf4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005cf8:	4b88      	ldr	r3, [pc, #544]	; (8005f1c <HAL_RCC_OscConfig+0x5e8>)
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005d02:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005d06:	fa92 f2a2 	rbit	r2, r2
 8005d0a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005d0e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005d12:	fab2 f282 	clz	r2, r2
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	f042 0220 	orr.w	r2, r2, #32
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	f002 021f 	and.w	r2, r2, #31
 8005d22:	2101      	movs	r1, #1
 8005d24:	fa01 f202 	lsl.w	r2, r1, r2
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <HAL_RCC_OscConfig+0x410>
 8005d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d002      	beq.n	8005d44 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	f000 be2e 	b.w	80069a0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d44:	4b75      	ldr	r3, [pc, #468]	; (8005f1c <HAL_RCC_OscConfig+0x5e8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	21f8      	movs	r1, #248	; 0xf8
 8005d5a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d5e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005d62:	fa91 f1a1 	rbit	r1, r1
 8005d66:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005d6a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005d6e:	fab1 f181 	clz	r1, r1
 8005d72:	b2c9      	uxtb	r1, r1
 8005d74:	408b      	lsls	r3, r1
 8005d76:	4969      	ldr	r1, [pc, #420]	; (8005f1c <HAL_RCC_OscConfig+0x5e8>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d7c:	e0fd      	b.n	8005f7a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 8088 	beq.w	8005ea0 <HAL_RCC_OscConfig+0x56c>
 8005d90:	2301      	movs	r3, #1
 8005d92:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d96:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005d9a:	fa93 f3a3 	rbit	r3, r3
 8005d9e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005da2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005da6:	fab3 f383 	clz	r3, r3
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005db0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	461a      	mov	r2, r3
 8005db8:	2301      	movs	r3, #1
 8005dba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dbc:	f7ff f898 	bl	8004ef0 <HAL_GetTick>
 8005dc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc4:	e00a      	b.n	8005ddc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dc6:	f7ff f893 	bl	8004ef0 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d902      	bls.n	8005ddc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	f000 bde2 	b.w	80069a0 <HAL_RCC_OscConfig+0x106c>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005de6:	fa93 f3a3 	rbit	r3, r3
 8005dea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005dee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df2:	fab3 f383 	clz	r3, r3
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f043 0301 	orr.w	r3, r3, #1
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d102      	bne.n	8005e0c <HAL_RCC_OscConfig+0x4d8>
 8005e06:	4b45      	ldr	r3, [pc, #276]	; (8005f1c <HAL_RCC_OscConfig+0x5e8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	e013      	b.n	8005e34 <HAL_RCC_OscConfig+0x500>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e12:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005e16:	fa93 f3a3 	rbit	r3, r3
 8005e1a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005e1e:	2302      	movs	r3, #2
 8005e20:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005e24:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005e28:	fa93 f3a3 	rbit	r3, r3
 8005e2c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005e30:	4b3a      	ldr	r3, [pc, #232]	; (8005f1c <HAL_RCC_OscConfig+0x5e8>)
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	2202      	movs	r2, #2
 8005e36:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005e3a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005e3e:	fa92 f2a2 	rbit	r2, r2
 8005e42:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005e46:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005e4a:	fab2 f282 	clz	r2, r2
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	f042 0220 	orr.w	r2, r2, #32
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	f002 021f 	and.w	r2, r2, #31
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e60:	4013      	ands	r3, r2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0af      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e66:	4b2d      	ldr	r3, [pc, #180]	; (8005f1c <HAL_RCC_OscConfig+0x5e8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	21f8      	movs	r1, #248	; 0xf8
 8005e7c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e80:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005e84:	fa91 f1a1 	rbit	r1, r1
 8005e88:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005e8c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005e90:	fab1 f181 	clz	r1, r1
 8005e94:	b2c9      	uxtb	r1, r1
 8005e96:	408b      	lsls	r3, r1
 8005e98:	4920      	ldr	r1, [pc, #128]	; (8005f1c <HAL_RCC_OscConfig+0x5e8>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	600b      	str	r3, [r1, #0]
 8005e9e:	e06c      	b.n	8005f7a <HAL_RCC_OscConfig+0x646>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005eaa:	fa93 f3a3 	rbit	r3, r3
 8005eae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005eb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eb6:	fab3 f383 	clz	r3, r3
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ec0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	2300      	movs	r3, #0
 8005eca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ecc:	f7ff f810 	bl	8004ef0 <HAL_GetTick>
 8005ed0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ed4:	e00a      	b.n	8005eec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ed6:	f7ff f80b 	bl	8004ef0 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d902      	bls.n	8005eec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	f000 bd5a 	b.w	80069a0 <HAL_RCC_OscConfig+0x106c>
 8005eec:	2302      	movs	r3, #2
 8005eee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ef6:	fa93 f3a3 	rbit	r3, r3
 8005efa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f02:	fab3 f383 	clz	r3, r3
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d104      	bne.n	8005f20 <HAL_RCC_OscConfig+0x5ec>
 8005f16:	4b01      	ldr	r3, [pc, #4]	; (8005f1c <HAL_RCC_OscConfig+0x5e8>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	e015      	b.n	8005f48 <HAL_RCC_OscConfig+0x614>
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	2302      	movs	r3, #2
 8005f22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f2a:	fa93 f3a3 	rbit	r3, r3
 8005f2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005f32:	2302      	movs	r3, #2
 8005f34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005f38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f3c:	fa93 f3a3 	rbit	r3, r3
 8005f40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f44:	4bc8      	ldr	r3, [pc, #800]	; (8006268 <HAL_RCC_OscConfig+0x934>)
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	2202      	movs	r2, #2
 8005f4a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005f4e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005f52:	fa92 f2a2 	rbit	r2, r2
 8005f56:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005f5a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005f5e:	fab2 f282 	clz	r2, r2
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	f042 0220 	orr.w	r2, r2, #32
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	f002 021f 	and.w	r2, r2, #31
 8005f6e:	2101      	movs	r1, #1
 8005f70:	fa01 f202 	lsl.w	r2, r1, r2
 8005f74:	4013      	ands	r3, r2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1ad      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 8110 	beq.w	80061b0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d079      	beq.n	8006094 <HAL_RCC_OscConfig+0x760>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005faa:	fa93 f3a3 	rbit	r3, r3
 8005fae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fb6:	fab3 f383 	clz	r3, r3
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4bab      	ldr	r3, [pc, #684]	; (800626c <HAL_RCC_OscConfig+0x938>)
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fca:	f7fe ff91 	bl	8004ef0 <HAL_GetTick>
 8005fce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fd2:	e00a      	b.n	8005fea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fd4:	f7fe ff8c 	bl	8004ef0 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d902      	bls.n	8005fea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	f000 bcdb 	b.w	80069a0 <HAL_RCC_OscConfig+0x106c>
 8005fea:	2302      	movs	r3, #2
 8005fec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ff4:	fa93 f3a3 	rbit	r3, r3
 8005ff8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006000:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006004:	2202      	movs	r2, #2
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800600c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	fa93 f2a3 	rbit	r2, r3
 8006016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800601a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006028:	2202      	movs	r2, #2
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	fa93 f2a3 	rbit	r2, r3
 800603a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800603e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006042:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006044:	4b88      	ldr	r3, [pc, #544]	; (8006268 <HAL_RCC_OscConfig+0x934>)
 8006046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800604c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006050:	2102      	movs	r1, #2
 8006052:	6019      	str	r1, [r3, #0]
 8006054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006058:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	fa93 f1a3 	rbit	r1, r3
 8006062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006066:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800606a:	6019      	str	r1, [r3, #0]
  return result;
 800606c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006070:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	fab3 f383 	clz	r3, r3
 800607a:	b2db      	uxtb	r3, r3
 800607c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006080:	b2db      	uxtb	r3, r3
 8006082:	f003 031f 	and.w	r3, r3, #31
 8006086:	2101      	movs	r1, #1
 8006088:	fa01 f303 	lsl.w	r3, r1, r3
 800608c:	4013      	ands	r3, r2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0a0      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x6a0>
 8006092:	e08d      	b.n	80061b0 <HAL_RCC_OscConfig+0x87c>
 8006094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006098:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800609c:	2201      	movs	r2, #1
 800609e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	fa93 f2a3 	rbit	r2, r3
 80060ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80060b6:	601a      	str	r2, [r3, #0]
  return result;
 80060b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80060c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060c2:	fab3 f383 	clz	r3, r3
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	4b68      	ldr	r3, [pc, #416]	; (800626c <HAL_RCC_OscConfig+0x938>)
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	461a      	mov	r2, r3
 80060d2:	2300      	movs	r3, #0
 80060d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060d6:	f7fe ff0b 	bl	8004ef0 <HAL_GetTick>
 80060da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060de:	e00a      	b.n	80060f6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060e0:	f7fe ff06 	bl	8004ef0 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d902      	bls.n	80060f6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	f000 bc55 	b.w	80069a0 <HAL_RCC_OscConfig+0x106c>
 80060f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80060fe:	2202      	movs	r2, #2
 8006100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006106:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	fa93 f2a3 	rbit	r2, r3
 8006110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006114:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800611e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006122:	2202      	movs	r2, #2
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800612a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	fa93 f2a3 	rbit	r2, r3
 8006134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006138:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006146:	2202      	movs	r2, #2
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800614e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	fa93 f2a3 	rbit	r2, r3
 8006158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800615c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006160:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006162:	4b41      	ldr	r3, [pc, #260]	; (8006268 <HAL_RCC_OscConfig+0x934>)
 8006164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800616a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800616e:	2102      	movs	r1, #2
 8006170:	6019      	str	r1, [r3, #0]
 8006172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006176:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	fa93 f1a3 	rbit	r1, r3
 8006180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006184:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006188:	6019      	str	r1, [r3, #0]
  return result;
 800618a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800618e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	fab3 f383 	clz	r3, r3
 8006198:	b2db      	uxtb	r3, r3
 800619a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	f003 031f 	and.w	r3, r3, #31
 80061a4:	2101      	movs	r1, #1
 80061a6:	fa01 f303 	lsl.w	r3, r1, r3
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d197      	bne.n	80060e0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 81a1 	beq.w	8006508 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061c6:	2300      	movs	r3, #0
 80061c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061cc:	4b26      	ldr	r3, [pc, #152]	; (8006268 <HAL_RCC_OscConfig+0x934>)
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d116      	bne.n	8006206 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061d8:	4b23      	ldr	r3, [pc, #140]	; (8006268 <HAL_RCC_OscConfig+0x934>)
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	4a22      	ldr	r2, [pc, #136]	; (8006268 <HAL_RCC_OscConfig+0x934>)
 80061de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061e2:	61d3      	str	r3, [r2, #28]
 80061e4:	4b20      	ldr	r3, [pc, #128]	; (8006268 <HAL_RCC_OscConfig+0x934>)
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80061ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061f0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061fa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80061fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006200:	2301      	movs	r3, #1
 8006202:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006206:	4b1a      	ldr	r3, [pc, #104]	; (8006270 <HAL_RCC_OscConfig+0x93c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d11a      	bne.n	8006248 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006212:	4b17      	ldr	r3, [pc, #92]	; (8006270 <HAL_RCC_OscConfig+0x93c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a16      	ldr	r2, [pc, #88]	; (8006270 <HAL_RCC_OscConfig+0x93c>)
 8006218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800621e:	f7fe fe67 	bl	8004ef0 <HAL_GetTick>
 8006222:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006226:	e009      	b.n	800623c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006228:	f7fe fe62 	bl	8004ef0 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b64      	cmp	r3, #100	; 0x64
 8006236:	d901      	bls.n	800623c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e3b1      	b.n	80069a0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800623c:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <HAL_RCC_OscConfig+0x93c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0ef      	beq.n	8006228 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800624c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d10d      	bne.n	8006274 <HAL_RCC_OscConfig+0x940>
 8006258:	4b03      	ldr	r3, [pc, #12]	; (8006268 <HAL_RCC_OscConfig+0x934>)
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	4a02      	ldr	r2, [pc, #8]	; (8006268 <HAL_RCC_OscConfig+0x934>)
 800625e:	f043 0301 	orr.w	r3, r3, #1
 8006262:	6213      	str	r3, [r2, #32]
 8006264:	e03c      	b.n	80062e0 <HAL_RCC_OscConfig+0x9ac>
 8006266:	bf00      	nop
 8006268:	40021000 	.word	0x40021000
 800626c:	10908120 	.word	0x10908120
 8006270:	40007000 	.word	0x40007000
 8006274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006278:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10c      	bne.n	800629e <HAL_RCC_OscConfig+0x96a>
 8006284:	4bc1      	ldr	r3, [pc, #772]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	4ac0      	ldr	r2, [pc, #768]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	6213      	str	r3, [r2, #32]
 8006290:	4bbe      	ldr	r3, [pc, #760]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	4abd      	ldr	r2, [pc, #756]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 8006296:	f023 0304 	bic.w	r3, r3, #4
 800629a:	6213      	str	r3, [r2, #32]
 800629c:	e020      	b.n	80062e0 <HAL_RCC_OscConfig+0x9ac>
 800629e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	d10c      	bne.n	80062c8 <HAL_RCC_OscConfig+0x994>
 80062ae:	4bb7      	ldr	r3, [pc, #732]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	4ab6      	ldr	r2, [pc, #728]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 80062b4:	f043 0304 	orr.w	r3, r3, #4
 80062b8:	6213      	str	r3, [r2, #32]
 80062ba:	4bb4      	ldr	r3, [pc, #720]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	4ab3      	ldr	r2, [pc, #716]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 80062c0:	f043 0301 	orr.w	r3, r3, #1
 80062c4:	6213      	str	r3, [r2, #32]
 80062c6:	e00b      	b.n	80062e0 <HAL_RCC_OscConfig+0x9ac>
 80062c8:	4bb0      	ldr	r3, [pc, #704]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	4aaf      	ldr	r2, [pc, #700]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 80062ce:	f023 0301 	bic.w	r3, r3, #1
 80062d2:	6213      	str	r3, [r2, #32]
 80062d4:	4bad      	ldr	r3, [pc, #692]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	4aac      	ldr	r2, [pc, #688]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 80062da:	f023 0304 	bic.w	r3, r3, #4
 80062de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8081 	beq.w	80063f4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062f2:	f7fe fdfd 	bl	8004ef0 <HAL_GetTick>
 80062f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062fa:	e00b      	b.n	8006314 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062fc:	f7fe fdf8 	bl	8004ef0 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	f241 3288 	movw	r2, #5000	; 0x1388
 800630c:	4293      	cmp	r3, r2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e345      	b.n	80069a0 <HAL_RCC_OscConfig+0x106c>
 8006314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006318:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800631c:	2202      	movs	r2, #2
 800631e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006324:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	fa93 f2a3 	rbit	r2, r3
 800632e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006332:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800633c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006340:	2202      	movs	r2, #2
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006348:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	fa93 f2a3 	rbit	r2, r3
 8006352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006356:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800635a:	601a      	str	r2, [r3, #0]
  return result;
 800635c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006360:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006364:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006366:	fab3 f383 	clz	r3, r3
 800636a:	b2db      	uxtb	r3, r3
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	b2db      	uxtb	r3, r3
 8006370:	f043 0302 	orr.w	r3, r3, #2
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d102      	bne.n	8006380 <HAL_RCC_OscConfig+0xa4c>
 800637a:	4b84      	ldr	r3, [pc, #528]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	e013      	b.n	80063a8 <HAL_RCC_OscConfig+0xa74>
 8006380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006384:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006388:	2202      	movs	r2, #2
 800638a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800638c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006390:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	fa93 f2a3 	rbit	r2, r3
 800639a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800639e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	4b79      	ldr	r3, [pc, #484]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80063b0:	2102      	movs	r1, #2
 80063b2:	6011      	str	r1, [r2, #0]
 80063b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80063bc:	6812      	ldr	r2, [r2, #0]
 80063be:	fa92 f1a2 	rbit	r1, r2
 80063c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063c6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80063ca:	6011      	str	r1, [r2, #0]
  return result;
 80063cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063d0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80063d4:	6812      	ldr	r2, [r2, #0]
 80063d6:	fab2 f282 	clz	r2, r2
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	f002 021f 	and.w	r2, r2, #31
 80063e6:	2101      	movs	r1, #1
 80063e8:	fa01 f202 	lsl.w	r2, r1, r2
 80063ec:	4013      	ands	r3, r2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d084      	beq.n	80062fc <HAL_RCC_OscConfig+0x9c8>
 80063f2:	e07f      	b.n	80064f4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063f4:	f7fe fd7c 	bl	8004ef0 <HAL_GetTick>
 80063f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063fc:	e00b      	b.n	8006416 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063fe:	f7fe fd77 	bl	8004ef0 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	f241 3288 	movw	r2, #5000	; 0x1388
 800640e:	4293      	cmp	r3, r2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e2c4      	b.n	80069a0 <HAL_RCC_OscConfig+0x106c>
 8006416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800641a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800641e:	2202      	movs	r2, #2
 8006420:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006426:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	fa93 f2a3 	rbit	r2, r3
 8006430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006434:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800643e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006442:	2202      	movs	r2, #2
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800644a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	fa93 f2a3 	rbit	r2, r3
 8006454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006458:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800645c:	601a      	str	r2, [r3, #0]
  return result;
 800645e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006462:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006466:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006468:	fab3 f383 	clz	r3, r3
 800646c:	b2db      	uxtb	r3, r3
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	b2db      	uxtb	r3, r3
 8006472:	f043 0302 	orr.w	r3, r3, #2
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b02      	cmp	r3, #2
 800647a:	d102      	bne.n	8006482 <HAL_RCC_OscConfig+0xb4e>
 800647c:	4b43      	ldr	r3, [pc, #268]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	e013      	b.n	80064aa <HAL_RCC_OscConfig+0xb76>
 8006482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006486:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800648a:	2202      	movs	r2, #2
 800648c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800648e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006492:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	fa93 f2a3 	rbit	r2, r3
 800649c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064a0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	4b39      	ldr	r3, [pc, #228]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80064ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80064b2:	2102      	movs	r1, #2
 80064b4:	6011      	str	r1, [r2, #0]
 80064b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80064ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80064be:	6812      	ldr	r2, [r2, #0]
 80064c0:	fa92 f1a2 	rbit	r1, r2
 80064c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80064c8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80064cc:	6011      	str	r1, [r2, #0]
  return result;
 80064ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80064d2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	fab2 f282 	clz	r2, r2
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	f002 021f 	and.w	r2, r2, #31
 80064e8:	2101      	movs	r1, #1
 80064ea:	fa01 f202 	lsl.w	r2, r1, r2
 80064ee:	4013      	ands	r3, r2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d184      	bne.n	80063fe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80064f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d105      	bne.n	8006508 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064fc:	4b23      	ldr	r3, [pc, #140]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	4a22      	ldr	r2, [pc, #136]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 8006502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006506:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800650c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 8242 	beq.w	800699e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800651a:	4b1c      	ldr	r3, [pc, #112]	; (800658c <HAL_RCC_OscConfig+0xc58>)
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f003 030c 	and.w	r3, r3, #12
 8006522:	2b08      	cmp	r3, #8
 8006524:	f000 8213 	beq.w	800694e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800652c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	2b02      	cmp	r3, #2
 8006536:	f040 8162 	bne.w	80067fe <HAL_RCC_OscConfig+0xeca>
 800653a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800653e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006542:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800654c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	fa93 f2a3 	rbit	r2, r3
 8006556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800655a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800655e:	601a      	str	r2, [r3, #0]
  return result;
 8006560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006564:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006568:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800656a:	fab3 f383 	clz	r3, r3
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006574:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	461a      	mov	r2, r3
 800657c:	2300      	movs	r3, #0
 800657e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006580:	f7fe fcb6 	bl	8004ef0 <HAL_GetTick>
 8006584:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006588:	e00c      	b.n	80065a4 <HAL_RCC_OscConfig+0xc70>
 800658a:	bf00      	nop
 800658c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006590:	f7fe fcae 	bl	8004ef0 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e1fd      	b.n	80069a0 <HAL_RCC_OscConfig+0x106c>
 80065a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065a8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80065ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	fa93 f2a3 	rbit	r2, r3
 80065c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065c4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80065c8:	601a      	str	r2, [r3, #0]
  return result;
 80065ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80065d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065d4:	fab3 f383 	clz	r3, r3
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	095b      	lsrs	r3, r3, #5
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	f043 0301 	orr.w	r3, r3, #1
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d102      	bne.n	80065ee <HAL_RCC_OscConfig+0xcba>
 80065e8:	4bb0      	ldr	r3, [pc, #704]	; (80068ac <HAL_RCC_OscConfig+0xf78>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	e027      	b.n	800663e <HAL_RCC_OscConfig+0xd0a>
 80065ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065f2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80065f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006600:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	fa93 f2a3 	rbit	r2, r3
 800660a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800660e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006618:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800661c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006626:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	fa93 f2a3 	rbit	r2, r3
 8006630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006634:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	4b9c      	ldr	r3, [pc, #624]	; (80068ac <HAL_RCC_OscConfig+0xf78>)
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006642:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006646:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800664a:	6011      	str	r1, [r2, #0]
 800664c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006650:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006654:	6812      	ldr	r2, [r2, #0]
 8006656:	fa92 f1a2 	rbit	r1, r2
 800665a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800665e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006662:	6011      	str	r1, [r2, #0]
  return result;
 8006664:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006668:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	fab2 f282 	clz	r2, r2
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	f042 0220 	orr.w	r2, r2, #32
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	f002 021f 	and.w	r2, r2, #31
 800667e:	2101      	movs	r1, #1
 8006680:	fa01 f202 	lsl.w	r2, r1, r2
 8006684:	4013      	ands	r3, r2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d182      	bne.n	8006590 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800668a:	4b88      	ldr	r3, [pc, #544]	; (80068ac <HAL_RCC_OscConfig+0xf78>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006696:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800669e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	430b      	orrs	r3, r1
 80066ac:	497f      	ldr	r1, [pc, #508]	; (80068ac <HAL_RCC_OscConfig+0xf78>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	604b      	str	r3, [r1, #4]
 80066b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066b6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80066ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066c4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	fa93 f2a3 	rbit	r2, r3
 80066ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066d2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80066d6:	601a      	str	r2, [r3, #0]
  return result;
 80066d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066dc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80066e0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066e2:	fab3 f383 	clz	r3, r3
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80066ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	461a      	mov	r2, r3
 80066f4:	2301      	movs	r3, #1
 80066f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f8:	f7fe fbfa 	bl	8004ef0 <HAL_GetTick>
 80066fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006700:	e009      	b.n	8006716 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006702:	f7fe fbf5 	bl	8004ef0 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e144      	b.n	80069a0 <HAL_RCC_OscConfig+0x106c>
 8006716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800671a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800671e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006728:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	fa93 f2a3 	rbit	r2, r3
 8006732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006736:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800673a:	601a      	str	r2, [r3, #0]
  return result;
 800673c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006740:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006744:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006746:	fab3 f383 	clz	r3, r3
 800674a:	b2db      	uxtb	r3, r3
 800674c:	095b      	lsrs	r3, r3, #5
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f043 0301 	orr.w	r3, r3, #1
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b01      	cmp	r3, #1
 8006758:	d102      	bne.n	8006760 <HAL_RCC_OscConfig+0xe2c>
 800675a:	4b54      	ldr	r3, [pc, #336]	; (80068ac <HAL_RCC_OscConfig+0xf78>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	e027      	b.n	80067b0 <HAL_RCC_OscConfig+0xe7c>
 8006760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006764:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006768:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800676c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800676e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006772:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	fa93 f2a3 	rbit	r2, r3
 800677c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006780:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800678a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800678e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006798:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	fa93 f2a3 	rbit	r2, r3
 80067a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067a6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	4b3f      	ldr	r3, [pc, #252]	; (80068ac <HAL_RCC_OscConfig+0xf78>)
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80067b4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80067b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80067bc:	6011      	str	r1, [r2, #0]
 80067be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80067c2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80067c6:	6812      	ldr	r2, [r2, #0]
 80067c8:	fa92 f1a2 	rbit	r1, r2
 80067cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80067d0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80067d4:	6011      	str	r1, [r2, #0]
  return result;
 80067d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80067da:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80067de:	6812      	ldr	r2, [r2, #0]
 80067e0:	fab2 f282 	clz	r2, r2
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	f042 0220 	orr.w	r2, r2, #32
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	f002 021f 	and.w	r2, r2, #31
 80067f0:	2101      	movs	r1, #1
 80067f2:	fa01 f202 	lsl.w	r2, r1, r2
 80067f6:	4013      	ands	r3, r2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d082      	beq.n	8006702 <HAL_RCC_OscConfig+0xdce>
 80067fc:	e0cf      	b.n	800699e <HAL_RCC_OscConfig+0x106a>
 80067fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006802:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006806:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800680a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800680c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006810:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	fa93 f2a3 	rbit	r2, r3
 800681a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800681e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006822:	601a      	str	r2, [r3, #0]
  return result;
 8006824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006828:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800682c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800682e:	fab3 f383 	clz	r3, r3
 8006832:	b2db      	uxtb	r3, r3
 8006834:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006838:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	461a      	mov	r2, r3
 8006840:	2300      	movs	r3, #0
 8006842:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006844:	f7fe fb54 	bl	8004ef0 <HAL_GetTick>
 8006848:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800684c:	e009      	b.n	8006862 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800684e:	f7fe fb4f 	bl	8004ef0 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e09e      	b.n	80069a0 <HAL_RCC_OscConfig+0x106c>
 8006862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006866:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800686a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800686e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006874:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	fa93 f2a3 	rbit	r2, r3
 800687e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006882:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006886:	601a      	str	r2, [r3, #0]
  return result;
 8006888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800688c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006890:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006892:	fab3 f383 	clz	r3, r3
 8006896:	b2db      	uxtb	r3, r3
 8006898:	095b      	lsrs	r3, r3, #5
 800689a:	b2db      	uxtb	r3, r3
 800689c:	f043 0301 	orr.w	r3, r3, #1
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d104      	bne.n	80068b0 <HAL_RCC_OscConfig+0xf7c>
 80068a6:	4b01      	ldr	r3, [pc, #4]	; (80068ac <HAL_RCC_OscConfig+0xf78>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	e029      	b.n	8006900 <HAL_RCC_OscConfig+0xfcc>
 80068ac:	40021000 	.word	0x40021000
 80068b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068b4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80068b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068c2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	fa93 f2a3 	rbit	r2, r3
 80068cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068d0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068da:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80068de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068e8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	fa93 f2a3 	rbit	r2, r3
 80068f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068f6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	4b2b      	ldr	r3, [pc, #172]	; (80069ac <HAL_RCC_OscConfig+0x1078>)
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006904:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006908:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800690c:	6011      	str	r1, [r2, #0]
 800690e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006912:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	fa92 f1a2 	rbit	r1, r2
 800691c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006920:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006924:	6011      	str	r1, [r2, #0]
  return result;
 8006926:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800692a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800692e:	6812      	ldr	r2, [r2, #0]
 8006930:	fab2 f282 	clz	r2, r2
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	f042 0220 	orr.w	r2, r2, #32
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	f002 021f 	and.w	r2, r2, #31
 8006940:	2101      	movs	r1, #1
 8006942:	fa01 f202 	lsl.w	r2, r1, r2
 8006946:	4013      	ands	r3, r2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d180      	bne.n	800684e <HAL_RCC_OscConfig+0xf1a>
 800694c:	e027      	b.n	800699e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800694e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006952:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e01e      	b.n	80069a0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006962:	4b12      	ldr	r3, [pc, #72]	; (80069ac <HAL_RCC_OscConfig+0x1078>)
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800696a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800696e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	429a      	cmp	r2, r3
 8006980:	d10b      	bne.n	800699a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006982:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006986:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800698a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800698e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006996:	429a      	cmp	r2, r3
 8006998:	d001      	beq.n	800699e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e000      	b.n	80069a0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	40021000 	.word	0x40021000

080069b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b09e      	sub	sp, #120	; 0x78
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e162      	b.n	8006c8e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069c8:	4b90      	ldr	r3, [pc, #576]	; (8006c0c <HAL_RCC_ClockConfig+0x25c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d910      	bls.n	80069f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d6:	4b8d      	ldr	r3, [pc, #564]	; (8006c0c <HAL_RCC_ClockConfig+0x25c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f023 0207 	bic.w	r2, r3, #7
 80069de:	498b      	ldr	r1, [pc, #556]	; (8006c0c <HAL_RCC_ClockConfig+0x25c>)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e6:	4b89      	ldr	r3, [pc, #548]	; (8006c0c <HAL_RCC_ClockConfig+0x25c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d001      	beq.n	80069f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e14a      	b.n	8006c8e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d008      	beq.n	8006a16 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a04:	4b82      	ldr	r3, [pc, #520]	; (8006c10 <HAL_RCC_ClockConfig+0x260>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	497f      	ldr	r1, [pc, #508]	; (8006c10 <HAL_RCC_ClockConfig+0x260>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 80dc 	beq.w	8006bdc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d13c      	bne.n	8006aa6 <HAL_RCC_ClockConfig+0xf6>
 8006a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a30:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a34:	fa93 f3a3 	rbit	r3, r3
 8006a38:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a3c:	fab3 f383 	clz	r3, r3
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	095b      	lsrs	r3, r3, #5
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	f043 0301 	orr.w	r3, r3, #1
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d102      	bne.n	8006a56 <HAL_RCC_ClockConfig+0xa6>
 8006a50:	4b6f      	ldr	r3, [pc, #444]	; (8006c10 <HAL_RCC_ClockConfig+0x260>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	e00f      	b.n	8006a76 <HAL_RCC_ClockConfig+0xc6>
 8006a56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a5e:	fa93 f3a3 	rbit	r3, r3
 8006a62:	667b      	str	r3, [r7, #100]	; 0x64
 8006a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a68:	663b      	str	r3, [r7, #96]	; 0x60
 8006a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a6c:	fa93 f3a3 	rbit	r3, r3
 8006a70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a72:	4b67      	ldr	r3, [pc, #412]	; (8006c10 <HAL_RCC_ClockConfig+0x260>)
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a7e:	fa92 f2a2 	rbit	r2, r2
 8006a82:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006a84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a86:	fab2 f282 	clz	r2, r2
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	f042 0220 	orr.w	r2, r2, #32
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	f002 021f 	and.w	r2, r2, #31
 8006a96:	2101      	movs	r1, #1
 8006a98:	fa01 f202 	lsl.w	r2, r1, r2
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d17b      	bne.n	8006b9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e0f3      	b.n	8006c8e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d13c      	bne.n	8006b28 <HAL_RCC_ClockConfig+0x178>
 8006aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ab2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab6:	fa93 f3a3 	rbit	r3, r3
 8006aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006abe:	fab3 f383 	clz	r3, r3
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	095b      	lsrs	r3, r3, #5
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f043 0301 	orr.w	r3, r3, #1
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d102      	bne.n	8006ad8 <HAL_RCC_ClockConfig+0x128>
 8006ad2:	4b4f      	ldr	r3, [pc, #316]	; (8006c10 <HAL_RCC_ClockConfig+0x260>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	e00f      	b.n	8006af8 <HAL_RCC_ClockConfig+0x148>
 8006ad8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006adc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ae0:	fa93 f3a3 	rbit	r3, r3
 8006ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006aea:	643b      	str	r3, [r7, #64]	; 0x40
 8006aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aee:	fa93 f3a3 	rbit	r3, r3
 8006af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af4:	4b46      	ldr	r3, [pc, #280]	; (8006c10 <HAL_RCC_ClockConfig+0x260>)
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006afc:	63ba      	str	r2, [r7, #56]	; 0x38
 8006afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b00:	fa92 f2a2 	rbit	r2, r2
 8006b04:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b08:	fab2 f282 	clz	r2, r2
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	f042 0220 	orr.w	r2, r2, #32
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	f002 021f 	and.w	r2, r2, #31
 8006b18:	2101      	movs	r1, #1
 8006b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b1e:	4013      	ands	r3, r2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d13a      	bne.n	8006b9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e0b2      	b.n	8006c8e <HAL_RCC_ClockConfig+0x2de>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	fa93 f3a3 	rbit	r3, r3
 8006b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b36:	fab3 f383 	clz	r3, r3
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	095b      	lsrs	r3, r3, #5
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	f043 0301 	orr.w	r3, r3, #1
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d102      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x1a0>
 8006b4a:	4b31      	ldr	r3, [pc, #196]	; (8006c10 <HAL_RCC_ClockConfig+0x260>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	e00d      	b.n	8006b6c <HAL_RCC_ClockConfig+0x1bc>
 8006b50:	2302      	movs	r3, #2
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b56:	fa93 f3a3 	rbit	r3, r3
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	623b      	str	r3, [r7, #32]
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	fa93 f3a3 	rbit	r3, r3
 8006b66:	61fb      	str	r3, [r7, #28]
 8006b68:	4b29      	ldr	r3, [pc, #164]	; (8006c10 <HAL_RCC_ClockConfig+0x260>)
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	2202      	movs	r2, #2
 8006b6e:	61ba      	str	r2, [r7, #24]
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	fa92 f2a2 	rbit	r2, r2
 8006b76:	617a      	str	r2, [r7, #20]
  return result;
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	fab2 f282 	clz	r2, r2
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	f042 0220 	orr.w	r2, r2, #32
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	f002 021f 	and.w	r2, r2, #31
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8006b90:	4013      	ands	r3, r2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e079      	b.n	8006c8e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b9a:	4b1d      	ldr	r3, [pc, #116]	; (8006c10 <HAL_RCC_ClockConfig+0x260>)
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f023 0203 	bic.w	r2, r3, #3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	491a      	ldr	r1, [pc, #104]	; (8006c10 <HAL_RCC_ClockConfig+0x260>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bac:	f7fe f9a0 	bl	8004ef0 <HAL_GetTick>
 8006bb0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bb2:	e00a      	b.n	8006bca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bb4:	f7fe f99c 	bl	8004ef0 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e061      	b.n	8006c8e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bca:	4b11      	ldr	r3, [pc, #68]	; (8006c10 <HAL_RCC_ClockConfig+0x260>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f003 020c 	and.w	r2, r3, #12
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d1eb      	bne.n	8006bb4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <HAL_RCC_ClockConfig+0x25c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0307 	and.w	r3, r3, #7
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d214      	bcs.n	8006c14 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bea:	4b08      	ldr	r3, [pc, #32]	; (8006c0c <HAL_RCC_ClockConfig+0x25c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f023 0207 	bic.w	r2, r3, #7
 8006bf2:	4906      	ldr	r1, [pc, #24]	; (8006c0c <HAL_RCC_ClockConfig+0x25c>)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bfa:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <HAL_RCC_ClockConfig+0x25c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d005      	beq.n	8006c14 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e040      	b.n	8006c8e <HAL_RCC_ClockConfig+0x2de>
 8006c0c:	40022000 	.word	0x40022000
 8006c10:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c20:	4b1d      	ldr	r3, [pc, #116]	; (8006c98 <HAL_RCC_ClockConfig+0x2e8>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	491a      	ldr	r1, [pc, #104]	; (8006c98 <HAL_RCC_ClockConfig+0x2e8>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0308 	and.w	r3, r3, #8
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d009      	beq.n	8006c52 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c3e:	4b16      	ldr	r3, [pc, #88]	; (8006c98 <HAL_RCC_ClockConfig+0x2e8>)
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	4912      	ldr	r1, [pc, #72]	; (8006c98 <HAL_RCC_ClockConfig+0x2e8>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006c52:	f000 f829 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 8006c56:	4601      	mov	r1, r0
 8006c58:	4b0f      	ldr	r3, [pc, #60]	; (8006c98 <HAL_RCC_ClockConfig+0x2e8>)
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c60:	22f0      	movs	r2, #240	; 0xf0
 8006c62:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	fa92 f2a2 	rbit	r2, r2
 8006c6a:	60fa      	str	r2, [r7, #12]
  return result;
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	fab2 f282 	clz	r2, r2
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	40d3      	lsrs	r3, r2
 8006c76:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <HAL_RCC_ClockConfig+0x2ec>)
 8006c78:	5cd3      	ldrb	r3, [r2, r3]
 8006c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8006c7e:	4a08      	ldr	r2, [pc, #32]	; (8006ca0 <HAL_RCC_ClockConfig+0x2f0>)
 8006c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006c82:	4b08      	ldr	r3, [pc, #32]	; (8006ca4 <HAL_RCC_ClockConfig+0x2f4>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe f8ee 	bl	8004e68 <HAL_InitTick>
  
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3778      	adds	r7, #120	; 0x78
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	40021000 	.word	0x40021000
 8006c9c:	0800acb4 	.word	0x0800acb4
 8006ca0:	20000064 	.word	0x20000064
 8006ca4:	20000068 	.word	0x20000068

08006ca8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b08b      	sub	sp, #44	; 0x2c
 8006cac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61bb      	str	r3, [r7, #24]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cba:	2300      	movs	r3, #0
 8006cbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006cc2:	4b29      	ldr	r3, [pc, #164]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f003 030c 	and.w	r3, r3, #12
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	d002      	beq.n	8006cd8 <HAL_RCC_GetSysClockFreq+0x30>
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d003      	beq.n	8006cde <HAL_RCC_GetSysClockFreq+0x36>
 8006cd6:	e03c      	b.n	8006d52 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006cd8:	4b24      	ldr	r3, [pc, #144]	; (8006d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006cda:	623b      	str	r3, [r7, #32]
      break;
 8006cdc:	e03c      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006ce4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006ce8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	fa92 f2a2 	rbit	r2, r2
 8006cf0:	607a      	str	r2, [r7, #4]
  return result;
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	fab2 f282 	clz	r2, r2
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	40d3      	lsrs	r3, r2
 8006cfc:	4a1c      	ldr	r2, [pc, #112]	; (8006d70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006cfe:	5cd3      	ldrb	r3, [r2, r3]
 8006d00:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006d02:	4b19      	ldr	r3, [pc, #100]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d06:	f003 030f 	and.w	r3, r3, #15
 8006d0a:	220f      	movs	r2, #15
 8006d0c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	fa92 f2a2 	rbit	r2, r2
 8006d14:	60fa      	str	r2, [r7, #12]
  return result;
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	fab2 f282 	clz	r2, r2
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	40d3      	lsrs	r3, r2
 8006d20:	4a14      	ldr	r2, [pc, #80]	; (8006d74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006d22:	5cd3      	ldrb	r3, [r2, r3]
 8006d24:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d008      	beq.n	8006d42 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006d30:	4a0e      	ldr	r2, [pc, #56]	; (8006d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	fb02 f303 	mul.w	r3, r2, r3
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d40:	e004      	b.n	8006d4c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	4a0c      	ldr	r2, [pc, #48]	; (8006d78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006d46:	fb02 f303 	mul.w	r3, r2, r3
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	623b      	str	r3, [r7, #32]
      break;
 8006d50:	e002      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d52:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006d54:	623b      	str	r3, [r7, #32]
      break;
 8006d56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d58:	6a3b      	ldr	r3, [r7, #32]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	372c      	adds	r7, #44	; 0x2c
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	007a1200 	.word	0x007a1200
 8006d70:	0800accc 	.word	0x0800accc
 8006d74:	0800acdc 	.word	0x0800acdc
 8006d78:	003d0900 	.word	0x003d0900

08006d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d80:	4b03      	ldr	r3, [pc, #12]	; (8006d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d82:	681b      	ldr	r3, [r3, #0]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	20000064 	.word	0x20000064

08006d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006d9a:	f7ff ffef 	bl	8006d7c <HAL_RCC_GetHCLKFreq>
 8006d9e:	4601      	mov	r1, r0
 8006da0:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006da8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006dac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	fa92 f2a2 	rbit	r2, r2
 8006db4:	603a      	str	r2, [r7, #0]
  return result;
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	fab2 f282 	clz	r2, r2
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	40d3      	lsrs	r3, r2
 8006dc0:	4a04      	ldr	r2, [pc, #16]	; (8006dd4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006dc2:	5cd3      	ldrb	r3, [r2, r3]
 8006dc4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	40021000 	.word	0x40021000
 8006dd4:	0800acc4 	.word	0x0800acc4

08006dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006dde:	f7ff ffcd 	bl	8006d7c <HAL_RCC_GetHCLKFreq>
 8006de2:	4601      	mov	r1, r0
 8006de4:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006dec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006df0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	fa92 f2a2 	rbit	r2, r2
 8006df8:	603a      	str	r2, [r7, #0]
  return result;
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	fab2 f282 	clz	r2, r2
 8006e00:	b2d2      	uxtb	r2, r2
 8006e02:	40d3      	lsrs	r3, r2
 8006e04:	4a04      	ldr	r2, [pc, #16]	; (8006e18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006e06:	5cd3      	ldrb	r3, [r2, r3]
 8006e08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	40021000 	.word	0x40021000
 8006e18:	0800acc4 	.word	0x0800acc4

08006e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b092      	sub	sp, #72	; 0x48
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 80d4 	beq.w	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e40:	4b4e      	ldr	r3, [pc, #312]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10e      	bne.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e4c:	4b4b      	ldr	r3, [pc, #300]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	4a4a      	ldr	r2, [pc, #296]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e56:	61d3      	str	r3, [r2, #28]
 8006e58:	4b48      	ldr	r3, [pc, #288]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e64:	2301      	movs	r3, #1
 8006e66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e6a:	4b45      	ldr	r3, [pc, #276]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d118      	bne.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e76:	4b42      	ldr	r3, [pc, #264]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a41      	ldr	r2, [pc, #260]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e82:	f7fe f835 	bl	8004ef0 <HAL_GetTick>
 8006e86:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e88:	e008      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e8a:	f7fe f831 	bl	8004ef0 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	2b64      	cmp	r3, #100	; 0x64
 8006e96:	d901      	bls.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e169      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e9c:	4b38      	ldr	r3, [pc, #224]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d0f0      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ea8:	4b34      	ldr	r3, [pc, #208]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8084 	beq.w	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d07c      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ec8:	4b2c      	ldr	r3, [pc, #176]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ed6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	fa93 f3a3 	rbit	r3, r3
 8006ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ee2:	fab3 f383 	clz	r3, r3
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4b26      	ldr	r3, [pc, #152]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006efa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	fa93 f3a3 	rbit	r3, r3
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f06:	fab3 f383 	clz	r3, r3
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	4b1d      	ldr	r3, [pc, #116]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006f10:	4413      	add	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	461a      	mov	r2, r3
 8006f16:	2300      	movs	r3, #0
 8006f18:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006f1a:	4a18      	ldr	r2, [pc, #96]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d04b      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2a:	f7fd ffe1 	bl	8004ef0 <HAL_GetTick>
 8006f2e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f30:	e00a      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f32:	f7fd ffdd 	bl	8004ef0 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e113      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4e:	fa93 f3a3 	rbit	r3, r3
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
 8006f54:	2302      	movs	r3, #2
 8006f56:	623b      	str	r3, [r7, #32]
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	fa93 f3a3 	rbit	r3, r3
 8006f5e:	61fb      	str	r3, [r7, #28]
  return result;
 8006f60:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f62:	fab3 f383 	clz	r3, r3
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	095b      	lsrs	r3, r3, #5
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	f043 0302 	orr.w	r3, r3, #2
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d108      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006f76:	4b01      	ldr	r3, [pc, #4]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	e00d      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006f7c:	40021000 	.word	0x40021000
 8006f80:	40007000 	.word	0x40007000
 8006f84:	10908100 	.word	0x10908100
 8006f88:	2302      	movs	r3, #2
 8006f8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	fa93 f3a3 	rbit	r3, r3
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	4b78      	ldr	r3, [pc, #480]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	2202      	movs	r2, #2
 8006f9a:	613a      	str	r2, [r7, #16]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	fa92 f2a2 	rbit	r2, r2
 8006fa2:	60fa      	str	r2, [r7, #12]
  return result;
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	fab2 f282 	clz	r2, r2
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	f002 021f 	and.w	r2, r2, #31
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0b7      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006fc2:	4b6d      	ldr	r3, [pc, #436]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	496a      	ldr	r1, [pc, #424]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006fd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d105      	bne.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fdc:	4b66      	ldr	r3, [pc, #408]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	4a65      	ldr	r2, [pc, #404]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fe6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d008      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ff4:	4b60      	ldr	r3, [pc, #384]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff8:	f023 0203 	bic.w	r2, r3, #3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	495d      	ldr	r1, [pc, #372]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007002:	4313      	orrs	r3, r2
 8007004:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d008      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007012:	4b59      	ldr	r3, [pc, #356]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007016:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	4956      	ldr	r1, [pc, #344]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007020:	4313      	orrs	r3, r2
 8007022:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0304 	and.w	r3, r3, #4
 800702c:	2b00      	cmp	r3, #0
 800702e:	d008      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007030:	4b51      	ldr	r3, [pc, #324]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007034:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	494e      	ldr	r1, [pc, #312]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800703e:	4313      	orrs	r3, r2
 8007040:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b00      	cmp	r3, #0
 800704c:	d008      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800704e:	4b4a      	ldr	r3, [pc, #296]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007052:	f023 0210 	bic.w	r2, r3, #16
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	4947      	ldr	r1, [pc, #284]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800705c:	4313      	orrs	r3, r2
 800705e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800706c:	4b42      	ldr	r3, [pc, #264]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	493f      	ldr	r1, [pc, #252]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800707a:	4313      	orrs	r3, r2
 800707c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007086:	2b00      	cmp	r3, #0
 8007088:	d008      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800708a:	4b3b      	ldr	r3, [pc, #236]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	f023 0220 	bic.w	r2, r3, #32
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	4938      	ldr	r1, [pc, #224]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007098:	4313      	orrs	r3, r2
 800709a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0308 	and.w	r3, r3, #8
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d008      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070a8:	4b33      	ldr	r3, [pc, #204]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	4930      	ldr	r1, [pc, #192]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0310 	and.w	r3, r3, #16
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d008      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070c6:	4b2c      	ldr	r3, [pc, #176]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	4929      	ldr	r1, [pc, #164]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d008      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80070e4:	4b24      	ldr	r3, [pc, #144]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	4921      	ldr	r1, [pc, #132]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d008      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007102:	4b1d      	ldr	r3, [pc, #116]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	491a      	ldr	r1, [pc, #104]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007110:	4313      	orrs	r3, r2
 8007112:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711c:	2b00      	cmp	r3, #0
 800711e:	d008      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007120:	4b15      	ldr	r3, [pc, #84]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712c:	4912      	ldr	r1, [pc, #72]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800712e:	4313      	orrs	r3, r2
 8007130:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d008      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800713e:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	490b      	ldr	r1, [pc, #44]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800714c:	4313      	orrs	r3, r2
 800714e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d008      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800715c:	4b06      	ldr	r3, [pc, #24]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800715e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007160:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007168:	4903      	ldr	r1, [pc, #12]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800716a:	4313      	orrs	r3, r2
 800716c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3748      	adds	r7, #72	; 0x48
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	40021000 	.word	0x40021000

0800717c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e073      	b.n	800727a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	7f5b      	ldrb	r3, [r3, #29]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d105      	bne.n	80071a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7fc fade 	bl	8003764 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2202      	movs	r2, #2
 80071ac:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f003 0310 	and.w	r3, r3, #16
 80071b8:	2b10      	cmp	r3, #16
 80071ba:	d055      	beq.n	8007268 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	22ca      	movs	r2, #202	; 0xca
 80071c2:	625a      	str	r2, [r3, #36]	; 0x24
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2253      	movs	r2, #83	; 0x53
 80071ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fa49 	bl	8007664 <RTC_EnterInitMode>
 80071d2:	4603      	mov	r3, r0
 80071d4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d12c      	bne.n	8007236 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6812      	ldr	r2, [r2, #0]
 80071e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80071ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ee:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6899      	ldr	r1, [r3, #8]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	431a      	orrs	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	68d2      	ldr	r2, [r2, #12]
 8007216:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6919      	ldr	r1, [r3, #16]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	041a      	lsls	r2, r3, #16
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fa50 	bl	80076d2 <RTC_ExitInitMode>
 8007232:	4603      	mov	r3, r0
 8007234:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d110      	bne.n	800725e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800724a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	22ff      	movs	r2, #255	; 0xff
 8007264:	625a      	str	r2, [r3, #36]	; 0x24
 8007266:	e001      	b.n	800726c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800726c:	7bfb      	ldrb	r3, [r7, #15]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d102      	bne.n	8007278 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007278:	7bfb      	ldrb	r3, [r7, #15]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007282:	b590      	push	{r4, r7, lr}
 8007284:	b087      	sub	sp, #28
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	7f1b      	ldrb	r3, [r3, #28]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_RTC_SetTime+0x1c>
 800729a:	2302      	movs	r3, #2
 800729c:	e087      	b.n	80073ae <HAL_RTC_SetTime+0x12c>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2202      	movs	r2, #2
 80072a8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d126      	bne.n	80072fe <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d102      	bne.n	80072c4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2200      	movs	r2, #0
 80072c2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 fa27 	bl	800771c <RTC_ByteToBcd2>
 80072ce:	4603      	mov	r3, r0
 80072d0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	785b      	ldrb	r3, [r3, #1]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fa20 	bl	800771c <RTC_ByteToBcd2>
 80072dc:	4603      	mov	r3, r0
 80072de:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80072e0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	789b      	ldrb	r3, [r3, #2]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fa18 	bl	800771c <RTC_ByteToBcd2>
 80072ec:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072ee:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	78db      	ldrb	r3, [r3, #3]
 80072f6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]
 80072fc:	e018      	b.n	8007330 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007308:	2b00      	cmp	r3, #0
 800730a:	d102      	bne.n	8007312 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2200      	movs	r2, #0
 8007310:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	785b      	ldrb	r3, [r3, #1]
 800731c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800731e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007324:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	78db      	ldrb	r3, [r3, #3]
 800732a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	22ca      	movs	r2, #202	; 0xca
 8007336:	625a      	str	r2, [r3, #36]	; 0x24
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2253      	movs	r2, #83	; 0x53
 800733e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 f98f 	bl	8007664 <RTC_EnterInitMode>
 8007346:	4603      	mov	r3, r0
 8007348:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800734a:	7cfb      	ldrb	r3, [r7, #19]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d120      	bne.n	8007392 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800735a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800735e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800736e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6899      	ldr	r1, [r3, #8]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	431a      	orrs	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 f9a2 	bl	80076d2 <RTC_ExitInitMode>
 800738e:	4603      	mov	r3, r0
 8007390:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007392:	7cfb      	ldrb	r3, [r7, #19]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d102      	bne.n	800739e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2201      	movs	r2, #1
 800739c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	22ff      	movs	r2, #255	; 0xff
 80073a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	771a      	strb	r2, [r3, #28]

  return status;
 80073ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	371c      	adds	r7, #28
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd90      	pop	{r4, r7, pc}

080073b6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b086      	sub	sp, #24
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80073e8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80073ec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	0c1b      	lsrs	r3, r3, #16
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	0a1b      	lsrs	r3, r3, #8
 8007402:	b2db      	uxtb	r3, r3
 8007404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007408:	b2da      	uxtb	r2, r3
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007416:	b2da      	uxtb	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	0d9b      	lsrs	r3, r3, #22
 8007420:	b2db      	uxtb	r3, r3
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	b2da      	uxtb	r2, r3
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d11a      	bne.n	8007468 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	4618      	mov	r0, r3
 8007438:	f000 f98e 	bl	8007758 <RTC_Bcd2ToByte>
 800743c:	4603      	mov	r3, r0
 800743e:	461a      	mov	r2, r3
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	785b      	ldrb	r3, [r3, #1]
 8007448:	4618      	mov	r0, r3
 800744a:	f000 f985 	bl	8007758 <RTC_Bcd2ToByte>
 800744e:	4603      	mov	r3, r0
 8007450:	461a      	mov	r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	789b      	ldrb	r3, [r3, #2]
 800745a:	4618      	mov	r0, r3
 800745c:	f000 f97c 	bl	8007758 <RTC_Bcd2ToByte>
 8007460:	4603      	mov	r3, r0
 8007462:	461a      	mov	r2, r3
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007472:	b590      	push	{r4, r7, lr}
 8007474:	b087      	sub	sp, #28
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	7f1b      	ldrb	r3, [r3, #28]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_RTC_SetDate+0x1c>
 800748a:	2302      	movs	r3, #2
 800748c:	e071      	b.n	8007572 <HAL_RTC_SetDate+0x100>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2202      	movs	r2, #2
 8007498:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10e      	bne.n	80074be <HAL_RTC_SetDate+0x4c>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	785b      	ldrb	r3, [r3, #1]
 80074a4:	f003 0310 	and.w	r3, r3, #16
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d008      	beq.n	80074be <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	785b      	ldrb	r3, [r3, #1]
 80074b0:	f023 0310 	bic.w	r3, r3, #16
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	330a      	adds	r3, #10
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d11c      	bne.n	80074fe <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	78db      	ldrb	r3, [r3, #3]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 f927 	bl	800771c <RTC_ByteToBcd2>
 80074ce:	4603      	mov	r3, r0
 80074d0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	785b      	ldrb	r3, [r3, #1]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 f920 	bl	800771c <RTC_ByteToBcd2>
 80074dc:	4603      	mov	r3, r0
 80074de:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80074e0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	789b      	ldrb	r3, [r3, #2]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 f918 	bl	800771c <RTC_ByteToBcd2>
 80074ec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80074ee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80074f8:	4313      	orrs	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]
 80074fc:	e00e      	b.n	800751c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	78db      	ldrb	r3, [r3, #3]
 8007502:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	785b      	ldrb	r3, [r3, #1]
 8007508:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800750a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007510:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007518:	4313      	orrs	r3, r2
 800751a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	22ca      	movs	r2, #202	; 0xca
 8007522:	625a      	str	r2, [r3, #36]	; 0x24
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2253      	movs	r2, #83	; 0x53
 800752a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 f899 	bl	8007664 <RTC_EnterInitMode>
 8007532:	4603      	mov	r3, r0
 8007534:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007536:	7cfb      	ldrb	r3, [r7, #19]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10c      	bne.n	8007556 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007546:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800754a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f8c0 	bl	80076d2 <RTC_ExitInitMode>
 8007552:	4603      	mov	r3, r0
 8007554:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007556:	7cfb      	ldrb	r3, [r7, #19]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d102      	bne.n	8007562 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2201      	movs	r2, #1
 8007560:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	22ff      	movs	r2, #255	; 0xff
 8007568:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	771a      	strb	r2, [r3, #28]

  return status;
 8007570:	7cfb      	ldrb	r3, [r7, #19]
}
 8007572:	4618      	mov	r0, r3
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	bd90      	pop	{r4, r7, pc}

0800757a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b086      	sub	sp, #24
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007594:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007598:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	0c1b      	lsrs	r3, r3, #16
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	0a1b      	lsrs	r3, r3, #8
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	0b5b      	lsrs	r3, r3, #13
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f003 0307 	and.w	r3, r3, #7
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d11a      	bne.n	800760e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	78db      	ldrb	r3, [r3, #3]
 80075dc:	4618      	mov	r0, r3
 80075de:	f000 f8bb 	bl	8007758 <RTC_Bcd2ToByte>
 80075e2:	4603      	mov	r3, r0
 80075e4:	461a      	mov	r2, r3
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	785b      	ldrb	r3, [r3, #1]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 f8b2 	bl	8007758 <RTC_Bcd2ToByte>
 80075f4:	4603      	mov	r3, r0
 80075f6:	461a      	mov	r2, r3
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	789b      	ldrb	r3, [r3, #2]
 8007600:	4618      	mov	r0, r3
 8007602:	f000 f8a9 	bl	8007758 <RTC_Bcd2ToByte>
 8007606:	4603      	mov	r3, r0
 8007608:	461a      	mov	r2, r3
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a0d      	ldr	r2, [pc, #52]	; (8007660 <HAL_RTC_WaitForSynchro+0x48>)
 800762a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800762c:	f7fd fc60 	bl	8004ef0 <HAL_GetTick>
 8007630:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007632:	e009      	b.n	8007648 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007634:	f7fd fc5c 	bl	8004ef0 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007642:	d901      	bls.n	8007648 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e007      	b.n	8007658 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b00      	cmp	r3, #0
 8007654:	d0ee      	beq.n	8007634 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	0001ff5f 	.word	0x0001ff5f

08007664 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800766c:	2300      	movs	r3, #0
 800766e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767e:	2b00      	cmp	r3, #0
 8007680:	d122      	bne.n	80076c8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007690:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007692:	f7fd fc2d 	bl	8004ef0 <HAL_GetTick>
 8007696:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007698:	e00c      	b.n	80076b4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800769a:	f7fd fc29 	bl	8004ef0 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076a8:	d904      	bls.n	80076b4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2204      	movs	r2, #4
 80076ae:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d102      	bne.n	80076c8 <RTC_EnterInitMode+0x64>
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d1e8      	bne.n	800769a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68da      	ldr	r2, [r3, #12]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076ec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f003 0320 	and.w	r3, r3, #32
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff ff8b 	bl	8007618 <HAL_RTC_WaitForSynchro>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d004      	beq.n	8007712 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2204      	movs	r2, #4
 800770c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007712:	7bfb      	ldrb	r3, [r7, #15]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800772a:	e005      	b.n	8007738 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3301      	adds	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8007732:	79fb      	ldrb	r3, [r7, #7]
 8007734:	3b0a      	subs	r3, #10
 8007736:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007738:	79fb      	ldrb	r3, [r7, #7]
 800773a:	2b09      	cmp	r3, #9
 800773c:	d8f6      	bhi.n	800772c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	b2da      	uxtb	r2, r3
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	4313      	orrs	r3, r2
 800774a:	b2db      	uxtb	r3, r3
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8007766:	79fb      	ldrb	r3, [r7, #7]
 8007768:	091b      	lsrs	r3, r3, #4
 800776a:	b2db      	uxtb	r3, r3
 800776c:	461a      	mov	r2, r3
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	b2da      	uxtb	r2, r3
 800777c:	79fb      	ldrb	r3, [r7, #7]
 800777e:	f003 030f 	and.w	r3, r3, #15
 8007782:	b2db      	uxtb	r3, r3
 8007784:	4413      	add	r3, r2
 8007786:	b2db      	uxtb	r3, r3
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e09d      	b.n	80078e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d108      	bne.n	80077c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077b6:	d009      	beq.n	80077cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	61da      	str	r2, [r3, #28]
 80077be:	e005      	b.n	80077cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d106      	bne.n	80077ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7fb ffe2 	bl	80037b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007802:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800780c:	d902      	bls.n	8007814 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	e002      	b.n	800781a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007818:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007822:	d007      	beq.n	8007834 <HAL_SPI_Init+0xa0>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800782c:	d002      	beq.n	8007834 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	431a      	orrs	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800786c:	431a      	orrs	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007876:	ea42 0103 	orr.w	r1, r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	0c1b      	lsrs	r3, r3, #16
 8007890:	f003 0204 	and.w	r2, r3, #4
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	f003 0310 	and.w	r3, r3, #16
 800789c:	431a      	orrs	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a2:	f003 0308 	and.w	r3, r3, #8
 80078a6:	431a      	orrs	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80078b0:	ea42 0103 	orr.w	r1, r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	69da      	ldr	r2, [r3, #28]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e049      	b.n	8007990 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d106      	bne.n	8007916 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7fb ff8f 	bl	8003834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2202      	movs	r2, #2
 800791a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3304      	adds	r3, #4
 8007926:	4619      	mov	r1, r3
 8007928:	4610      	mov	r0, r2
 800792a:	f000 fb75 	bl	8008018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e049      	b.n	8007a3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d106      	bne.n	80079c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f841 	bl	8007a46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2202      	movs	r2, #2
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3304      	adds	r3, #4
 80079d4:	4619      	mov	r1, r3
 80079d6:	4610      	mov	r0, r2
 80079d8:	f000 fb1e 	bl	8008018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a4e:	bf00      	nop
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
	...

08007a5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d109      	bne.n	8007a80 <HAL_TIM_PWM_Start+0x24>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	bf14      	ite	ne
 8007a78:	2301      	movne	r3, #1
 8007a7a:	2300      	moveq	r3, #0
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	e03c      	b.n	8007afa <HAL_TIM_PWM_Start+0x9e>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b04      	cmp	r3, #4
 8007a84:	d109      	bne.n	8007a9a <HAL_TIM_PWM_Start+0x3e>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	bf14      	ite	ne
 8007a92:	2301      	movne	r3, #1
 8007a94:	2300      	moveq	r3, #0
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	e02f      	b.n	8007afa <HAL_TIM_PWM_Start+0x9e>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d109      	bne.n	8007ab4 <HAL_TIM_PWM_Start+0x58>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	bf14      	ite	ne
 8007aac:	2301      	movne	r3, #1
 8007aae:	2300      	moveq	r3, #0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	e022      	b.n	8007afa <HAL_TIM_PWM_Start+0x9e>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b0c      	cmp	r3, #12
 8007ab8:	d109      	bne.n	8007ace <HAL_TIM_PWM_Start+0x72>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	bf14      	ite	ne
 8007ac6:	2301      	movne	r3, #1
 8007ac8:	2300      	moveq	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	e015      	b.n	8007afa <HAL_TIM_PWM_Start+0x9e>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b10      	cmp	r3, #16
 8007ad2:	d109      	bne.n	8007ae8 <HAL_TIM_PWM_Start+0x8c>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	bf14      	ite	ne
 8007ae0:	2301      	movne	r3, #1
 8007ae2:	2300      	moveq	r3, #0
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	e008      	b.n	8007afa <HAL_TIM_PWM_Start+0x9e>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	bf14      	ite	ne
 8007af4:	2301      	movne	r3, #1
 8007af6:	2300      	moveq	r3, #0
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e097      	b.n	8007c32 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <HAL_TIM_PWM_Start+0xb6>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b10:	e023      	b.n	8007b5a <HAL_TIM_PWM_Start+0xfe>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d104      	bne.n	8007b22 <HAL_TIM_PWM_Start+0xc6>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b20:	e01b      	b.n	8007b5a <HAL_TIM_PWM_Start+0xfe>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b08      	cmp	r3, #8
 8007b26:	d104      	bne.n	8007b32 <HAL_TIM_PWM_Start+0xd6>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b30:	e013      	b.n	8007b5a <HAL_TIM_PWM_Start+0xfe>
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b0c      	cmp	r3, #12
 8007b36:	d104      	bne.n	8007b42 <HAL_TIM_PWM_Start+0xe6>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b40:	e00b      	b.n	8007b5a <HAL_TIM_PWM_Start+0xfe>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b10      	cmp	r3, #16
 8007b46:	d104      	bne.n	8007b52 <HAL_TIM_PWM_Start+0xf6>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b50:	e003      	b.n	8007b5a <HAL_TIM_PWM_Start+0xfe>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2202      	movs	r2, #2
 8007b56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fe58 	bl	8008818 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a33      	ldr	r2, [pc, #204]	; (8007c3c <HAL_TIM_PWM_Start+0x1e0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d013      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x13e>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a32      	ldr	r2, [pc, #200]	; (8007c40 <HAL_TIM_PWM_Start+0x1e4>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d00e      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x13e>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a30      	ldr	r2, [pc, #192]	; (8007c44 <HAL_TIM_PWM_Start+0x1e8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d009      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x13e>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a2f      	ldr	r2, [pc, #188]	; (8007c48 <HAL_TIM_PWM_Start+0x1ec>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d004      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x13e>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a2d      	ldr	r2, [pc, #180]	; (8007c4c <HAL_TIM_PWM_Start+0x1f0>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d101      	bne.n	8007b9e <HAL_TIM_PWM_Start+0x142>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <HAL_TIM_PWM_Start+0x144>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d007      	beq.n	8007bb4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bb2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a20      	ldr	r2, [pc, #128]	; (8007c3c <HAL_TIM_PWM_Start+0x1e0>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d018      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x194>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc6:	d013      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x194>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a20      	ldr	r2, [pc, #128]	; (8007c50 <HAL_TIM_PWM_Start+0x1f4>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00e      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x194>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a1f      	ldr	r2, [pc, #124]	; (8007c54 <HAL_TIM_PWM_Start+0x1f8>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d009      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x194>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a17      	ldr	r2, [pc, #92]	; (8007c40 <HAL_TIM_PWM_Start+0x1e4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d004      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x194>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a16      	ldr	r2, [pc, #88]	; (8007c44 <HAL_TIM_PWM_Start+0x1e8>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d115      	bne.n	8007c1c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689a      	ldr	r2, [r3, #8]
 8007bf6:	4b18      	ldr	r3, [pc, #96]	; (8007c58 <HAL_TIM_PWM_Start+0x1fc>)
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b06      	cmp	r3, #6
 8007c00:	d015      	beq.n	8007c2e <HAL_TIM_PWM_Start+0x1d2>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c08:	d011      	beq.n	8007c2e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f042 0201 	orr.w	r2, r2, #1
 8007c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c1a:	e008      	b.n	8007c2e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0201 	orr.w	r2, r2, #1
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	e000      	b.n	8007c30 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	40012c00 	.word	0x40012c00
 8007c40:	40013400 	.word	0x40013400
 8007c44:	40014000 	.word	0x40014000
 8007c48:	40014400 	.word	0x40014400
 8007c4c:	40014800 	.word	0x40014800
 8007c50:	40000400 	.word	0x40000400
 8007c54:	40000800 	.word	0x40000800
 8007c58:	00010007 	.word	0x00010007

08007c5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d101      	bne.n	8007c7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c76:	2302      	movs	r3, #2
 8007c78:	e0ff      	b.n	8007e7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b14      	cmp	r3, #20
 8007c86:	f200 80f0 	bhi.w	8007e6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007c8a:	a201      	add	r2, pc, #4	; (adr r2, 8007c90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c90:	08007ce5 	.word	0x08007ce5
 8007c94:	08007e6b 	.word	0x08007e6b
 8007c98:	08007e6b 	.word	0x08007e6b
 8007c9c:	08007e6b 	.word	0x08007e6b
 8007ca0:	08007d25 	.word	0x08007d25
 8007ca4:	08007e6b 	.word	0x08007e6b
 8007ca8:	08007e6b 	.word	0x08007e6b
 8007cac:	08007e6b 	.word	0x08007e6b
 8007cb0:	08007d67 	.word	0x08007d67
 8007cb4:	08007e6b 	.word	0x08007e6b
 8007cb8:	08007e6b 	.word	0x08007e6b
 8007cbc:	08007e6b 	.word	0x08007e6b
 8007cc0:	08007da7 	.word	0x08007da7
 8007cc4:	08007e6b 	.word	0x08007e6b
 8007cc8:	08007e6b 	.word	0x08007e6b
 8007ccc:	08007e6b 	.word	0x08007e6b
 8007cd0:	08007de9 	.word	0x08007de9
 8007cd4:	08007e6b 	.word	0x08007e6b
 8007cd8:	08007e6b 	.word	0x08007e6b
 8007cdc:	08007e6b 	.word	0x08007e6b
 8007ce0:	08007e29 	.word	0x08007e29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68b9      	ldr	r1, [r7, #8]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fa24 	bl	8008138 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	699a      	ldr	r2, [r3, #24]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f042 0208 	orr.w	r2, r2, #8
 8007cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	699a      	ldr	r2, [r3, #24]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f022 0204 	bic.w	r2, r2, #4
 8007d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6999      	ldr	r1, [r3, #24]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	691a      	ldr	r2, [r3, #16]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	619a      	str	r2, [r3, #24]
      break;
 8007d22:	e0a5      	b.n	8007e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68b9      	ldr	r1, [r7, #8]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 fa94 	bl	8008258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	699a      	ldr	r2, [r3, #24]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	699a      	ldr	r2, [r3, #24]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6999      	ldr	r1, [r3, #24]
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	021a      	lsls	r2, r3, #8
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	619a      	str	r2, [r3, #24]
      break;
 8007d64:	e084      	b.n	8007e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68b9      	ldr	r1, [r7, #8]
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 fafd 	bl	800836c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	69da      	ldr	r2, [r3, #28]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f042 0208 	orr.w	r2, r2, #8
 8007d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	69da      	ldr	r2, [r3, #28]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 0204 	bic.w	r2, r2, #4
 8007d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	69d9      	ldr	r1, [r3, #28]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	691a      	ldr	r2, [r3, #16]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	430a      	orrs	r2, r1
 8007da2:	61da      	str	r2, [r3, #28]
      break;
 8007da4:	e064      	b.n	8007e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68b9      	ldr	r1, [r7, #8]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 fb65 	bl	800847c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	69da      	ldr	r2, [r3, #28]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	69da      	ldr	r2, [r3, #28]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69d9      	ldr	r1, [r3, #28]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	021a      	lsls	r2, r3, #8
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	61da      	str	r2, [r3, #28]
      break;
 8007de6:	e043      	b.n	8007e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 fbae 	bl	8008550 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f042 0208 	orr.w	r2, r2, #8
 8007e02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f022 0204 	bic.w	r2, r2, #4
 8007e12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	691a      	ldr	r2, [r3, #16]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	430a      	orrs	r2, r1
 8007e24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e26:	e023      	b.n	8007e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68b9      	ldr	r1, [r7, #8]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fbf2 	bl	8008618 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	021a      	lsls	r2, r3, #8
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e68:	e002      	b.n	8007e70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop

08007e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d101      	bne.n	8007ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	e0b6      	b.n	800800e <HAL_TIM_ConfigClockSource+0x18a>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ebe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007edc:	d03e      	beq.n	8007f5c <HAL_TIM_ConfigClockSource+0xd8>
 8007ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee2:	f200 8087 	bhi.w	8007ff4 <HAL_TIM_ConfigClockSource+0x170>
 8007ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eea:	f000 8086 	beq.w	8007ffa <HAL_TIM_ConfigClockSource+0x176>
 8007eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef2:	d87f      	bhi.n	8007ff4 <HAL_TIM_ConfigClockSource+0x170>
 8007ef4:	2b70      	cmp	r3, #112	; 0x70
 8007ef6:	d01a      	beq.n	8007f2e <HAL_TIM_ConfigClockSource+0xaa>
 8007ef8:	2b70      	cmp	r3, #112	; 0x70
 8007efa:	d87b      	bhi.n	8007ff4 <HAL_TIM_ConfigClockSource+0x170>
 8007efc:	2b60      	cmp	r3, #96	; 0x60
 8007efe:	d050      	beq.n	8007fa2 <HAL_TIM_ConfigClockSource+0x11e>
 8007f00:	2b60      	cmp	r3, #96	; 0x60
 8007f02:	d877      	bhi.n	8007ff4 <HAL_TIM_ConfigClockSource+0x170>
 8007f04:	2b50      	cmp	r3, #80	; 0x50
 8007f06:	d03c      	beq.n	8007f82 <HAL_TIM_ConfigClockSource+0xfe>
 8007f08:	2b50      	cmp	r3, #80	; 0x50
 8007f0a:	d873      	bhi.n	8007ff4 <HAL_TIM_ConfigClockSource+0x170>
 8007f0c:	2b40      	cmp	r3, #64	; 0x40
 8007f0e:	d058      	beq.n	8007fc2 <HAL_TIM_ConfigClockSource+0x13e>
 8007f10:	2b40      	cmp	r3, #64	; 0x40
 8007f12:	d86f      	bhi.n	8007ff4 <HAL_TIM_ConfigClockSource+0x170>
 8007f14:	2b30      	cmp	r3, #48	; 0x30
 8007f16:	d064      	beq.n	8007fe2 <HAL_TIM_ConfigClockSource+0x15e>
 8007f18:	2b30      	cmp	r3, #48	; 0x30
 8007f1a:	d86b      	bhi.n	8007ff4 <HAL_TIM_ConfigClockSource+0x170>
 8007f1c:	2b20      	cmp	r3, #32
 8007f1e:	d060      	beq.n	8007fe2 <HAL_TIM_ConfigClockSource+0x15e>
 8007f20:	2b20      	cmp	r3, #32
 8007f22:	d867      	bhi.n	8007ff4 <HAL_TIM_ConfigClockSource+0x170>
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d05c      	beq.n	8007fe2 <HAL_TIM_ConfigClockSource+0x15e>
 8007f28:	2b10      	cmp	r3, #16
 8007f2a:	d05a      	beq.n	8007fe2 <HAL_TIM_ConfigClockSource+0x15e>
 8007f2c:	e062      	b.n	8007ff4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6818      	ldr	r0, [r3, #0]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	6899      	ldr	r1, [r3, #8]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	f000 fc4b 	bl	80087d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	609a      	str	r2, [r3, #8]
      break;
 8007f5a:	e04f      	b.n	8007ffc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6818      	ldr	r0, [r3, #0]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	6899      	ldr	r1, [r3, #8]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f000 fc34 	bl	80087d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689a      	ldr	r2, [r3, #8]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f7e:	609a      	str	r2, [r3, #8]
      break;
 8007f80:	e03c      	b.n	8007ffc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6818      	ldr	r0, [r3, #0]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	6859      	ldr	r1, [r3, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f000 fba8 	bl	80086e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2150      	movs	r1, #80	; 0x50
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fc01 	bl	80087a2 <TIM_ITRx_SetConfig>
      break;
 8007fa0:	e02c      	b.n	8007ffc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6818      	ldr	r0, [r3, #0]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	6859      	ldr	r1, [r3, #4]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	f000 fbc7 	bl	8008742 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2160      	movs	r1, #96	; 0x60
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fbf1 	bl	80087a2 <TIM_ITRx_SetConfig>
      break;
 8007fc0:	e01c      	b.n	8007ffc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6818      	ldr	r0, [r3, #0]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	6859      	ldr	r1, [r3, #4]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f000 fb88 	bl	80086e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2140      	movs	r1, #64	; 0x40
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 fbe1 	bl	80087a2 <TIM_ITRx_SetConfig>
      break;
 8007fe0:	e00c      	b.n	8007ffc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4619      	mov	r1, r3
 8007fec:	4610      	mov	r0, r2
 8007fee:	f000 fbd8 	bl	80087a2 <TIM_ITRx_SetConfig>
      break;
 8007ff2:	e003      	b.n	8007ffc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff8:	e000      	b.n	8007ffc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007ffa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800800c:	7bfb      	ldrb	r3, [r7, #15]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
	...

08008018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a3c      	ldr	r2, [pc, #240]	; (800811c <TIM_Base_SetConfig+0x104>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d00f      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008036:	d00b      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a39      	ldr	r2, [pc, #228]	; (8008120 <TIM_Base_SetConfig+0x108>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d007      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a38      	ldr	r2, [pc, #224]	; (8008124 <TIM_Base_SetConfig+0x10c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d003      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a37      	ldr	r2, [pc, #220]	; (8008128 <TIM_Base_SetConfig+0x110>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d108      	bne.n	8008062 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	4313      	orrs	r3, r2
 8008060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a2d      	ldr	r2, [pc, #180]	; (800811c <TIM_Base_SetConfig+0x104>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d01b      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008070:	d017      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a2a      	ldr	r2, [pc, #168]	; (8008120 <TIM_Base_SetConfig+0x108>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d013      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a29      	ldr	r2, [pc, #164]	; (8008124 <TIM_Base_SetConfig+0x10c>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d00f      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a28      	ldr	r2, [pc, #160]	; (8008128 <TIM_Base_SetConfig+0x110>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d00b      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a27      	ldr	r2, [pc, #156]	; (800812c <TIM_Base_SetConfig+0x114>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d007      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a26      	ldr	r2, [pc, #152]	; (8008130 <TIM_Base_SetConfig+0x118>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d003      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a25      	ldr	r2, [pc, #148]	; (8008134 <TIM_Base_SetConfig+0x11c>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d108      	bne.n	80080b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	4313      	orrs	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a10      	ldr	r2, [pc, #64]	; (800811c <TIM_Base_SetConfig+0x104>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d00f      	beq.n	8008100 <TIM_Base_SetConfig+0xe8>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a11      	ldr	r2, [pc, #68]	; (8008128 <TIM_Base_SetConfig+0x110>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d00b      	beq.n	8008100 <TIM_Base_SetConfig+0xe8>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a10      	ldr	r2, [pc, #64]	; (800812c <TIM_Base_SetConfig+0x114>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d007      	beq.n	8008100 <TIM_Base_SetConfig+0xe8>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a0f      	ldr	r2, [pc, #60]	; (8008130 <TIM_Base_SetConfig+0x118>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d003      	beq.n	8008100 <TIM_Base_SetConfig+0xe8>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a0e      	ldr	r2, [pc, #56]	; (8008134 <TIM_Base_SetConfig+0x11c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d103      	bne.n	8008108 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	615a      	str	r2, [r3, #20]
}
 800810e:	bf00      	nop
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	40012c00 	.word	0x40012c00
 8008120:	40000400 	.word	0x40000400
 8008124:	40000800 	.word	0x40000800
 8008128:	40013400 	.word	0x40013400
 800812c:	40014000 	.word	0x40014000
 8008130:	40014400 	.word	0x40014400
 8008134:	40014800 	.word	0x40014800

08008138 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	f023 0201 	bic.w	r2, r3, #1
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0303 	bic.w	r3, r3, #3
 8008172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f023 0302 	bic.w	r3, r3, #2
 8008184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	4313      	orrs	r3, r2
 800818e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a2c      	ldr	r2, [pc, #176]	; (8008244 <TIM_OC1_SetConfig+0x10c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00f      	beq.n	80081b8 <TIM_OC1_SetConfig+0x80>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a2b      	ldr	r2, [pc, #172]	; (8008248 <TIM_OC1_SetConfig+0x110>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00b      	beq.n	80081b8 <TIM_OC1_SetConfig+0x80>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a2a      	ldr	r2, [pc, #168]	; (800824c <TIM_OC1_SetConfig+0x114>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d007      	beq.n	80081b8 <TIM_OC1_SetConfig+0x80>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a29      	ldr	r2, [pc, #164]	; (8008250 <TIM_OC1_SetConfig+0x118>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_OC1_SetConfig+0x80>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a28      	ldr	r2, [pc, #160]	; (8008254 <TIM_OC1_SetConfig+0x11c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d10c      	bne.n	80081d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	f023 0308 	bic.w	r3, r3, #8
 80081be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f023 0304 	bic.w	r3, r3, #4
 80081d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a1b      	ldr	r2, [pc, #108]	; (8008244 <TIM_OC1_SetConfig+0x10c>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d00f      	beq.n	80081fa <TIM_OC1_SetConfig+0xc2>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a1a      	ldr	r2, [pc, #104]	; (8008248 <TIM_OC1_SetConfig+0x110>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d00b      	beq.n	80081fa <TIM_OC1_SetConfig+0xc2>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a19      	ldr	r2, [pc, #100]	; (800824c <TIM_OC1_SetConfig+0x114>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d007      	beq.n	80081fa <TIM_OC1_SetConfig+0xc2>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a18      	ldr	r2, [pc, #96]	; (8008250 <TIM_OC1_SetConfig+0x118>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d003      	beq.n	80081fa <TIM_OC1_SetConfig+0xc2>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a17      	ldr	r2, [pc, #92]	; (8008254 <TIM_OC1_SetConfig+0x11c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d111      	bne.n	800821e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	4313      	orrs	r3, r2
 800821c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	621a      	str	r2, [r3, #32]
}
 8008238:	bf00      	nop
 800823a:	371c      	adds	r7, #28
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	40012c00 	.word	0x40012c00
 8008248:	40013400 	.word	0x40013400
 800824c:	40014000 	.word	0x40014000
 8008250:	40014400 	.word	0x40014400
 8008254:	40014800 	.word	0x40014800

08008258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008258:	b480      	push	{r7}
 800825a:	b087      	sub	sp, #28
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	f023 0210 	bic.w	r2, r3, #16
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800828a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	021b      	lsls	r3, r3, #8
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	4313      	orrs	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f023 0320 	bic.w	r3, r3, #32
 80082a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	011b      	lsls	r3, r3, #4
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a28      	ldr	r2, [pc, #160]	; (8008358 <TIM_OC2_SetConfig+0x100>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d003      	beq.n	80082c4 <TIM_OC2_SetConfig+0x6c>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a27      	ldr	r2, [pc, #156]	; (800835c <TIM_OC2_SetConfig+0x104>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d10d      	bne.n	80082e0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	011b      	lsls	r3, r3, #4
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a1d      	ldr	r2, [pc, #116]	; (8008358 <TIM_OC2_SetConfig+0x100>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00f      	beq.n	8008308 <TIM_OC2_SetConfig+0xb0>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a1c      	ldr	r2, [pc, #112]	; (800835c <TIM_OC2_SetConfig+0x104>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00b      	beq.n	8008308 <TIM_OC2_SetConfig+0xb0>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a1b      	ldr	r2, [pc, #108]	; (8008360 <TIM_OC2_SetConfig+0x108>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d007      	beq.n	8008308 <TIM_OC2_SetConfig+0xb0>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a1a      	ldr	r2, [pc, #104]	; (8008364 <TIM_OC2_SetConfig+0x10c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d003      	beq.n	8008308 <TIM_OC2_SetConfig+0xb0>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a19      	ldr	r2, [pc, #100]	; (8008368 <TIM_OC2_SetConfig+0x110>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d113      	bne.n	8008330 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800830e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008316:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	4313      	orrs	r3, r2
 8008322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	4313      	orrs	r3, r2
 800832e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	621a      	str	r2, [r3, #32]
}
 800834a:	bf00      	nop
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	40012c00 	.word	0x40012c00
 800835c:	40013400 	.word	0x40013400
 8008360:	40014000 	.word	0x40014000
 8008364:	40014400 	.word	0x40014400
 8008368:	40014800 	.word	0x40014800

0800836c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800836c:	b480      	push	{r7}
 800836e:	b087      	sub	sp, #28
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800839a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800839e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f023 0303 	bic.w	r3, r3, #3
 80083a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	021b      	lsls	r3, r3, #8
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a27      	ldr	r2, [pc, #156]	; (8008468 <TIM_OC3_SetConfig+0xfc>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d003      	beq.n	80083d6 <TIM_OC3_SetConfig+0x6a>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a26      	ldr	r2, [pc, #152]	; (800846c <TIM_OC3_SetConfig+0x100>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d10d      	bne.n	80083f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	021b      	lsls	r3, r3, #8
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083f0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a1c      	ldr	r2, [pc, #112]	; (8008468 <TIM_OC3_SetConfig+0xfc>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00f      	beq.n	800841a <TIM_OC3_SetConfig+0xae>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a1b      	ldr	r2, [pc, #108]	; (800846c <TIM_OC3_SetConfig+0x100>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00b      	beq.n	800841a <TIM_OC3_SetConfig+0xae>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a1a      	ldr	r2, [pc, #104]	; (8008470 <TIM_OC3_SetConfig+0x104>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d007      	beq.n	800841a <TIM_OC3_SetConfig+0xae>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a19      	ldr	r2, [pc, #100]	; (8008474 <TIM_OC3_SetConfig+0x108>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d003      	beq.n	800841a <TIM_OC3_SetConfig+0xae>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a18      	ldr	r2, [pc, #96]	; (8008478 <TIM_OC3_SetConfig+0x10c>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d113      	bne.n	8008442 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	4313      	orrs	r3, r2
 8008434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	011b      	lsls	r3, r3, #4
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	4313      	orrs	r3, r2
 8008440:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	621a      	str	r2, [r3, #32]
}
 800845c:	bf00      	nop
 800845e:	371c      	adds	r7, #28
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr
 8008468:	40012c00 	.word	0x40012c00
 800846c:	40013400 	.word	0x40013400
 8008470:	40014000 	.word	0x40014000
 8008474:	40014400 	.word	0x40014400
 8008478:	40014800 	.word	0x40014800

0800847c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800847c:	b480      	push	{r7}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	031b      	lsls	r3, r3, #12
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a18      	ldr	r2, [pc, #96]	; (800853c <TIM_OC4_SetConfig+0xc0>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00f      	beq.n	8008500 <TIM_OC4_SetConfig+0x84>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a17      	ldr	r2, [pc, #92]	; (8008540 <TIM_OC4_SetConfig+0xc4>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d00b      	beq.n	8008500 <TIM_OC4_SetConfig+0x84>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a16      	ldr	r2, [pc, #88]	; (8008544 <TIM_OC4_SetConfig+0xc8>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d007      	beq.n	8008500 <TIM_OC4_SetConfig+0x84>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a15      	ldr	r2, [pc, #84]	; (8008548 <TIM_OC4_SetConfig+0xcc>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d003      	beq.n	8008500 <TIM_OC4_SetConfig+0x84>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a14      	ldr	r2, [pc, #80]	; (800854c <TIM_OC4_SetConfig+0xd0>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d109      	bne.n	8008514 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008506:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	019b      	lsls	r3, r3, #6
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	4313      	orrs	r3, r2
 8008512:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	621a      	str	r2, [r3, #32]
}
 800852e:	bf00      	nop
 8008530:	371c      	adds	r7, #28
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	40012c00 	.word	0x40012c00
 8008540:	40013400 	.word	0x40013400
 8008544:	40014000 	.word	0x40014000
 8008548:	40014400 	.word	0x40014400
 800854c:	40014800 	.word	0x40014800

08008550 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800857e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4313      	orrs	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008594:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	041b      	lsls	r3, r3, #16
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	4313      	orrs	r3, r2
 80085a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a17      	ldr	r2, [pc, #92]	; (8008604 <TIM_OC5_SetConfig+0xb4>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00f      	beq.n	80085ca <TIM_OC5_SetConfig+0x7a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a16      	ldr	r2, [pc, #88]	; (8008608 <TIM_OC5_SetConfig+0xb8>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d00b      	beq.n	80085ca <TIM_OC5_SetConfig+0x7a>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a15      	ldr	r2, [pc, #84]	; (800860c <TIM_OC5_SetConfig+0xbc>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d007      	beq.n	80085ca <TIM_OC5_SetConfig+0x7a>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a14      	ldr	r2, [pc, #80]	; (8008610 <TIM_OC5_SetConfig+0xc0>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d003      	beq.n	80085ca <TIM_OC5_SetConfig+0x7a>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a13      	ldr	r2, [pc, #76]	; (8008614 <TIM_OC5_SetConfig+0xc4>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d109      	bne.n	80085de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	021b      	lsls	r3, r3, #8
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	4313      	orrs	r3, r2
 80085dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	621a      	str	r2, [r3, #32]
}
 80085f8:	bf00      	nop
 80085fa:	371c      	adds	r7, #28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	40012c00 	.word	0x40012c00
 8008608:	40013400 	.word	0x40013400
 800860c:	40014000 	.word	0x40014000
 8008610:	40014400 	.word	0x40014400
 8008614:	40014800 	.word	0x40014800

08008618 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800864a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	021b      	lsls	r3, r3, #8
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	4313      	orrs	r3, r2
 8008656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800865e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	051b      	lsls	r3, r3, #20
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	4313      	orrs	r3, r2
 800866a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a18      	ldr	r2, [pc, #96]	; (80086d0 <TIM_OC6_SetConfig+0xb8>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d00f      	beq.n	8008694 <TIM_OC6_SetConfig+0x7c>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a17      	ldr	r2, [pc, #92]	; (80086d4 <TIM_OC6_SetConfig+0xbc>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d00b      	beq.n	8008694 <TIM_OC6_SetConfig+0x7c>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a16      	ldr	r2, [pc, #88]	; (80086d8 <TIM_OC6_SetConfig+0xc0>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d007      	beq.n	8008694 <TIM_OC6_SetConfig+0x7c>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a15      	ldr	r2, [pc, #84]	; (80086dc <TIM_OC6_SetConfig+0xc4>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d003      	beq.n	8008694 <TIM_OC6_SetConfig+0x7c>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a14      	ldr	r2, [pc, #80]	; (80086e0 <TIM_OC6_SetConfig+0xc8>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d109      	bne.n	80086a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800869a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	029b      	lsls	r3, r3, #10
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	621a      	str	r2, [r3, #32]
}
 80086c2:	bf00      	nop
 80086c4:	371c      	adds	r7, #28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	40012c00 	.word	0x40012c00
 80086d4:	40013400 	.word	0x40013400
 80086d8:	40014000 	.word	0x40014000
 80086dc:	40014400 	.word	0x40014400
 80086e0:	40014800 	.word	0x40014800

080086e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	f023 0201 	bic.w	r2, r3, #1
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800870e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	4313      	orrs	r3, r2
 8008718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f023 030a 	bic.w	r3, r3, #10
 8008720:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	4313      	orrs	r3, r2
 8008728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	621a      	str	r2, [r3, #32]
}
 8008736:	bf00      	nop
 8008738:	371c      	adds	r7, #28
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008742:	b480      	push	{r7}
 8008744:	b087      	sub	sp, #28
 8008746:	af00      	add	r7, sp, #0
 8008748:	60f8      	str	r0, [r7, #12]
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	f023 0210 	bic.w	r2, r3, #16
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6a1b      	ldr	r3, [r3, #32]
 8008764:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800876c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	031b      	lsls	r3, r3, #12
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	4313      	orrs	r3, r2
 8008776:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800877e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	011b      	lsls	r3, r3, #4
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	4313      	orrs	r3, r2
 8008788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	621a      	str	r2, [r3, #32]
}
 8008796:	bf00      	nop
 8008798:	371c      	adds	r7, #28
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087a2:	b480      	push	{r7}
 80087a4:	b085      	sub	sp, #20
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087ba:	683a      	ldr	r2, [r7, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	4313      	orrs	r3, r2
 80087c0:	f043 0307 	orr.w	r3, r3, #7
 80087c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	609a      	str	r2, [r3, #8]
}
 80087cc:	bf00      	nop
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	021a      	lsls	r2, r3, #8
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	431a      	orrs	r2, r3
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	4313      	orrs	r3, r2
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	4313      	orrs	r3, r2
 8008804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	609a      	str	r2, [r3, #8]
}
 800880c:	bf00      	nop
 800880e:	371c      	adds	r7, #28
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f003 031f 	and.w	r3, r3, #31
 800882a:	2201      	movs	r2, #1
 800882c:	fa02 f303 	lsl.w	r3, r2, r3
 8008830:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a1a      	ldr	r2, [r3, #32]
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	43db      	mvns	r3, r3
 800883a:	401a      	ands	r2, r3
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6a1a      	ldr	r2, [r3, #32]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	f003 031f 	and.w	r3, r3, #31
 800884a:	6879      	ldr	r1, [r7, #4]
 800884c:	fa01 f303 	lsl.w	r3, r1, r3
 8008850:	431a      	orrs	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	621a      	str	r2, [r3, #32]
}
 8008856:	bf00      	nop
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
	...

08008864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008874:	2b01      	cmp	r3, #1
 8008876:	d101      	bne.n	800887c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008878:	2302      	movs	r3, #2
 800887a:	e063      	b.n	8008944 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2202      	movs	r2, #2
 8008888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a2b      	ldr	r2, [pc, #172]	; (8008950 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d004      	beq.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a2a      	ldr	r2, [pc, #168]	; (8008954 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d108      	bne.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80088b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	4313      	orrs	r3, r2
 80088c0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a1b      	ldr	r2, [pc, #108]	; (8008950 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d018      	beq.n	8008918 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ee:	d013      	beq.n	8008918 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a18      	ldr	r2, [pc, #96]	; (8008958 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d00e      	beq.n	8008918 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a17      	ldr	r2, [pc, #92]	; (800895c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d009      	beq.n	8008918 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a12      	ldr	r2, [pc, #72]	; (8008954 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d004      	beq.n	8008918 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a13      	ldr	r2, [pc, #76]	; (8008960 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d10c      	bne.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800891e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	4313      	orrs	r3, r2
 8008928:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	40012c00 	.word	0x40012c00
 8008954:	40013400 	.word	0x40013400
 8008958:	40000400 	.word	0x40000400
 800895c:	40000800 	.word	0x40000800
 8008960:	40014000 	.word	0x40014000

08008964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e040      	b.n	80089f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800897a:	2b00      	cmp	r3, #0
 800897c:	d106      	bne.n	800898c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7fa ffa6 	bl	80038d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2224      	movs	r2, #36	; 0x24
 8008990:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f022 0201 	bic.w	r2, r2, #1
 80089a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f96c 	bl	8008c80 <UART_SetConfig>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d101      	bne.n	80089b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e022      	b.n	80089f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d002      	beq.n	80089c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fb34 	bl	8009028 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	689a      	ldr	r2, [r3, #8]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f042 0201 	orr.w	r2, r2, #1
 80089ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fbbb 	bl	800916c <UART_CheckIdleState>
 80089f6:	4603      	mov	r3, r0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b08a      	sub	sp, #40	; 0x28
 8008a04:	af02      	add	r7, sp, #8
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	603b      	str	r3, [r7, #0]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	d178      	bne.n	8008b0a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <HAL_UART_Transmit+0x24>
 8008a1e:	88fb      	ldrh	r3, [r7, #6]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e071      	b.n	8008b0c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2221      	movs	r2, #33	; 0x21
 8008a34:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a36:	f7fc fa5b 	bl	8004ef0 <HAL_GetTick>
 8008a3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	88fa      	ldrh	r2, [r7, #6]
 8008a40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	88fa      	ldrh	r2, [r7, #6]
 8008a48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a54:	d108      	bne.n	8008a68 <HAL_UART_Transmit+0x68>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d104      	bne.n	8008a68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	61bb      	str	r3, [r7, #24]
 8008a66:	e003      	b.n	8008a70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a70:	e030      	b.n	8008ad4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2180      	movs	r1, #128	; 0x80
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 fc1d 	bl	80092bc <UART_WaitOnFlagUntilTimeout>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d004      	beq.n	8008a92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e03c      	b.n	8008b0c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10b      	bne.n	8008ab0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	881a      	ldrh	r2, [r3, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aa4:	b292      	uxth	r2, r2
 8008aa6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	3302      	adds	r3, #2
 8008aac:	61bb      	str	r3, [r7, #24]
 8008aae:	e008      	b.n	8008ac2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	781a      	ldrb	r2, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	b292      	uxth	r2, r2
 8008aba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	3b01      	subs	r3, #1
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1c8      	bne.n	8008a72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2140      	movs	r1, #64	; 0x40
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f000 fbe6 	bl	80092bc <UART_WaitOnFlagUntilTimeout>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d004      	beq.n	8008b00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2220      	movs	r2, #32
 8008afa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e005      	b.n	8008b0c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2220      	movs	r2, #32
 8008b04:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	e000      	b.n	8008b0c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008b0a:	2302      	movs	r3, #2
  }
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3720      	adds	r7, #32
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08a      	sub	sp, #40	; 0x28
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	4613      	mov	r3, r2
 8008b22:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b2a:	2b20      	cmp	r3, #32
 8008b2c:	f040 80a3 	bne.w	8008c76 <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <HAL_UART_Receive+0x28>
 8008b36:	88fb      	ldrh	r3, [r7, #6]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e09b      	b.n	8008c78 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2222      	movs	r2, #34	; 0x22
 8008b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b56:	f7fc f9cb 	bl	8004ef0 <HAL_GetTick>
 8008b5a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	88fa      	ldrh	r2, [r7, #6]
 8008b60:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	88fa      	ldrh	r2, [r7, #6]
 8008b68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b74:	d10e      	bne.n	8008b94 <HAL_UART_Receive+0x80>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d105      	bne.n	8008b8a <HAL_UART_Receive+0x76>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008b84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b88:	e01a      	b.n	8008bc0 <HAL_UART_Receive+0xac>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	22ff      	movs	r2, #255	; 0xff
 8008b8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b92:	e015      	b.n	8008bc0 <HAL_UART_Receive+0xac>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10d      	bne.n	8008bb8 <HAL_UART_Receive+0xa4>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d104      	bne.n	8008bae <HAL_UART_Receive+0x9a>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	22ff      	movs	r2, #255	; 0xff
 8008ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bac:	e008      	b.n	8008bc0 <HAL_UART_Receive+0xac>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	227f      	movs	r2, #127	; 0x7f
 8008bb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bb6:	e003      	b.n	8008bc0 <HAL_UART_Receive+0xac>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bc6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd0:	d108      	bne.n	8008be4 <HAL_UART_Receive+0xd0>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d104      	bne.n	8008be4 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	61bb      	str	r3, [r7, #24]
 8008be2:	e003      	b.n	8008bec <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008be8:	2300      	movs	r3, #0
 8008bea:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008bec:	e037      	b.n	8008c5e <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	2120      	movs	r1, #32
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 fb5f 	bl	80092bc <UART_WaitOnFlagUntilTimeout>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d005      	beq.n	8008c10 <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e033      	b.n	8008c78 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10c      	bne.n	8008c30 <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	8a7b      	ldrh	r3, [r7, #18]
 8008c20:	4013      	ands	r3, r2
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	3302      	adds	r3, #2
 8008c2c:	61bb      	str	r3, [r7, #24]
 8008c2e:	e00d      	b.n	8008c4c <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	8a7b      	ldrh	r3, [r7, #18]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	4013      	ands	r3, r2
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	3b01      	subs	r3, #1
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1c1      	bne.n	8008bee <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	e000      	b.n	8008c78 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 8008c76:	2302      	movs	r3, #2
  }
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3720      	adds	r7, #32
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b088      	sub	sp, #32
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689a      	ldr	r2, [r3, #8]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	431a      	orrs	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	69db      	ldr	r3, [r3, #28]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008cae:	f023 030c 	bic.w	r3, r3, #12
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	6812      	ldr	r2, [r2, #0]
 8008cb6:	6979      	ldr	r1, [r7, #20]
 8008cb8:	430b      	orrs	r3, r1
 8008cba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68da      	ldr	r2, [r3, #12]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4aa7      	ldr	r2, [pc, #668]	; (8008f98 <UART_SetConfig+0x318>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d120      	bne.n	8008d42 <UART_SetConfig+0xc2>
 8008d00:	4ba6      	ldr	r3, [pc, #664]	; (8008f9c <UART_SetConfig+0x31c>)
 8008d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d04:	f003 0303 	and.w	r3, r3, #3
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	d817      	bhi.n	8008d3c <UART_SetConfig+0xbc>
 8008d0c:	a201      	add	r2, pc, #4	; (adr r2, 8008d14 <UART_SetConfig+0x94>)
 8008d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d12:	bf00      	nop
 8008d14:	08008d25 	.word	0x08008d25
 8008d18:	08008d31 	.word	0x08008d31
 8008d1c:	08008d37 	.word	0x08008d37
 8008d20:	08008d2b 	.word	0x08008d2b
 8008d24:	2301      	movs	r3, #1
 8008d26:	77fb      	strb	r3, [r7, #31]
 8008d28:	e0b5      	b.n	8008e96 <UART_SetConfig+0x216>
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	77fb      	strb	r3, [r7, #31]
 8008d2e:	e0b2      	b.n	8008e96 <UART_SetConfig+0x216>
 8008d30:	2304      	movs	r3, #4
 8008d32:	77fb      	strb	r3, [r7, #31]
 8008d34:	e0af      	b.n	8008e96 <UART_SetConfig+0x216>
 8008d36:	2308      	movs	r3, #8
 8008d38:	77fb      	strb	r3, [r7, #31]
 8008d3a:	e0ac      	b.n	8008e96 <UART_SetConfig+0x216>
 8008d3c:	2310      	movs	r3, #16
 8008d3e:	77fb      	strb	r3, [r7, #31]
 8008d40:	e0a9      	b.n	8008e96 <UART_SetConfig+0x216>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a96      	ldr	r2, [pc, #600]	; (8008fa0 <UART_SetConfig+0x320>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d124      	bne.n	8008d96 <UART_SetConfig+0x116>
 8008d4c:	4b93      	ldr	r3, [pc, #588]	; (8008f9c <UART_SetConfig+0x31c>)
 8008d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d58:	d011      	beq.n	8008d7e <UART_SetConfig+0xfe>
 8008d5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d5e:	d817      	bhi.n	8008d90 <UART_SetConfig+0x110>
 8008d60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d64:	d011      	beq.n	8008d8a <UART_SetConfig+0x10a>
 8008d66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d6a:	d811      	bhi.n	8008d90 <UART_SetConfig+0x110>
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d003      	beq.n	8008d78 <UART_SetConfig+0xf8>
 8008d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d74:	d006      	beq.n	8008d84 <UART_SetConfig+0x104>
 8008d76:	e00b      	b.n	8008d90 <UART_SetConfig+0x110>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	77fb      	strb	r3, [r7, #31]
 8008d7c:	e08b      	b.n	8008e96 <UART_SetConfig+0x216>
 8008d7e:	2302      	movs	r3, #2
 8008d80:	77fb      	strb	r3, [r7, #31]
 8008d82:	e088      	b.n	8008e96 <UART_SetConfig+0x216>
 8008d84:	2304      	movs	r3, #4
 8008d86:	77fb      	strb	r3, [r7, #31]
 8008d88:	e085      	b.n	8008e96 <UART_SetConfig+0x216>
 8008d8a:	2308      	movs	r3, #8
 8008d8c:	77fb      	strb	r3, [r7, #31]
 8008d8e:	e082      	b.n	8008e96 <UART_SetConfig+0x216>
 8008d90:	2310      	movs	r3, #16
 8008d92:	77fb      	strb	r3, [r7, #31]
 8008d94:	e07f      	b.n	8008e96 <UART_SetConfig+0x216>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a82      	ldr	r2, [pc, #520]	; (8008fa4 <UART_SetConfig+0x324>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d124      	bne.n	8008dea <UART_SetConfig+0x16a>
 8008da0:	4b7e      	ldr	r3, [pc, #504]	; (8008f9c <UART_SetConfig+0x31c>)
 8008da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008da8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008dac:	d011      	beq.n	8008dd2 <UART_SetConfig+0x152>
 8008dae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008db2:	d817      	bhi.n	8008de4 <UART_SetConfig+0x164>
 8008db4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008db8:	d011      	beq.n	8008dde <UART_SetConfig+0x15e>
 8008dba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008dbe:	d811      	bhi.n	8008de4 <UART_SetConfig+0x164>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d003      	beq.n	8008dcc <UART_SetConfig+0x14c>
 8008dc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008dc8:	d006      	beq.n	8008dd8 <UART_SetConfig+0x158>
 8008dca:	e00b      	b.n	8008de4 <UART_SetConfig+0x164>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	77fb      	strb	r3, [r7, #31]
 8008dd0:	e061      	b.n	8008e96 <UART_SetConfig+0x216>
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	77fb      	strb	r3, [r7, #31]
 8008dd6:	e05e      	b.n	8008e96 <UART_SetConfig+0x216>
 8008dd8:	2304      	movs	r3, #4
 8008dda:	77fb      	strb	r3, [r7, #31]
 8008ddc:	e05b      	b.n	8008e96 <UART_SetConfig+0x216>
 8008dde:	2308      	movs	r3, #8
 8008de0:	77fb      	strb	r3, [r7, #31]
 8008de2:	e058      	b.n	8008e96 <UART_SetConfig+0x216>
 8008de4:	2310      	movs	r3, #16
 8008de6:	77fb      	strb	r3, [r7, #31]
 8008de8:	e055      	b.n	8008e96 <UART_SetConfig+0x216>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a6e      	ldr	r2, [pc, #440]	; (8008fa8 <UART_SetConfig+0x328>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d124      	bne.n	8008e3e <UART_SetConfig+0x1be>
 8008df4:	4b69      	ldr	r3, [pc, #420]	; (8008f9c <UART_SetConfig+0x31c>)
 8008df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008dfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e00:	d011      	beq.n	8008e26 <UART_SetConfig+0x1a6>
 8008e02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e06:	d817      	bhi.n	8008e38 <UART_SetConfig+0x1b8>
 8008e08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e0c:	d011      	beq.n	8008e32 <UART_SetConfig+0x1b2>
 8008e0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e12:	d811      	bhi.n	8008e38 <UART_SetConfig+0x1b8>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d003      	beq.n	8008e20 <UART_SetConfig+0x1a0>
 8008e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e1c:	d006      	beq.n	8008e2c <UART_SetConfig+0x1ac>
 8008e1e:	e00b      	b.n	8008e38 <UART_SetConfig+0x1b8>
 8008e20:	2300      	movs	r3, #0
 8008e22:	77fb      	strb	r3, [r7, #31]
 8008e24:	e037      	b.n	8008e96 <UART_SetConfig+0x216>
 8008e26:	2302      	movs	r3, #2
 8008e28:	77fb      	strb	r3, [r7, #31]
 8008e2a:	e034      	b.n	8008e96 <UART_SetConfig+0x216>
 8008e2c:	2304      	movs	r3, #4
 8008e2e:	77fb      	strb	r3, [r7, #31]
 8008e30:	e031      	b.n	8008e96 <UART_SetConfig+0x216>
 8008e32:	2308      	movs	r3, #8
 8008e34:	77fb      	strb	r3, [r7, #31]
 8008e36:	e02e      	b.n	8008e96 <UART_SetConfig+0x216>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	77fb      	strb	r3, [r7, #31]
 8008e3c:	e02b      	b.n	8008e96 <UART_SetConfig+0x216>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a5a      	ldr	r2, [pc, #360]	; (8008fac <UART_SetConfig+0x32c>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d124      	bne.n	8008e92 <UART_SetConfig+0x212>
 8008e48:	4b54      	ldr	r3, [pc, #336]	; (8008f9c <UART_SetConfig+0x31c>)
 8008e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008e50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008e54:	d011      	beq.n	8008e7a <UART_SetConfig+0x1fa>
 8008e56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008e5a:	d817      	bhi.n	8008e8c <UART_SetConfig+0x20c>
 8008e5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e60:	d011      	beq.n	8008e86 <UART_SetConfig+0x206>
 8008e62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e66:	d811      	bhi.n	8008e8c <UART_SetConfig+0x20c>
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d003      	beq.n	8008e74 <UART_SetConfig+0x1f4>
 8008e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e70:	d006      	beq.n	8008e80 <UART_SetConfig+0x200>
 8008e72:	e00b      	b.n	8008e8c <UART_SetConfig+0x20c>
 8008e74:	2300      	movs	r3, #0
 8008e76:	77fb      	strb	r3, [r7, #31]
 8008e78:	e00d      	b.n	8008e96 <UART_SetConfig+0x216>
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	77fb      	strb	r3, [r7, #31]
 8008e7e:	e00a      	b.n	8008e96 <UART_SetConfig+0x216>
 8008e80:	2304      	movs	r3, #4
 8008e82:	77fb      	strb	r3, [r7, #31]
 8008e84:	e007      	b.n	8008e96 <UART_SetConfig+0x216>
 8008e86:	2308      	movs	r3, #8
 8008e88:	77fb      	strb	r3, [r7, #31]
 8008e8a:	e004      	b.n	8008e96 <UART_SetConfig+0x216>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	77fb      	strb	r3, [r7, #31]
 8008e90:	e001      	b.n	8008e96 <UART_SetConfig+0x216>
 8008e92:	2310      	movs	r3, #16
 8008e94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e9e:	d15b      	bne.n	8008f58 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8008ea0:	7ffb      	ldrb	r3, [r7, #31]
 8008ea2:	2b08      	cmp	r3, #8
 8008ea4:	d827      	bhi.n	8008ef6 <UART_SetConfig+0x276>
 8008ea6:	a201      	add	r2, pc, #4	; (adr r2, 8008eac <UART_SetConfig+0x22c>)
 8008ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eac:	08008ed1 	.word	0x08008ed1
 8008eb0:	08008ed9 	.word	0x08008ed9
 8008eb4:	08008ee1 	.word	0x08008ee1
 8008eb8:	08008ef7 	.word	0x08008ef7
 8008ebc:	08008ee7 	.word	0x08008ee7
 8008ec0:	08008ef7 	.word	0x08008ef7
 8008ec4:	08008ef7 	.word	0x08008ef7
 8008ec8:	08008ef7 	.word	0x08008ef7
 8008ecc:	08008eef 	.word	0x08008eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ed0:	f7fd ff60 	bl	8006d94 <HAL_RCC_GetPCLK1Freq>
 8008ed4:	61b8      	str	r0, [r7, #24]
        break;
 8008ed6:	e013      	b.n	8008f00 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ed8:	f7fd ff7e 	bl	8006dd8 <HAL_RCC_GetPCLK2Freq>
 8008edc:	61b8      	str	r0, [r7, #24]
        break;
 8008ede:	e00f      	b.n	8008f00 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ee0:	4b33      	ldr	r3, [pc, #204]	; (8008fb0 <UART_SetConfig+0x330>)
 8008ee2:	61bb      	str	r3, [r7, #24]
        break;
 8008ee4:	e00c      	b.n	8008f00 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ee6:	f7fd fedf 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 8008eea:	61b8      	str	r0, [r7, #24]
        break;
 8008eec:	e008      	b.n	8008f00 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ef2:	61bb      	str	r3, [r7, #24]
        break;
 8008ef4:	e004      	b.n	8008f00 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	77bb      	strb	r3, [r7, #30]
        break;
 8008efe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f000 8082 	beq.w	800900c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	005a      	lsls	r2, r3, #1
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	085b      	lsrs	r3, r3, #1
 8008f12:	441a      	add	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	2b0f      	cmp	r3, #15
 8008f22:	d916      	bls.n	8008f52 <UART_SetConfig+0x2d2>
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f2a:	d212      	bcs.n	8008f52 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	f023 030f 	bic.w	r3, r3, #15
 8008f34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	085b      	lsrs	r3, r3, #1
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	f003 0307 	and.w	r3, r3, #7
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	89fb      	ldrh	r3, [r7, #14]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	89fa      	ldrh	r2, [r7, #14]
 8008f4e:	60da      	str	r2, [r3, #12]
 8008f50:	e05c      	b.n	800900c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	77bb      	strb	r3, [r7, #30]
 8008f56:	e059      	b.n	800900c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f58:	7ffb      	ldrb	r3, [r7, #31]
 8008f5a:	2b08      	cmp	r3, #8
 8008f5c:	d835      	bhi.n	8008fca <UART_SetConfig+0x34a>
 8008f5e:	a201      	add	r2, pc, #4	; (adr r2, 8008f64 <UART_SetConfig+0x2e4>)
 8008f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f64:	08008f89 	.word	0x08008f89
 8008f68:	08008f91 	.word	0x08008f91
 8008f6c:	08008fb5 	.word	0x08008fb5
 8008f70:	08008fcb 	.word	0x08008fcb
 8008f74:	08008fbb 	.word	0x08008fbb
 8008f78:	08008fcb 	.word	0x08008fcb
 8008f7c:	08008fcb 	.word	0x08008fcb
 8008f80:	08008fcb 	.word	0x08008fcb
 8008f84:	08008fc3 	.word	0x08008fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f88:	f7fd ff04 	bl	8006d94 <HAL_RCC_GetPCLK1Freq>
 8008f8c:	61b8      	str	r0, [r7, #24]
        break;
 8008f8e:	e021      	b.n	8008fd4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f90:	f7fd ff22 	bl	8006dd8 <HAL_RCC_GetPCLK2Freq>
 8008f94:	61b8      	str	r0, [r7, #24]
        break;
 8008f96:	e01d      	b.n	8008fd4 <UART_SetConfig+0x354>
 8008f98:	40013800 	.word	0x40013800
 8008f9c:	40021000 	.word	0x40021000
 8008fa0:	40004400 	.word	0x40004400
 8008fa4:	40004800 	.word	0x40004800
 8008fa8:	40004c00 	.word	0x40004c00
 8008fac:	40005000 	.word	0x40005000
 8008fb0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fb4:	4b1b      	ldr	r3, [pc, #108]	; (8009024 <UART_SetConfig+0x3a4>)
 8008fb6:	61bb      	str	r3, [r7, #24]
        break;
 8008fb8:	e00c      	b.n	8008fd4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fba:	f7fd fe75 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 8008fbe:	61b8      	str	r0, [r7, #24]
        break;
 8008fc0:	e008      	b.n	8008fd4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fc6:	61bb      	str	r3, [r7, #24]
        break;
 8008fc8:	e004      	b.n	8008fd4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	77bb      	strb	r3, [r7, #30]
        break;
 8008fd2:	bf00      	nop
    }

    if (pclk != 0U)
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d018      	beq.n	800900c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	085a      	lsrs	r2, r3, #1
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	441a      	add	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	2b0f      	cmp	r3, #15
 8008ff2:	d909      	bls.n	8009008 <UART_SetConfig+0x388>
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ffa:	d205      	bcs.n	8009008 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	60da      	str	r2, [r3, #12]
 8009006:	e001      	b.n	800900c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009018:	7fbb      	ldrb	r3, [r7, #30]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3720      	adds	r7, #32
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	007a1200 	.word	0x007a1200

08009028 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00a      	beq.n	8009052 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	430a      	orrs	r2, r1
 8009050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	f003 0302 	and.w	r3, r3, #2
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00a      	beq.n	8009074 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	430a      	orrs	r2, r1
 8009072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	f003 0304 	and.w	r3, r3, #4
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00a      	beq.n	8009096 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	430a      	orrs	r2, r1
 8009094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909a:	f003 0308 	and.w	r3, r3, #8
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00a      	beq.n	80090b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	430a      	orrs	r2, r1
 80090b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090bc:	f003 0310 	and.w	r3, r3, #16
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00a      	beq.n	80090da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	430a      	orrs	r2, r1
 80090d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	f003 0320 	and.w	r3, r3, #32
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00a      	beq.n	80090fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	430a      	orrs	r2, r1
 80090fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009104:	2b00      	cmp	r3, #0
 8009106:	d01a      	beq.n	800913e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	430a      	orrs	r2, r1
 800911c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009126:	d10a      	bne.n	800913e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	430a      	orrs	r2, r1
 800913c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00a      	beq.n	8009160 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	430a      	orrs	r2, r1
 800915e:	605a      	str	r2, [r3, #4]
  }
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b098      	sub	sp, #96	; 0x60
 8009170:	af02      	add	r7, sp, #8
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800917c:	f7fb feb8 	bl	8004ef0 <HAL_GetTick>
 8009180:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 0308 	and.w	r3, r3, #8
 800918c:	2b08      	cmp	r3, #8
 800918e:	d12e      	bne.n	80091ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009190:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009198:	2200      	movs	r2, #0
 800919a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f88c 	bl	80092bc <UART_WaitOnFlagUntilTimeout>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d021      	beq.n	80091ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091be:	653b      	str	r3, [r7, #80]	; 0x50
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	461a      	mov	r2, r3
 80091c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091c8:	647b      	str	r3, [r7, #68]	; 0x44
 80091ca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e6      	bne.n	80091aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2220      	movs	r2, #32
 80091e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e062      	b.n	80092b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0304 	and.w	r3, r3, #4
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	d149      	bne.n	8009290 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009204:	2200      	movs	r2, #0
 8009206:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f856 	bl	80092bc <UART_WaitOnFlagUntilTimeout>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d03c      	beq.n	8009290 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	e853 3f00 	ldrex	r3, [r3]
 8009222:	623b      	str	r3, [r7, #32]
   return(result);
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800922a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	461a      	mov	r2, r3
 8009232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009234:	633b      	str	r3, [r7, #48]	; 0x30
 8009236:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800923a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800923c:	e841 2300 	strex	r3, r2, [r1]
 8009240:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e6      	bne.n	8009216 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3308      	adds	r3, #8
 800924e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	e853 3f00 	ldrex	r3, [r3]
 8009256:	60fb      	str	r3, [r7, #12]
   return(result);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f023 0301 	bic.w	r3, r3, #1
 800925e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3308      	adds	r3, #8
 8009266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009268:	61fa      	str	r2, [r7, #28]
 800926a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926c:	69b9      	ldr	r1, [r7, #24]
 800926e:	69fa      	ldr	r2, [r7, #28]
 8009270:	e841 2300 	strex	r3, r2, [r1]
 8009274:	617b      	str	r3, [r7, #20]
   return(result);
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1e5      	bne.n	8009248 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2220      	movs	r2, #32
 8009280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e011      	b.n	80092b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2220      	movs	r2, #32
 8009294:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2220      	movs	r2, #32
 800929a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3758      	adds	r7, #88	; 0x58
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	603b      	str	r3, [r7, #0]
 80092c8:	4613      	mov	r3, r2
 80092ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092cc:	e049      	b.n	8009362 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d4:	d045      	beq.n	8009362 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092d6:	f7fb fe0b 	bl	8004ef0 <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	69ba      	ldr	r2, [r7, #24]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d302      	bcc.n	80092ec <UART_WaitOnFlagUntilTimeout+0x30>
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e048      	b.n	8009382 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0304 	and.w	r3, r3, #4
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d031      	beq.n	8009362 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	f003 0308 	and.w	r3, r3, #8
 8009308:	2b08      	cmp	r3, #8
 800930a:	d110      	bne.n	800932e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2208      	movs	r2, #8
 8009312:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 f838 	bl	800938a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2208      	movs	r2, #8
 800931e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e029      	b.n	8009382 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800933c:	d111      	bne.n	8009362 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 f81e 	bl	800938a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2220      	movs	r2, #32
 8009352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e00f      	b.n	8009382 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	69da      	ldr	r2, [r3, #28]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	4013      	ands	r3, r2
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	429a      	cmp	r2, r3
 8009370:	bf0c      	ite	eq
 8009372:	2301      	moveq	r3, #1
 8009374:	2300      	movne	r3, #0
 8009376:	b2db      	uxtb	r3, r3
 8009378:	461a      	mov	r2, r3
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	429a      	cmp	r2, r3
 800937e:	d0a6      	beq.n	80092ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800938a:	b480      	push	{r7}
 800938c:	b095      	sub	sp, #84	; 0x54
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	461a      	mov	r2, r3
 80093ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b0:	643b      	str	r3, [r7, #64]	; 0x40
 80093b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093b8:	e841 2300 	strex	r3, r2, [r1]
 80093bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1e6      	bne.n	8009392 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3308      	adds	r3, #8
 80093ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	e853 3f00 	ldrex	r3, [r3]
 80093d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	f023 0301 	bic.w	r3, r3, #1
 80093da:	64bb      	str	r3, [r7, #72]	; 0x48
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3308      	adds	r3, #8
 80093e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ec:	e841 2300 	strex	r3, r2, [r1]
 80093f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1e5      	bne.n	80093c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d118      	bne.n	8009432 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	e853 3f00 	ldrex	r3, [r3]
 800940c:	60bb      	str	r3, [r7, #8]
   return(result);
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	f023 0310 	bic.w	r3, r3, #16
 8009414:	647b      	str	r3, [r7, #68]	; 0x44
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	461a      	mov	r2, r3
 800941c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800941e:	61bb      	str	r3, [r7, #24]
 8009420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009422:	6979      	ldr	r1, [r7, #20]
 8009424:	69ba      	ldr	r2, [r7, #24]
 8009426:	e841 2300 	strex	r3, r2, [r1]
 800942a:	613b      	str	r3, [r7, #16]
   return(result);
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1e6      	bne.n	8009400 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2220      	movs	r2, #32
 8009436:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009446:	bf00      	nop
 8009448:	3754      	adds	r7, #84	; 0x54
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr

08009452 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009452:	b480      	push	{r7}
 8009454:	b085      	sub	sp, #20
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800945a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800945e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009466:	b29a      	uxth	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	b29b      	uxth	r3, r3
 800946c:	43db      	mvns	r3, r3
 800946e:	b29b      	uxth	r3, r3
 8009470:	4013      	ands	r3, r2
 8009472:	b29a      	uxth	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009488:	b084      	sub	sp, #16
 800948a:	b480      	push	{r7}
 800948c:	b083      	sub	sp, #12
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	f107 0014 	add.w	r0, r7, #20
 8009496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	b004      	add	sp, #16
 80094c8:	4770      	bx	lr
	...

080094cc <__errno>:
 80094cc:	4b01      	ldr	r3, [pc, #4]	; (80094d4 <__errno+0x8>)
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	20000070 	.word	0x20000070

080094d8 <__libc_init_array>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	4d0d      	ldr	r5, [pc, #52]	; (8009510 <__libc_init_array+0x38>)
 80094dc:	4c0d      	ldr	r4, [pc, #52]	; (8009514 <__libc_init_array+0x3c>)
 80094de:	1b64      	subs	r4, r4, r5
 80094e0:	10a4      	asrs	r4, r4, #2
 80094e2:	2600      	movs	r6, #0
 80094e4:	42a6      	cmp	r6, r4
 80094e6:	d109      	bne.n	80094fc <__libc_init_array+0x24>
 80094e8:	4d0b      	ldr	r5, [pc, #44]	; (8009518 <__libc_init_array+0x40>)
 80094ea:	4c0c      	ldr	r4, [pc, #48]	; (800951c <__libc_init_array+0x44>)
 80094ec:	f001 fa9e 	bl	800aa2c <_init>
 80094f0:	1b64      	subs	r4, r4, r5
 80094f2:	10a4      	asrs	r4, r4, #2
 80094f4:	2600      	movs	r6, #0
 80094f6:	42a6      	cmp	r6, r4
 80094f8:	d105      	bne.n	8009506 <__libc_init_array+0x2e>
 80094fa:	bd70      	pop	{r4, r5, r6, pc}
 80094fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009500:	4798      	blx	r3
 8009502:	3601      	adds	r6, #1
 8009504:	e7ee      	b.n	80094e4 <__libc_init_array+0xc>
 8009506:	f855 3b04 	ldr.w	r3, [r5], #4
 800950a:	4798      	blx	r3
 800950c:	3601      	adds	r6, #1
 800950e:	e7f2      	b.n	80094f6 <__libc_init_array+0x1e>
 8009510:	0800ae34 	.word	0x0800ae34
 8009514:	0800ae34 	.word	0x0800ae34
 8009518:	0800ae34 	.word	0x0800ae34
 800951c:	0800ae38 	.word	0x0800ae38

08009520 <malloc>:
 8009520:	4b02      	ldr	r3, [pc, #8]	; (800952c <malloc+0xc>)
 8009522:	4601      	mov	r1, r0
 8009524:	6818      	ldr	r0, [r3, #0]
 8009526:	f000 b87f 	b.w	8009628 <_malloc_r>
 800952a:	bf00      	nop
 800952c:	20000070 	.word	0x20000070

08009530 <free>:
 8009530:	4b02      	ldr	r3, [pc, #8]	; (800953c <free+0xc>)
 8009532:	4601      	mov	r1, r0
 8009534:	6818      	ldr	r0, [r3, #0]
 8009536:	f000 b80b 	b.w	8009550 <_free_r>
 800953a:	bf00      	nop
 800953c:	20000070 	.word	0x20000070

08009540 <memset>:
 8009540:	4402      	add	r2, r0
 8009542:	4603      	mov	r3, r0
 8009544:	4293      	cmp	r3, r2
 8009546:	d100      	bne.n	800954a <memset+0xa>
 8009548:	4770      	bx	lr
 800954a:	f803 1b01 	strb.w	r1, [r3], #1
 800954e:	e7f9      	b.n	8009544 <memset+0x4>

08009550 <_free_r>:
 8009550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009552:	2900      	cmp	r1, #0
 8009554:	d044      	beq.n	80095e0 <_free_r+0x90>
 8009556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800955a:	9001      	str	r0, [sp, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	f1a1 0404 	sub.w	r4, r1, #4
 8009562:	bfb8      	it	lt
 8009564:	18e4      	addlt	r4, r4, r3
 8009566:	f000 f9d3 	bl	8009910 <__malloc_lock>
 800956a:	4a1e      	ldr	r2, [pc, #120]	; (80095e4 <_free_r+0x94>)
 800956c:	9801      	ldr	r0, [sp, #4]
 800956e:	6813      	ldr	r3, [r2, #0]
 8009570:	b933      	cbnz	r3, 8009580 <_free_r+0x30>
 8009572:	6063      	str	r3, [r4, #4]
 8009574:	6014      	str	r4, [r2, #0]
 8009576:	b003      	add	sp, #12
 8009578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800957c:	f000 b9ce 	b.w	800991c <__malloc_unlock>
 8009580:	42a3      	cmp	r3, r4
 8009582:	d908      	bls.n	8009596 <_free_r+0x46>
 8009584:	6825      	ldr	r5, [r4, #0]
 8009586:	1961      	adds	r1, r4, r5
 8009588:	428b      	cmp	r3, r1
 800958a:	bf01      	itttt	eq
 800958c:	6819      	ldreq	r1, [r3, #0]
 800958e:	685b      	ldreq	r3, [r3, #4]
 8009590:	1949      	addeq	r1, r1, r5
 8009592:	6021      	streq	r1, [r4, #0]
 8009594:	e7ed      	b.n	8009572 <_free_r+0x22>
 8009596:	461a      	mov	r2, r3
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	b10b      	cbz	r3, 80095a0 <_free_r+0x50>
 800959c:	42a3      	cmp	r3, r4
 800959e:	d9fa      	bls.n	8009596 <_free_r+0x46>
 80095a0:	6811      	ldr	r1, [r2, #0]
 80095a2:	1855      	adds	r5, r2, r1
 80095a4:	42a5      	cmp	r5, r4
 80095a6:	d10b      	bne.n	80095c0 <_free_r+0x70>
 80095a8:	6824      	ldr	r4, [r4, #0]
 80095aa:	4421      	add	r1, r4
 80095ac:	1854      	adds	r4, r2, r1
 80095ae:	42a3      	cmp	r3, r4
 80095b0:	6011      	str	r1, [r2, #0]
 80095b2:	d1e0      	bne.n	8009576 <_free_r+0x26>
 80095b4:	681c      	ldr	r4, [r3, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	6053      	str	r3, [r2, #4]
 80095ba:	4421      	add	r1, r4
 80095bc:	6011      	str	r1, [r2, #0]
 80095be:	e7da      	b.n	8009576 <_free_r+0x26>
 80095c0:	d902      	bls.n	80095c8 <_free_r+0x78>
 80095c2:	230c      	movs	r3, #12
 80095c4:	6003      	str	r3, [r0, #0]
 80095c6:	e7d6      	b.n	8009576 <_free_r+0x26>
 80095c8:	6825      	ldr	r5, [r4, #0]
 80095ca:	1961      	adds	r1, r4, r5
 80095cc:	428b      	cmp	r3, r1
 80095ce:	bf04      	itt	eq
 80095d0:	6819      	ldreq	r1, [r3, #0]
 80095d2:	685b      	ldreq	r3, [r3, #4]
 80095d4:	6063      	str	r3, [r4, #4]
 80095d6:	bf04      	itt	eq
 80095d8:	1949      	addeq	r1, r1, r5
 80095da:	6021      	streq	r1, [r4, #0]
 80095dc:	6054      	str	r4, [r2, #4]
 80095de:	e7ca      	b.n	8009576 <_free_r+0x26>
 80095e0:	b003      	add	sp, #12
 80095e2:	bd30      	pop	{r4, r5, pc}
 80095e4:	20000760 	.word	0x20000760

080095e8 <sbrk_aligned>:
 80095e8:	b570      	push	{r4, r5, r6, lr}
 80095ea:	4e0e      	ldr	r6, [pc, #56]	; (8009624 <sbrk_aligned+0x3c>)
 80095ec:	460c      	mov	r4, r1
 80095ee:	6831      	ldr	r1, [r6, #0]
 80095f0:	4605      	mov	r5, r0
 80095f2:	b911      	cbnz	r1, 80095fa <sbrk_aligned+0x12>
 80095f4:	f000 f8f8 	bl	80097e8 <_sbrk_r>
 80095f8:	6030      	str	r0, [r6, #0]
 80095fa:	4621      	mov	r1, r4
 80095fc:	4628      	mov	r0, r5
 80095fe:	f000 f8f3 	bl	80097e8 <_sbrk_r>
 8009602:	1c43      	adds	r3, r0, #1
 8009604:	d00a      	beq.n	800961c <sbrk_aligned+0x34>
 8009606:	1cc4      	adds	r4, r0, #3
 8009608:	f024 0403 	bic.w	r4, r4, #3
 800960c:	42a0      	cmp	r0, r4
 800960e:	d007      	beq.n	8009620 <sbrk_aligned+0x38>
 8009610:	1a21      	subs	r1, r4, r0
 8009612:	4628      	mov	r0, r5
 8009614:	f000 f8e8 	bl	80097e8 <_sbrk_r>
 8009618:	3001      	adds	r0, #1
 800961a:	d101      	bne.n	8009620 <sbrk_aligned+0x38>
 800961c:	f04f 34ff 	mov.w	r4, #4294967295
 8009620:	4620      	mov	r0, r4
 8009622:	bd70      	pop	{r4, r5, r6, pc}
 8009624:	20000764 	.word	0x20000764

08009628 <_malloc_r>:
 8009628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800962c:	1ccd      	adds	r5, r1, #3
 800962e:	f025 0503 	bic.w	r5, r5, #3
 8009632:	3508      	adds	r5, #8
 8009634:	2d0c      	cmp	r5, #12
 8009636:	bf38      	it	cc
 8009638:	250c      	movcc	r5, #12
 800963a:	2d00      	cmp	r5, #0
 800963c:	4607      	mov	r7, r0
 800963e:	db01      	blt.n	8009644 <_malloc_r+0x1c>
 8009640:	42a9      	cmp	r1, r5
 8009642:	d905      	bls.n	8009650 <_malloc_r+0x28>
 8009644:	230c      	movs	r3, #12
 8009646:	603b      	str	r3, [r7, #0]
 8009648:	2600      	movs	r6, #0
 800964a:	4630      	mov	r0, r6
 800964c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009650:	4e2e      	ldr	r6, [pc, #184]	; (800970c <_malloc_r+0xe4>)
 8009652:	f000 f95d 	bl	8009910 <__malloc_lock>
 8009656:	6833      	ldr	r3, [r6, #0]
 8009658:	461c      	mov	r4, r3
 800965a:	bb34      	cbnz	r4, 80096aa <_malloc_r+0x82>
 800965c:	4629      	mov	r1, r5
 800965e:	4638      	mov	r0, r7
 8009660:	f7ff ffc2 	bl	80095e8 <sbrk_aligned>
 8009664:	1c43      	adds	r3, r0, #1
 8009666:	4604      	mov	r4, r0
 8009668:	d14d      	bne.n	8009706 <_malloc_r+0xde>
 800966a:	6834      	ldr	r4, [r6, #0]
 800966c:	4626      	mov	r6, r4
 800966e:	2e00      	cmp	r6, #0
 8009670:	d140      	bne.n	80096f4 <_malloc_r+0xcc>
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	4631      	mov	r1, r6
 8009676:	4638      	mov	r0, r7
 8009678:	eb04 0803 	add.w	r8, r4, r3
 800967c:	f000 f8b4 	bl	80097e8 <_sbrk_r>
 8009680:	4580      	cmp	r8, r0
 8009682:	d13a      	bne.n	80096fa <_malloc_r+0xd2>
 8009684:	6821      	ldr	r1, [r4, #0]
 8009686:	3503      	adds	r5, #3
 8009688:	1a6d      	subs	r5, r5, r1
 800968a:	f025 0503 	bic.w	r5, r5, #3
 800968e:	3508      	adds	r5, #8
 8009690:	2d0c      	cmp	r5, #12
 8009692:	bf38      	it	cc
 8009694:	250c      	movcc	r5, #12
 8009696:	4629      	mov	r1, r5
 8009698:	4638      	mov	r0, r7
 800969a:	f7ff ffa5 	bl	80095e8 <sbrk_aligned>
 800969e:	3001      	adds	r0, #1
 80096a0:	d02b      	beq.n	80096fa <_malloc_r+0xd2>
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	442b      	add	r3, r5
 80096a6:	6023      	str	r3, [r4, #0]
 80096a8:	e00e      	b.n	80096c8 <_malloc_r+0xa0>
 80096aa:	6822      	ldr	r2, [r4, #0]
 80096ac:	1b52      	subs	r2, r2, r5
 80096ae:	d41e      	bmi.n	80096ee <_malloc_r+0xc6>
 80096b0:	2a0b      	cmp	r2, #11
 80096b2:	d916      	bls.n	80096e2 <_malloc_r+0xba>
 80096b4:	1961      	adds	r1, r4, r5
 80096b6:	42a3      	cmp	r3, r4
 80096b8:	6025      	str	r5, [r4, #0]
 80096ba:	bf18      	it	ne
 80096bc:	6059      	strne	r1, [r3, #4]
 80096be:	6863      	ldr	r3, [r4, #4]
 80096c0:	bf08      	it	eq
 80096c2:	6031      	streq	r1, [r6, #0]
 80096c4:	5162      	str	r2, [r4, r5]
 80096c6:	604b      	str	r3, [r1, #4]
 80096c8:	4638      	mov	r0, r7
 80096ca:	f104 060b 	add.w	r6, r4, #11
 80096ce:	f000 f925 	bl	800991c <__malloc_unlock>
 80096d2:	f026 0607 	bic.w	r6, r6, #7
 80096d6:	1d23      	adds	r3, r4, #4
 80096d8:	1af2      	subs	r2, r6, r3
 80096da:	d0b6      	beq.n	800964a <_malloc_r+0x22>
 80096dc:	1b9b      	subs	r3, r3, r6
 80096de:	50a3      	str	r3, [r4, r2]
 80096e0:	e7b3      	b.n	800964a <_malloc_r+0x22>
 80096e2:	6862      	ldr	r2, [r4, #4]
 80096e4:	42a3      	cmp	r3, r4
 80096e6:	bf0c      	ite	eq
 80096e8:	6032      	streq	r2, [r6, #0]
 80096ea:	605a      	strne	r2, [r3, #4]
 80096ec:	e7ec      	b.n	80096c8 <_malloc_r+0xa0>
 80096ee:	4623      	mov	r3, r4
 80096f0:	6864      	ldr	r4, [r4, #4]
 80096f2:	e7b2      	b.n	800965a <_malloc_r+0x32>
 80096f4:	4634      	mov	r4, r6
 80096f6:	6876      	ldr	r6, [r6, #4]
 80096f8:	e7b9      	b.n	800966e <_malloc_r+0x46>
 80096fa:	230c      	movs	r3, #12
 80096fc:	603b      	str	r3, [r7, #0]
 80096fe:	4638      	mov	r0, r7
 8009700:	f000 f90c 	bl	800991c <__malloc_unlock>
 8009704:	e7a1      	b.n	800964a <_malloc_r+0x22>
 8009706:	6025      	str	r5, [r4, #0]
 8009708:	e7de      	b.n	80096c8 <_malloc_r+0xa0>
 800970a:	bf00      	nop
 800970c:	20000760 	.word	0x20000760

08009710 <srand>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4b10      	ldr	r3, [pc, #64]	; (8009754 <srand+0x44>)
 8009714:	681d      	ldr	r5, [r3, #0]
 8009716:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009718:	4604      	mov	r4, r0
 800971a:	b9b3      	cbnz	r3, 800974a <srand+0x3a>
 800971c:	2018      	movs	r0, #24
 800971e:	f7ff feff 	bl	8009520 <malloc>
 8009722:	4602      	mov	r2, r0
 8009724:	63a8      	str	r0, [r5, #56]	; 0x38
 8009726:	b920      	cbnz	r0, 8009732 <srand+0x22>
 8009728:	4b0b      	ldr	r3, [pc, #44]	; (8009758 <srand+0x48>)
 800972a:	480c      	ldr	r0, [pc, #48]	; (800975c <srand+0x4c>)
 800972c:	2142      	movs	r1, #66	; 0x42
 800972e:	f000 f8bf 	bl	80098b0 <__assert_func>
 8009732:	490b      	ldr	r1, [pc, #44]	; (8009760 <srand+0x50>)
 8009734:	4b0b      	ldr	r3, [pc, #44]	; (8009764 <srand+0x54>)
 8009736:	e9c0 1300 	strd	r1, r3, [r0]
 800973a:	4b0b      	ldr	r3, [pc, #44]	; (8009768 <srand+0x58>)
 800973c:	6083      	str	r3, [r0, #8]
 800973e:	230b      	movs	r3, #11
 8009740:	8183      	strh	r3, [r0, #12]
 8009742:	2100      	movs	r1, #0
 8009744:	2001      	movs	r0, #1
 8009746:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800974a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800974c:	2200      	movs	r2, #0
 800974e:	611c      	str	r4, [r3, #16]
 8009750:	615a      	str	r2, [r3, #20]
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	20000070 	.word	0x20000070
 8009758:	0800acf0 	.word	0x0800acf0
 800975c:	0800ad07 	.word	0x0800ad07
 8009760:	abcd330e 	.word	0xabcd330e
 8009764:	e66d1234 	.word	0xe66d1234
 8009768:	0005deec 	.word	0x0005deec

0800976c <rand>:
 800976c:	4b16      	ldr	r3, [pc, #88]	; (80097c8 <rand+0x5c>)
 800976e:	b510      	push	{r4, lr}
 8009770:	681c      	ldr	r4, [r3, #0]
 8009772:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009774:	b9b3      	cbnz	r3, 80097a4 <rand+0x38>
 8009776:	2018      	movs	r0, #24
 8009778:	f7ff fed2 	bl	8009520 <malloc>
 800977c:	63a0      	str	r0, [r4, #56]	; 0x38
 800977e:	b928      	cbnz	r0, 800978c <rand+0x20>
 8009780:	4602      	mov	r2, r0
 8009782:	4b12      	ldr	r3, [pc, #72]	; (80097cc <rand+0x60>)
 8009784:	4812      	ldr	r0, [pc, #72]	; (80097d0 <rand+0x64>)
 8009786:	214e      	movs	r1, #78	; 0x4e
 8009788:	f000 f892 	bl	80098b0 <__assert_func>
 800978c:	4a11      	ldr	r2, [pc, #68]	; (80097d4 <rand+0x68>)
 800978e:	4b12      	ldr	r3, [pc, #72]	; (80097d8 <rand+0x6c>)
 8009790:	e9c0 2300 	strd	r2, r3, [r0]
 8009794:	4b11      	ldr	r3, [pc, #68]	; (80097dc <rand+0x70>)
 8009796:	6083      	str	r3, [r0, #8]
 8009798:	230b      	movs	r3, #11
 800979a:	8183      	strh	r3, [r0, #12]
 800979c:	2201      	movs	r2, #1
 800979e:	2300      	movs	r3, #0
 80097a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80097a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80097a6:	4a0e      	ldr	r2, [pc, #56]	; (80097e0 <rand+0x74>)
 80097a8:	6920      	ldr	r0, [r4, #16]
 80097aa:	6963      	ldr	r3, [r4, #20]
 80097ac:	490d      	ldr	r1, [pc, #52]	; (80097e4 <rand+0x78>)
 80097ae:	4342      	muls	r2, r0
 80097b0:	fb01 2203 	mla	r2, r1, r3, r2
 80097b4:	fba0 0101 	umull	r0, r1, r0, r1
 80097b8:	1c43      	adds	r3, r0, #1
 80097ba:	eb42 0001 	adc.w	r0, r2, r1
 80097be:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80097c2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80097c6:	bd10      	pop	{r4, pc}
 80097c8:	20000070 	.word	0x20000070
 80097cc:	0800acf0 	.word	0x0800acf0
 80097d0:	0800ad07 	.word	0x0800ad07
 80097d4:	abcd330e 	.word	0xabcd330e
 80097d8:	e66d1234 	.word	0xe66d1234
 80097dc:	0005deec 	.word	0x0005deec
 80097e0:	5851f42d 	.word	0x5851f42d
 80097e4:	4c957f2d 	.word	0x4c957f2d

080097e8 <_sbrk_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4d06      	ldr	r5, [pc, #24]	; (8009804 <_sbrk_r+0x1c>)
 80097ec:	2300      	movs	r3, #0
 80097ee:	4604      	mov	r4, r0
 80097f0:	4608      	mov	r0, r1
 80097f2:	602b      	str	r3, [r5, #0]
 80097f4:	f7fb fab0 	bl	8004d58 <_sbrk>
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	d102      	bne.n	8009802 <_sbrk_r+0x1a>
 80097fc:	682b      	ldr	r3, [r5, #0]
 80097fe:	b103      	cbz	r3, 8009802 <_sbrk_r+0x1a>
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	bd38      	pop	{r3, r4, r5, pc}
 8009804:	20000768 	.word	0x20000768

08009808 <sniprintf>:
 8009808:	b40c      	push	{r2, r3}
 800980a:	b530      	push	{r4, r5, lr}
 800980c:	4b17      	ldr	r3, [pc, #92]	; (800986c <sniprintf+0x64>)
 800980e:	1e0c      	subs	r4, r1, #0
 8009810:	681d      	ldr	r5, [r3, #0]
 8009812:	b09d      	sub	sp, #116	; 0x74
 8009814:	da08      	bge.n	8009828 <sniprintf+0x20>
 8009816:	238b      	movs	r3, #139	; 0x8b
 8009818:	602b      	str	r3, [r5, #0]
 800981a:	f04f 30ff 	mov.w	r0, #4294967295
 800981e:	b01d      	add	sp, #116	; 0x74
 8009820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009824:	b002      	add	sp, #8
 8009826:	4770      	bx	lr
 8009828:	f44f 7302 	mov.w	r3, #520	; 0x208
 800982c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009830:	bf14      	ite	ne
 8009832:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009836:	4623      	moveq	r3, r4
 8009838:	9304      	str	r3, [sp, #16]
 800983a:	9307      	str	r3, [sp, #28]
 800983c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009840:	9002      	str	r0, [sp, #8]
 8009842:	9006      	str	r0, [sp, #24]
 8009844:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009848:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800984a:	ab21      	add	r3, sp, #132	; 0x84
 800984c:	a902      	add	r1, sp, #8
 800984e:	4628      	mov	r0, r5
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	f000 f8c5 	bl	80099e0 <_svfiprintf_r>
 8009856:	1c43      	adds	r3, r0, #1
 8009858:	bfbc      	itt	lt
 800985a:	238b      	movlt	r3, #139	; 0x8b
 800985c:	602b      	strlt	r3, [r5, #0]
 800985e:	2c00      	cmp	r4, #0
 8009860:	d0dd      	beq.n	800981e <sniprintf+0x16>
 8009862:	9b02      	ldr	r3, [sp, #8]
 8009864:	2200      	movs	r2, #0
 8009866:	701a      	strb	r2, [r3, #0]
 8009868:	e7d9      	b.n	800981e <sniprintf+0x16>
 800986a:	bf00      	nop
 800986c:	20000070 	.word	0x20000070

08009870 <siprintf>:
 8009870:	b40e      	push	{r1, r2, r3}
 8009872:	b500      	push	{lr}
 8009874:	b09c      	sub	sp, #112	; 0x70
 8009876:	ab1d      	add	r3, sp, #116	; 0x74
 8009878:	9002      	str	r0, [sp, #8]
 800987a:	9006      	str	r0, [sp, #24]
 800987c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009880:	4809      	ldr	r0, [pc, #36]	; (80098a8 <siprintf+0x38>)
 8009882:	9107      	str	r1, [sp, #28]
 8009884:	9104      	str	r1, [sp, #16]
 8009886:	4909      	ldr	r1, [pc, #36]	; (80098ac <siprintf+0x3c>)
 8009888:	f853 2b04 	ldr.w	r2, [r3], #4
 800988c:	9105      	str	r1, [sp, #20]
 800988e:	6800      	ldr	r0, [r0, #0]
 8009890:	9301      	str	r3, [sp, #4]
 8009892:	a902      	add	r1, sp, #8
 8009894:	f000 f8a4 	bl	80099e0 <_svfiprintf_r>
 8009898:	9b02      	ldr	r3, [sp, #8]
 800989a:	2200      	movs	r2, #0
 800989c:	701a      	strb	r2, [r3, #0]
 800989e:	b01c      	add	sp, #112	; 0x70
 80098a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a4:	b003      	add	sp, #12
 80098a6:	4770      	bx	lr
 80098a8:	20000070 	.word	0x20000070
 80098ac:	ffff0208 	.word	0xffff0208

080098b0 <__assert_func>:
 80098b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098b2:	4614      	mov	r4, r2
 80098b4:	461a      	mov	r2, r3
 80098b6:	4b09      	ldr	r3, [pc, #36]	; (80098dc <__assert_func+0x2c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4605      	mov	r5, r0
 80098bc:	68d8      	ldr	r0, [r3, #12]
 80098be:	b14c      	cbz	r4, 80098d4 <__assert_func+0x24>
 80098c0:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <__assert_func+0x30>)
 80098c2:	9100      	str	r1, [sp, #0]
 80098c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098c8:	4906      	ldr	r1, [pc, #24]	; (80098e4 <__assert_func+0x34>)
 80098ca:	462b      	mov	r3, r5
 80098cc:	f000 f80e 	bl	80098ec <fiprintf>
 80098d0:	f000 fd34 	bl	800a33c <abort>
 80098d4:	4b04      	ldr	r3, [pc, #16]	; (80098e8 <__assert_func+0x38>)
 80098d6:	461c      	mov	r4, r3
 80098d8:	e7f3      	b.n	80098c2 <__assert_func+0x12>
 80098da:	bf00      	nop
 80098dc:	20000070 	.word	0x20000070
 80098e0:	0800ad62 	.word	0x0800ad62
 80098e4:	0800ad6f 	.word	0x0800ad6f
 80098e8:	0800ad9d 	.word	0x0800ad9d

080098ec <fiprintf>:
 80098ec:	b40e      	push	{r1, r2, r3}
 80098ee:	b503      	push	{r0, r1, lr}
 80098f0:	4601      	mov	r1, r0
 80098f2:	ab03      	add	r3, sp, #12
 80098f4:	4805      	ldr	r0, [pc, #20]	; (800990c <fiprintf+0x20>)
 80098f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098fa:	6800      	ldr	r0, [r0, #0]
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	f000 f999 	bl	8009c34 <_vfiprintf_r>
 8009902:	b002      	add	sp, #8
 8009904:	f85d eb04 	ldr.w	lr, [sp], #4
 8009908:	b003      	add	sp, #12
 800990a:	4770      	bx	lr
 800990c:	20000070 	.word	0x20000070

08009910 <__malloc_lock>:
 8009910:	4801      	ldr	r0, [pc, #4]	; (8009918 <__malloc_lock+0x8>)
 8009912:	f000 bed3 	b.w	800a6bc <__retarget_lock_acquire_recursive>
 8009916:	bf00      	nop
 8009918:	2000076c 	.word	0x2000076c

0800991c <__malloc_unlock>:
 800991c:	4801      	ldr	r0, [pc, #4]	; (8009924 <__malloc_unlock+0x8>)
 800991e:	f000 bece 	b.w	800a6be <__retarget_lock_release_recursive>
 8009922:	bf00      	nop
 8009924:	2000076c 	.word	0x2000076c

08009928 <__ssputs_r>:
 8009928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800992c:	688e      	ldr	r6, [r1, #8]
 800992e:	429e      	cmp	r6, r3
 8009930:	4682      	mov	sl, r0
 8009932:	460c      	mov	r4, r1
 8009934:	4690      	mov	r8, r2
 8009936:	461f      	mov	r7, r3
 8009938:	d838      	bhi.n	80099ac <__ssputs_r+0x84>
 800993a:	898a      	ldrh	r2, [r1, #12]
 800993c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009940:	d032      	beq.n	80099a8 <__ssputs_r+0x80>
 8009942:	6825      	ldr	r5, [r4, #0]
 8009944:	6909      	ldr	r1, [r1, #16]
 8009946:	eba5 0901 	sub.w	r9, r5, r1
 800994a:	6965      	ldr	r5, [r4, #20]
 800994c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009950:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009954:	3301      	adds	r3, #1
 8009956:	444b      	add	r3, r9
 8009958:	106d      	asrs	r5, r5, #1
 800995a:	429d      	cmp	r5, r3
 800995c:	bf38      	it	cc
 800995e:	461d      	movcc	r5, r3
 8009960:	0553      	lsls	r3, r2, #21
 8009962:	d531      	bpl.n	80099c8 <__ssputs_r+0xa0>
 8009964:	4629      	mov	r1, r5
 8009966:	f7ff fe5f 	bl	8009628 <_malloc_r>
 800996a:	4606      	mov	r6, r0
 800996c:	b950      	cbnz	r0, 8009984 <__ssputs_r+0x5c>
 800996e:	230c      	movs	r3, #12
 8009970:	f8ca 3000 	str.w	r3, [sl]
 8009974:	89a3      	ldrh	r3, [r4, #12]
 8009976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800997a:	81a3      	strh	r3, [r4, #12]
 800997c:	f04f 30ff 	mov.w	r0, #4294967295
 8009980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009984:	6921      	ldr	r1, [r4, #16]
 8009986:	464a      	mov	r2, r9
 8009988:	f000 ff00 	bl	800a78c <memcpy>
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009996:	81a3      	strh	r3, [r4, #12]
 8009998:	6126      	str	r6, [r4, #16]
 800999a:	6165      	str	r5, [r4, #20]
 800999c:	444e      	add	r6, r9
 800999e:	eba5 0509 	sub.w	r5, r5, r9
 80099a2:	6026      	str	r6, [r4, #0]
 80099a4:	60a5      	str	r5, [r4, #8]
 80099a6:	463e      	mov	r6, r7
 80099a8:	42be      	cmp	r6, r7
 80099aa:	d900      	bls.n	80099ae <__ssputs_r+0x86>
 80099ac:	463e      	mov	r6, r7
 80099ae:	6820      	ldr	r0, [r4, #0]
 80099b0:	4632      	mov	r2, r6
 80099b2:	4641      	mov	r1, r8
 80099b4:	f000 fef8 	bl	800a7a8 <memmove>
 80099b8:	68a3      	ldr	r3, [r4, #8]
 80099ba:	1b9b      	subs	r3, r3, r6
 80099bc:	60a3      	str	r3, [r4, #8]
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	4433      	add	r3, r6
 80099c2:	6023      	str	r3, [r4, #0]
 80099c4:	2000      	movs	r0, #0
 80099c6:	e7db      	b.n	8009980 <__ssputs_r+0x58>
 80099c8:	462a      	mov	r2, r5
 80099ca:	f000 ff07 	bl	800a7dc <_realloc_r>
 80099ce:	4606      	mov	r6, r0
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d1e1      	bne.n	8009998 <__ssputs_r+0x70>
 80099d4:	6921      	ldr	r1, [r4, #16]
 80099d6:	4650      	mov	r0, sl
 80099d8:	f7ff fdba 	bl	8009550 <_free_r>
 80099dc:	e7c7      	b.n	800996e <__ssputs_r+0x46>
	...

080099e0 <_svfiprintf_r>:
 80099e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	4698      	mov	r8, r3
 80099e6:	898b      	ldrh	r3, [r1, #12]
 80099e8:	061b      	lsls	r3, r3, #24
 80099ea:	b09d      	sub	sp, #116	; 0x74
 80099ec:	4607      	mov	r7, r0
 80099ee:	460d      	mov	r5, r1
 80099f0:	4614      	mov	r4, r2
 80099f2:	d50e      	bpl.n	8009a12 <_svfiprintf_r+0x32>
 80099f4:	690b      	ldr	r3, [r1, #16]
 80099f6:	b963      	cbnz	r3, 8009a12 <_svfiprintf_r+0x32>
 80099f8:	2140      	movs	r1, #64	; 0x40
 80099fa:	f7ff fe15 	bl	8009628 <_malloc_r>
 80099fe:	6028      	str	r0, [r5, #0]
 8009a00:	6128      	str	r0, [r5, #16]
 8009a02:	b920      	cbnz	r0, 8009a0e <_svfiprintf_r+0x2e>
 8009a04:	230c      	movs	r3, #12
 8009a06:	603b      	str	r3, [r7, #0]
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0c:	e0d1      	b.n	8009bb2 <_svfiprintf_r+0x1d2>
 8009a0e:	2340      	movs	r3, #64	; 0x40
 8009a10:	616b      	str	r3, [r5, #20]
 8009a12:	2300      	movs	r3, #0
 8009a14:	9309      	str	r3, [sp, #36]	; 0x24
 8009a16:	2320      	movs	r3, #32
 8009a18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a20:	2330      	movs	r3, #48	; 0x30
 8009a22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009bcc <_svfiprintf_r+0x1ec>
 8009a26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a2a:	f04f 0901 	mov.w	r9, #1
 8009a2e:	4623      	mov	r3, r4
 8009a30:	469a      	mov	sl, r3
 8009a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a36:	b10a      	cbz	r2, 8009a3c <_svfiprintf_r+0x5c>
 8009a38:	2a25      	cmp	r2, #37	; 0x25
 8009a3a:	d1f9      	bne.n	8009a30 <_svfiprintf_r+0x50>
 8009a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8009a40:	d00b      	beq.n	8009a5a <_svfiprintf_r+0x7a>
 8009a42:	465b      	mov	r3, fp
 8009a44:	4622      	mov	r2, r4
 8009a46:	4629      	mov	r1, r5
 8009a48:	4638      	mov	r0, r7
 8009a4a:	f7ff ff6d 	bl	8009928 <__ssputs_r>
 8009a4e:	3001      	adds	r0, #1
 8009a50:	f000 80aa 	beq.w	8009ba8 <_svfiprintf_r+0x1c8>
 8009a54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a56:	445a      	add	r2, fp
 8009a58:	9209      	str	r2, [sp, #36]	; 0x24
 8009a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 80a2 	beq.w	8009ba8 <_svfiprintf_r+0x1c8>
 8009a64:	2300      	movs	r3, #0
 8009a66:	f04f 32ff 	mov.w	r2, #4294967295
 8009a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a6e:	f10a 0a01 	add.w	sl, sl, #1
 8009a72:	9304      	str	r3, [sp, #16]
 8009a74:	9307      	str	r3, [sp, #28]
 8009a76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a7a:	931a      	str	r3, [sp, #104]	; 0x68
 8009a7c:	4654      	mov	r4, sl
 8009a7e:	2205      	movs	r2, #5
 8009a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a84:	4851      	ldr	r0, [pc, #324]	; (8009bcc <_svfiprintf_r+0x1ec>)
 8009a86:	f7f6 fbab 	bl	80001e0 <memchr>
 8009a8a:	9a04      	ldr	r2, [sp, #16]
 8009a8c:	b9d8      	cbnz	r0, 8009ac6 <_svfiprintf_r+0xe6>
 8009a8e:	06d0      	lsls	r0, r2, #27
 8009a90:	bf44      	itt	mi
 8009a92:	2320      	movmi	r3, #32
 8009a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a98:	0711      	lsls	r1, r2, #28
 8009a9a:	bf44      	itt	mi
 8009a9c:	232b      	movmi	r3, #43	; 0x2b
 8009a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8009aa8:	d015      	beq.n	8009ad6 <_svfiprintf_r+0xf6>
 8009aaa:	9a07      	ldr	r2, [sp, #28]
 8009aac:	4654      	mov	r4, sl
 8009aae:	2000      	movs	r0, #0
 8009ab0:	f04f 0c0a 	mov.w	ip, #10
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aba:	3b30      	subs	r3, #48	; 0x30
 8009abc:	2b09      	cmp	r3, #9
 8009abe:	d94e      	bls.n	8009b5e <_svfiprintf_r+0x17e>
 8009ac0:	b1b0      	cbz	r0, 8009af0 <_svfiprintf_r+0x110>
 8009ac2:	9207      	str	r2, [sp, #28]
 8009ac4:	e014      	b.n	8009af0 <_svfiprintf_r+0x110>
 8009ac6:	eba0 0308 	sub.w	r3, r0, r8
 8009aca:	fa09 f303 	lsl.w	r3, r9, r3
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	9304      	str	r3, [sp, #16]
 8009ad2:	46a2      	mov	sl, r4
 8009ad4:	e7d2      	b.n	8009a7c <_svfiprintf_r+0x9c>
 8009ad6:	9b03      	ldr	r3, [sp, #12]
 8009ad8:	1d19      	adds	r1, r3, #4
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	9103      	str	r1, [sp, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	bfbb      	ittet	lt
 8009ae2:	425b      	neglt	r3, r3
 8009ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ae8:	9307      	strge	r3, [sp, #28]
 8009aea:	9307      	strlt	r3, [sp, #28]
 8009aec:	bfb8      	it	lt
 8009aee:	9204      	strlt	r2, [sp, #16]
 8009af0:	7823      	ldrb	r3, [r4, #0]
 8009af2:	2b2e      	cmp	r3, #46	; 0x2e
 8009af4:	d10c      	bne.n	8009b10 <_svfiprintf_r+0x130>
 8009af6:	7863      	ldrb	r3, [r4, #1]
 8009af8:	2b2a      	cmp	r3, #42	; 0x2a
 8009afa:	d135      	bne.n	8009b68 <_svfiprintf_r+0x188>
 8009afc:	9b03      	ldr	r3, [sp, #12]
 8009afe:	1d1a      	adds	r2, r3, #4
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	9203      	str	r2, [sp, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	bfb8      	it	lt
 8009b08:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b0c:	3402      	adds	r4, #2
 8009b0e:	9305      	str	r3, [sp, #20]
 8009b10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009bdc <_svfiprintf_r+0x1fc>
 8009b14:	7821      	ldrb	r1, [r4, #0]
 8009b16:	2203      	movs	r2, #3
 8009b18:	4650      	mov	r0, sl
 8009b1a:	f7f6 fb61 	bl	80001e0 <memchr>
 8009b1e:	b140      	cbz	r0, 8009b32 <_svfiprintf_r+0x152>
 8009b20:	2340      	movs	r3, #64	; 0x40
 8009b22:	eba0 000a 	sub.w	r0, r0, sl
 8009b26:	fa03 f000 	lsl.w	r0, r3, r0
 8009b2a:	9b04      	ldr	r3, [sp, #16]
 8009b2c:	4303      	orrs	r3, r0
 8009b2e:	3401      	adds	r4, #1
 8009b30:	9304      	str	r3, [sp, #16]
 8009b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b36:	4826      	ldr	r0, [pc, #152]	; (8009bd0 <_svfiprintf_r+0x1f0>)
 8009b38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b3c:	2206      	movs	r2, #6
 8009b3e:	f7f6 fb4f 	bl	80001e0 <memchr>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d038      	beq.n	8009bb8 <_svfiprintf_r+0x1d8>
 8009b46:	4b23      	ldr	r3, [pc, #140]	; (8009bd4 <_svfiprintf_r+0x1f4>)
 8009b48:	bb1b      	cbnz	r3, 8009b92 <_svfiprintf_r+0x1b2>
 8009b4a:	9b03      	ldr	r3, [sp, #12]
 8009b4c:	3307      	adds	r3, #7
 8009b4e:	f023 0307 	bic.w	r3, r3, #7
 8009b52:	3308      	adds	r3, #8
 8009b54:	9303      	str	r3, [sp, #12]
 8009b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b58:	4433      	add	r3, r6
 8009b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b5c:	e767      	b.n	8009a2e <_svfiprintf_r+0x4e>
 8009b5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b62:	460c      	mov	r4, r1
 8009b64:	2001      	movs	r0, #1
 8009b66:	e7a5      	b.n	8009ab4 <_svfiprintf_r+0xd4>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	3401      	adds	r4, #1
 8009b6c:	9305      	str	r3, [sp, #20]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	f04f 0c0a 	mov.w	ip, #10
 8009b74:	4620      	mov	r0, r4
 8009b76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b7a:	3a30      	subs	r2, #48	; 0x30
 8009b7c:	2a09      	cmp	r2, #9
 8009b7e:	d903      	bls.n	8009b88 <_svfiprintf_r+0x1a8>
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d0c5      	beq.n	8009b10 <_svfiprintf_r+0x130>
 8009b84:	9105      	str	r1, [sp, #20]
 8009b86:	e7c3      	b.n	8009b10 <_svfiprintf_r+0x130>
 8009b88:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e7f0      	b.n	8009b74 <_svfiprintf_r+0x194>
 8009b92:	ab03      	add	r3, sp, #12
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	462a      	mov	r2, r5
 8009b98:	4b0f      	ldr	r3, [pc, #60]	; (8009bd8 <_svfiprintf_r+0x1f8>)
 8009b9a:	a904      	add	r1, sp, #16
 8009b9c:	4638      	mov	r0, r7
 8009b9e:	f3af 8000 	nop.w
 8009ba2:	1c42      	adds	r2, r0, #1
 8009ba4:	4606      	mov	r6, r0
 8009ba6:	d1d6      	bne.n	8009b56 <_svfiprintf_r+0x176>
 8009ba8:	89ab      	ldrh	r3, [r5, #12]
 8009baa:	065b      	lsls	r3, r3, #25
 8009bac:	f53f af2c 	bmi.w	8009a08 <_svfiprintf_r+0x28>
 8009bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bb2:	b01d      	add	sp, #116	; 0x74
 8009bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb8:	ab03      	add	r3, sp, #12
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	462a      	mov	r2, r5
 8009bbe:	4b06      	ldr	r3, [pc, #24]	; (8009bd8 <_svfiprintf_r+0x1f8>)
 8009bc0:	a904      	add	r1, sp, #16
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	f000 f9d4 	bl	8009f70 <_printf_i>
 8009bc8:	e7eb      	b.n	8009ba2 <_svfiprintf_r+0x1c2>
 8009bca:	bf00      	nop
 8009bcc:	0800ad9e 	.word	0x0800ad9e
 8009bd0:	0800ada8 	.word	0x0800ada8
 8009bd4:	00000000 	.word	0x00000000
 8009bd8:	08009929 	.word	0x08009929
 8009bdc:	0800ada4 	.word	0x0800ada4

08009be0 <__sfputc_r>:
 8009be0:	6893      	ldr	r3, [r2, #8]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	b410      	push	{r4}
 8009be8:	6093      	str	r3, [r2, #8]
 8009bea:	da08      	bge.n	8009bfe <__sfputc_r+0x1e>
 8009bec:	6994      	ldr	r4, [r2, #24]
 8009bee:	42a3      	cmp	r3, r4
 8009bf0:	db01      	blt.n	8009bf6 <__sfputc_r+0x16>
 8009bf2:	290a      	cmp	r1, #10
 8009bf4:	d103      	bne.n	8009bfe <__sfputc_r+0x1e>
 8009bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bfa:	f000 badf 	b.w	800a1bc <__swbuf_r>
 8009bfe:	6813      	ldr	r3, [r2, #0]
 8009c00:	1c58      	adds	r0, r3, #1
 8009c02:	6010      	str	r0, [r2, #0]
 8009c04:	7019      	strb	r1, [r3, #0]
 8009c06:	4608      	mov	r0, r1
 8009c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <__sfputs_r>:
 8009c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c10:	4606      	mov	r6, r0
 8009c12:	460f      	mov	r7, r1
 8009c14:	4614      	mov	r4, r2
 8009c16:	18d5      	adds	r5, r2, r3
 8009c18:	42ac      	cmp	r4, r5
 8009c1a:	d101      	bne.n	8009c20 <__sfputs_r+0x12>
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	e007      	b.n	8009c30 <__sfputs_r+0x22>
 8009c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c24:	463a      	mov	r2, r7
 8009c26:	4630      	mov	r0, r6
 8009c28:	f7ff ffda 	bl	8009be0 <__sfputc_r>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d1f3      	bne.n	8009c18 <__sfputs_r+0xa>
 8009c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c34 <_vfiprintf_r>:
 8009c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c38:	460d      	mov	r5, r1
 8009c3a:	b09d      	sub	sp, #116	; 0x74
 8009c3c:	4614      	mov	r4, r2
 8009c3e:	4698      	mov	r8, r3
 8009c40:	4606      	mov	r6, r0
 8009c42:	b118      	cbz	r0, 8009c4c <_vfiprintf_r+0x18>
 8009c44:	6983      	ldr	r3, [r0, #24]
 8009c46:	b90b      	cbnz	r3, 8009c4c <_vfiprintf_r+0x18>
 8009c48:	f000 fc9a 	bl	800a580 <__sinit>
 8009c4c:	4b89      	ldr	r3, [pc, #548]	; (8009e74 <_vfiprintf_r+0x240>)
 8009c4e:	429d      	cmp	r5, r3
 8009c50:	d11b      	bne.n	8009c8a <_vfiprintf_r+0x56>
 8009c52:	6875      	ldr	r5, [r6, #4]
 8009c54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c56:	07d9      	lsls	r1, r3, #31
 8009c58:	d405      	bmi.n	8009c66 <_vfiprintf_r+0x32>
 8009c5a:	89ab      	ldrh	r3, [r5, #12]
 8009c5c:	059a      	lsls	r2, r3, #22
 8009c5e:	d402      	bmi.n	8009c66 <_vfiprintf_r+0x32>
 8009c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c62:	f000 fd2b 	bl	800a6bc <__retarget_lock_acquire_recursive>
 8009c66:	89ab      	ldrh	r3, [r5, #12]
 8009c68:	071b      	lsls	r3, r3, #28
 8009c6a:	d501      	bpl.n	8009c70 <_vfiprintf_r+0x3c>
 8009c6c:	692b      	ldr	r3, [r5, #16]
 8009c6e:	b9eb      	cbnz	r3, 8009cac <_vfiprintf_r+0x78>
 8009c70:	4629      	mov	r1, r5
 8009c72:	4630      	mov	r0, r6
 8009c74:	f000 faf4 	bl	800a260 <__swsetup_r>
 8009c78:	b1c0      	cbz	r0, 8009cac <_vfiprintf_r+0x78>
 8009c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c7c:	07dc      	lsls	r4, r3, #31
 8009c7e:	d50e      	bpl.n	8009c9e <_vfiprintf_r+0x6a>
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295
 8009c84:	b01d      	add	sp, #116	; 0x74
 8009c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8a:	4b7b      	ldr	r3, [pc, #492]	; (8009e78 <_vfiprintf_r+0x244>)
 8009c8c:	429d      	cmp	r5, r3
 8009c8e:	d101      	bne.n	8009c94 <_vfiprintf_r+0x60>
 8009c90:	68b5      	ldr	r5, [r6, #8]
 8009c92:	e7df      	b.n	8009c54 <_vfiprintf_r+0x20>
 8009c94:	4b79      	ldr	r3, [pc, #484]	; (8009e7c <_vfiprintf_r+0x248>)
 8009c96:	429d      	cmp	r5, r3
 8009c98:	bf08      	it	eq
 8009c9a:	68f5      	ldreq	r5, [r6, #12]
 8009c9c:	e7da      	b.n	8009c54 <_vfiprintf_r+0x20>
 8009c9e:	89ab      	ldrh	r3, [r5, #12]
 8009ca0:	0598      	lsls	r0, r3, #22
 8009ca2:	d4ed      	bmi.n	8009c80 <_vfiprintf_r+0x4c>
 8009ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ca6:	f000 fd0a 	bl	800a6be <__retarget_lock_release_recursive>
 8009caa:	e7e9      	b.n	8009c80 <_vfiprintf_r+0x4c>
 8009cac:	2300      	movs	r3, #0
 8009cae:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb0:	2320      	movs	r3, #32
 8009cb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cba:	2330      	movs	r3, #48	; 0x30
 8009cbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e80 <_vfiprintf_r+0x24c>
 8009cc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cc4:	f04f 0901 	mov.w	r9, #1
 8009cc8:	4623      	mov	r3, r4
 8009cca:	469a      	mov	sl, r3
 8009ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cd0:	b10a      	cbz	r2, 8009cd6 <_vfiprintf_r+0xa2>
 8009cd2:	2a25      	cmp	r2, #37	; 0x25
 8009cd4:	d1f9      	bne.n	8009cca <_vfiprintf_r+0x96>
 8009cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8009cda:	d00b      	beq.n	8009cf4 <_vfiprintf_r+0xc0>
 8009cdc:	465b      	mov	r3, fp
 8009cde:	4622      	mov	r2, r4
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7ff ff93 	bl	8009c0e <__sfputs_r>
 8009ce8:	3001      	adds	r0, #1
 8009cea:	f000 80aa 	beq.w	8009e42 <_vfiprintf_r+0x20e>
 8009cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cf0:	445a      	add	r2, fp
 8009cf2:	9209      	str	r2, [sp, #36]	; 0x24
 8009cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f000 80a2 	beq.w	8009e42 <_vfiprintf_r+0x20e>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f04f 32ff 	mov.w	r2, #4294967295
 8009d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d08:	f10a 0a01 	add.w	sl, sl, #1
 8009d0c:	9304      	str	r3, [sp, #16]
 8009d0e:	9307      	str	r3, [sp, #28]
 8009d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d14:	931a      	str	r3, [sp, #104]	; 0x68
 8009d16:	4654      	mov	r4, sl
 8009d18:	2205      	movs	r2, #5
 8009d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d1e:	4858      	ldr	r0, [pc, #352]	; (8009e80 <_vfiprintf_r+0x24c>)
 8009d20:	f7f6 fa5e 	bl	80001e0 <memchr>
 8009d24:	9a04      	ldr	r2, [sp, #16]
 8009d26:	b9d8      	cbnz	r0, 8009d60 <_vfiprintf_r+0x12c>
 8009d28:	06d1      	lsls	r1, r2, #27
 8009d2a:	bf44      	itt	mi
 8009d2c:	2320      	movmi	r3, #32
 8009d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d32:	0713      	lsls	r3, r2, #28
 8009d34:	bf44      	itt	mi
 8009d36:	232b      	movmi	r3, #43	; 0x2b
 8009d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d40:	2b2a      	cmp	r3, #42	; 0x2a
 8009d42:	d015      	beq.n	8009d70 <_vfiprintf_r+0x13c>
 8009d44:	9a07      	ldr	r2, [sp, #28]
 8009d46:	4654      	mov	r4, sl
 8009d48:	2000      	movs	r0, #0
 8009d4a:	f04f 0c0a 	mov.w	ip, #10
 8009d4e:	4621      	mov	r1, r4
 8009d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d54:	3b30      	subs	r3, #48	; 0x30
 8009d56:	2b09      	cmp	r3, #9
 8009d58:	d94e      	bls.n	8009df8 <_vfiprintf_r+0x1c4>
 8009d5a:	b1b0      	cbz	r0, 8009d8a <_vfiprintf_r+0x156>
 8009d5c:	9207      	str	r2, [sp, #28]
 8009d5e:	e014      	b.n	8009d8a <_vfiprintf_r+0x156>
 8009d60:	eba0 0308 	sub.w	r3, r0, r8
 8009d64:	fa09 f303 	lsl.w	r3, r9, r3
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	9304      	str	r3, [sp, #16]
 8009d6c:	46a2      	mov	sl, r4
 8009d6e:	e7d2      	b.n	8009d16 <_vfiprintf_r+0xe2>
 8009d70:	9b03      	ldr	r3, [sp, #12]
 8009d72:	1d19      	adds	r1, r3, #4
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	9103      	str	r1, [sp, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bfbb      	ittet	lt
 8009d7c:	425b      	neglt	r3, r3
 8009d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d82:	9307      	strge	r3, [sp, #28]
 8009d84:	9307      	strlt	r3, [sp, #28]
 8009d86:	bfb8      	it	lt
 8009d88:	9204      	strlt	r2, [sp, #16]
 8009d8a:	7823      	ldrb	r3, [r4, #0]
 8009d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d8e:	d10c      	bne.n	8009daa <_vfiprintf_r+0x176>
 8009d90:	7863      	ldrb	r3, [r4, #1]
 8009d92:	2b2a      	cmp	r3, #42	; 0x2a
 8009d94:	d135      	bne.n	8009e02 <_vfiprintf_r+0x1ce>
 8009d96:	9b03      	ldr	r3, [sp, #12]
 8009d98:	1d1a      	adds	r2, r3, #4
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	9203      	str	r2, [sp, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	bfb8      	it	lt
 8009da2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009da6:	3402      	adds	r4, #2
 8009da8:	9305      	str	r3, [sp, #20]
 8009daa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e90 <_vfiprintf_r+0x25c>
 8009dae:	7821      	ldrb	r1, [r4, #0]
 8009db0:	2203      	movs	r2, #3
 8009db2:	4650      	mov	r0, sl
 8009db4:	f7f6 fa14 	bl	80001e0 <memchr>
 8009db8:	b140      	cbz	r0, 8009dcc <_vfiprintf_r+0x198>
 8009dba:	2340      	movs	r3, #64	; 0x40
 8009dbc:	eba0 000a 	sub.w	r0, r0, sl
 8009dc0:	fa03 f000 	lsl.w	r0, r3, r0
 8009dc4:	9b04      	ldr	r3, [sp, #16]
 8009dc6:	4303      	orrs	r3, r0
 8009dc8:	3401      	adds	r4, #1
 8009dca:	9304      	str	r3, [sp, #16]
 8009dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd0:	482c      	ldr	r0, [pc, #176]	; (8009e84 <_vfiprintf_r+0x250>)
 8009dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dd6:	2206      	movs	r2, #6
 8009dd8:	f7f6 fa02 	bl	80001e0 <memchr>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d03f      	beq.n	8009e60 <_vfiprintf_r+0x22c>
 8009de0:	4b29      	ldr	r3, [pc, #164]	; (8009e88 <_vfiprintf_r+0x254>)
 8009de2:	bb1b      	cbnz	r3, 8009e2c <_vfiprintf_r+0x1f8>
 8009de4:	9b03      	ldr	r3, [sp, #12]
 8009de6:	3307      	adds	r3, #7
 8009de8:	f023 0307 	bic.w	r3, r3, #7
 8009dec:	3308      	adds	r3, #8
 8009dee:	9303      	str	r3, [sp, #12]
 8009df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df2:	443b      	add	r3, r7
 8009df4:	9309      	str	r3, [sp, #36]	; 0x24
 8009df6:	e767      	b.n	8009cc8 <_vfiprintf_r+0x94>
 8009df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	2001      	movs	r0, #1
 8009e00:	e7a5      	b.n	8009d4e <_vfiprintf_r+0x11a>
 8009e02:	2300      	movs	r3, #0
 8009e04:	3401      	adds	r4, #1
 8009e06:	9305      	str	r3, [sp, #20]
 8009e08:	4619      	mov	r1, r3
 8009e0a:	f04f 0c0a 	mov.w	ip, #10
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e14:	3a30      	subs	r2, #48	; 0x30
 8009e16:	2a09      	cmp	r2, #9
 8009e18:	d903      	bls.n	8009e22 <_vfiprintf_r+0x1ee>
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d0c5      	beq.n	8009daa <_vfiprintf_r+0x176>
 8009e1e:	9105      	str	r1, [sp, #20]
 8009e20:	e7c3      	b.n	8009daa <_vfiprintf_r+0x176>
 8009e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e26:	4604      	mov	r4, r0
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e7f0      	b.n	8009e0e <_vfiprintf_r+0x1da>
 8009e2c:	ab03      	add	r3, sp, #12
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	462a      	mov	r2, r5
 8009e32:	4b16      	ldr	r3, [pc, #88]	; (8009e8c <_vfiprintf_r+0x258>)
 8009e34:	a904      	add	r1, sp, #16
 8009e36:	4630      	mov	r0, r6
 8009e38:	f3af 8000 	nop.w
 8009e3c:	4607      	mov	r7, r0
 8009e3e:	1c78      	adds	r0, r7, #1
 8009e40:	d1d6      	bne.n	8009df0 <_vfiprintf_r+0x1bc>
 8009e42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e44:	07d9      	lsls	r1, r3, #31
 8009e46:	d405      	bmi.n	8009e54 <_vfiprintf_r+0x220>
 8009e48:	89ab      	ldrh	r3, [r5, #12]
 8009e4a:	059a      	lsls	r2, r3, #22
 8009e4c:	d402      	bmi.n	8009e54 <_vfiprintf_r+0x220>
 8009e4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e50:	f000 fc35 	bl	800a6be <__retarget_lock_release_recursive>
 8009e54:	89ab      	ldrh	r3, [r5, #12]
 8009e56:	065b      	lsls	r3, r3, #25
 8009e58:	f53f af12 	bmi.w	8009c80 <_vfiprintf_r+0x4c>
 8009e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e5e:	e711      	b.n	8009c84 <_vfiprintf_r+0x50>
 8009e60:	ab03      	add	r3, sp, #12
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	462a      	mov	r2, r5
 8009e66:	4b09      	ldr	r3, [pc, #36]	; (8009e8c <_vfiprintf_r+0x258>)
 8009e68:	a904      	add	r1, sp, #16
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f000 f880 	bl	8009f70 <_printf_i>
 8009e70:	e7e4      	b.n	8009e3c <_vfiprintf_r+0x208>
 8009e72:	bf00      	nop
 8009e74:	0800adf4 	.word	0x0800adf4
 8009e78:	0800ae14 	.word	0x0800ae14
 8009e7c:	0800add4 	.word	0x0800add4
 8009e80:	0800ad9e 	.word	0x0800ad9e
 8009e84:	0800ada8 	.word	0x0800ada8
 8009e88:	00000000 	.word	0x00000000
 8009e8c:	08009c0f 	.word	0x08009c0f
 8009e90:	0800ada4 	.word	0x0800ada4

08009e94 <_printf_common>:
 8009e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e98:	4616      	mov	r6, r2
 8009e9a:	4699      	mov	r9, r3
 8009e9c:	688a      	ldr	r2, [r1, #8]
 8009e9e:	690b      	ldr	r3, [r1, #16]
 8009ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	bfb8      	it	lt
 8009ea8:	4613      	movlt	r3, r2
 8009eaa:	6033      	str	r3, [r6, #0]
 8009eac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009eb0:	4607      	mov	r7, r0
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	b10a      	cbz	r2, 8009eba <_printf_common+0x26>
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	6033      	str	r3, [r6, #0]
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	0699      	lsls	r1, r3, #26
 8009ebe:	bf42      	ittt	mi
 8009ec0:	6833      	ldrmi	r3, [r6, #0]
 8009ec2:	3302      	addmi	r3, #2
 8009ec4:	6033      	strmi	r3, [r6, #0]
 8009ec6:	6825      	ldr	r5, [r4, #0]
 8009ec8:	f015 0506 	ands.w	r5, r5, #6
 8009ecc:	d106      	bne.n	8009edc <_printf_common+0x48>
 8009ece:	f104 0a19 	add.w	sl, r4, #25
 8009ed2:	68e3      	ldr	r3, [r4, #12]
 8009ed4:	6832      	ldr	r2, [r6, #0]
 8009ed6:	1a9b      	subs	r3, r3, r2
 8009ed8:	42ab      	cmp	r3, r5
 8009eda:	dc26      	bgt.n	8009f2a <_printf_common+0x96>
 8009edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ee0:	1e13      	subs	r3, r2, #0
 8009ee2:	6822      	ldr	r2, [r4, #0]
 8009ee4:	bf18      	it	ne
 8009ee6:	2301      	movne	r3, #1
 8009ee8:	0692      	lsls	r2, r2, #26
 8009eea:	d42b      	bmi.n	8009f44 <_printf_common+0xb0>
 8009eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ef0:	4649      	mov	r1, r9
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	47c0      	blx	r8
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	d01e      	beq.n	8009f38 <_printf_common+0xa4>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	68e5      	ldr	r5, [r4, #12]
 8009efe:	6832      	ldr	r2, [r6, #0]
 8009f00:	f003 0306 	and.w	r3, r3, #6
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	bf08      	it	eq
 8009f08:	1aad      	subeq	r5, r5, r2
 8009f0a:	68a3      	ldr	r3, [r4, #8]
 8009f0c:	6922      	ldr	r2, [r4, #16]
 8009f0e:	bf0c      	ite	eq
 8009f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f14:	2500      	movne	r5, #0
 8009f16:	4293      	cmp	r3, r2
 8009f18:	bfc4      	itt	gt
 8009f1a:	1a9b      	subgt	r3, r3, r2
 8009f1c:	18ed      	addgt	r5, r5, r3
 8009f1e:	2600      	movs	r6, #0
 8009f20:	341a      	adds	r4, #26
 8009f22:	42b5      	cmp	r5, r6
 8009f24:	d11a      	bne.n	8009f5c <_printf_common+0xc8>
 8009f26:	2000      	movs	r0, #0
 8009f28:	e008      	b.n	8009f3c <_printf_common+0xa8>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	4652      	mov	r2, sl
 8009f2e:	4649      	mov	r1, r9
 8009f30:	4638      	mov	r0, r7
 8009f32:	47c0      	blx	r8
 8009f34:	3001      	adds	r0, #1
 8009f36:	d103      	bne.n	8009f40 <_printf_common+0xac>
 8009f38:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f40:	3501      	adds	r5, #1
 8009f42:	e7c6      	b.n	8009ed2 <_printf_common+0x3e>
 8009f44:	18e1      	adds	r1, r4, r3
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	2030      	movs	r0, #48	; 0x30
 8009f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f4e:	4422      	add	r2, r4
 8009f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f58:	3302      	adds	r3, #2
 8009f5a:	e7c7      	b.n	8009eec <_printf_common+0x58>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	4622      	mov	r2, r4
 8009f60:	4649      	mov	r1, r9
 8009f62:	4638      	mov	r0, r7
 8009f64:	47c0      	blx	r8
 8009f66:	3001      	adds	r0, #1
 8009f68:	d0e6      	beq.n	8009f38 <_printf_common+0xa4>
 8009f6a:	3601      	adds	r6, #1
 8009f6c:	e7d9      	b.n	8009f22 <_printf_common+0x8e>
	...

08009f70 <_printf_i>:
 8009f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f74:	7e0f      	ldrb	r7, [r1, #24]
 8009f76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f78:	2f78      	cmp	r7, #120	; 0x78
 8009f7a:	4691      	mov	r9, r2
 8009f7c:	4680      	mov	r8, r0
 8009f7e:	460c      	mov	r4, r1
 8009f80:	469a      	mov	sl, r3
 8009f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f86:	d807      	bhi.n	8009f98 <_printf_i+0x28>
 8009f88:	2f62      	cmp	r7, #98	; 0x62
 8009f8a:	d80a      	bhi.n	8009fa2 <_printf_i+0x32>
 8009f8c:	2f00      	cmp	r7, #0
 8009f8e:	f000 80d8 	beq.w	800a142 <_printf_i+0x1d2>
 8009f92:	2f58      	cmp	r7, #88	; 0x58
 8009f94:	f000 80a3 	beq.w	800a0de <_printf_i+0x16e>
 8009f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fa0:	e03a      	b.n	800a018 <_printf_i+0xa8>
 8009fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fa6:	2b15      	cmp	r3, #21
 8009fa8:	d8f6      	bhi.n	8009f98 <_printf_i+0x28>
 8009faa:	a101      	add	r1, pc, #4	; (adr r1, 8009fb0 <_printf_i+0x40>)
 8009fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fb0:	0800a009 	.word	0x0800a009
 8009fb4:	0800a01d 	.word	0x0800a01d
 8009fb8:	08009f99 	.word	0x08009f99
 8009fbc:	08009f99 	.word	0x08009f99
 8009fc0:	08009f99 	.word	0x08009f99
 8009fc4:	08009f99 	.word	0x08009f99
 8009fc8:	0800a01d 	.word	0x0800a01d
 8009fcc:	08009f99 	.word	0x08009f99
 8009fd0:	08009f99 	.word	0x08009f99
 8009fd4:	08009f99 	.word	0x08009f99
 8009fd8:	08009f99 	.word	0x08009f99
 8009fdc:	0800a129 	.word	0x0800a129
 8009fe0:	0800a04d 	.word	0x0800a04d
 8009fe4:	0800a10b 	.word	0x0800a10b
 8009fe8:	08009f99 	.word	0x08009f99
 8009fec:	08009f99 	.word	0x08009f99
 8009ff0:	0800a14b 	.word	0x0800a14b
 8009ff4:	08009f99 	.word	0x08009f99
 8009ff8:	0800a04d 	.word	0x0800a04d
 8009ffc:	08009f99 	.word	0x08009f99
 800a000:	08009f99 	.word	0x08009f99
 800a004:	0800a113 	.word	0x0800a113
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	1d1a      	adds	r2, r3, #4
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	602a      	str	r2, [r5, #0]
 800a010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a018:	2301      	movs	r3, #1
 800a01a:	e0a3      	b.n	800a164 <_printf_i+0x1f4>
 800a01c:	6820      	ldr	r0, [r4, #0]
 800a01e:	6829      	ldr	r1, [r5, #0]
 800a020:	0606      	lsls	r6, r0, #24
 800a022:	f101 0304 	add.w	r3, r1, #4
 800a026:	d50a      	bpl.n	800a03e <_printf_i+0xce>
 800a028:	680e      	ldr	r6, [r1, #0]
 800a02a:	602b      	str	r3, [r5, #0]
 800a02c:	2e00      	cmp	r6, #0
 800a02e:	da03      	bge.n	800a038 <_printf_i+0xc8>
 800a030:	232d      	movs	r3, #45	; 0x2d
 800a032:	4276      	negs	r6, r6
 800a034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a038:	485e      	ldr	r0, [pc, #376]	; (800a1b4 <_printf_i+0x244>)
 800a03a:	230a      	movs	r3, #10
 800a03c:	e019      	b.n	800a072 <_printf_i+0x102>
 800a03e:	680e      	ldr	r6, [r1, #0]
 800a040:	602b      	str	r3, [r5, #0]
 800a042:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a046:	bf18      	it	ne
 800a048:	b236      	sxthne	r6, r6
 800a04a:	e7ef      	b.n	800a02c <_printf_i+0xbc>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	6820      	ldr	r0, [r4, #0]
 800a050:	1d19      	adds	r1, r3, #4
 800a052:	6029      	str	r1, [r5, #0]
 800a054:	0601      	lsls	r1, r0, #24
 800a056:	d501      	bpl.n	800a05c <_printf_i+0xec>
 800a058:	681e      	ldr	r6, [r3, #0]
 800a05a:	e002      	b.n	800a062 <_printf_i+0xf2>
 800a05c:	0646      	lsls	r6, r0, #25
 800a05e:	d5fb      	bpl.n	800a058 <_printf_i+0xe8>
 800a060:	881e      	ldrh	r6, [r3, #0]
 800a062:	4854      	ldr	r0, [pc, #336]	; (800a1b4 <_printf_i+0x244>)
 800a064:	2f6f      	cmp	r7, #111	; 0x6f
 800a066:	bf0c      	ite	eq
 800a068:	2308      	moveq	r3, #8
 800a06a:	230a      	movne	r3, #10
 800a06c:	2100      	movs	r1, #0
 800a06e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a072:	6865      	ldr	r5, [r4, #4]
 800a074:	60a5      	str	r5, [r4, #8]
 800a076:	2d00      	cmp	r5, #0
 800a078:	bfa2      	ittt	ge
 800a07a:	6821      	ldrge	r1, [r4, #0]
 800a07c:	f021 0104 	bicge.w	r1, r1, #4
 800a080:	6021      	strge	r1, [r4, #0]
 800a082:	b90e      	cbnz	r6, 800a088 <_printf_i+0x118>
 800a084:	2d00      	cmp	r5, #0
 800a086:	d04d      	beq.n	800a124 <_printf_i+0x1b4>
 800a088:	4615      	mov	r5, r2
 800a08a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a08e:	fb03 6711 	mls	r7, r3, r1, r6
 800a092:	5dc7      	ldrb	r7, [r0, r7]
 800a094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a098:	4637      	mov	r7, r6
 800a09a:	42bb      	cmp	r3, r7
 800a09c:	460e      	mov	r6, r1
 800a09e:	d9f4      	bls.n	800a08a <_printf_i+0x11a>
 800a0a0:	2b08      	cmp	r3, #8
 800a0a2:	d10b      	bne.n	800a0bc <_printf_i+0x14c>
 800a0a4:	6823      	ldr	r3, [r4, #0]
 800a0a6:	07de      	lsls	r6, r3, #31
 800a0a8:	d508      	bpl.n	800a0bc <_printf_i+0x14c>
 800a0aa:	6923      	ldr	r3, [r4, #16]
 800a0ac:	6861      	ldr	r1, [r4, #4]
 800a0ae:	4299      	cmp	r1, r3
 800a0b0:	bfde      	ittt	le
 800a0b2:	2330      	movle	r3, #48	; 0x30
 800a0b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0bc:	1b52      	subs	r2, r2, r5
 800a0be:	6122      	str	r2, [r4, #16]
 800a0c0:	f8cd a000 	str.w	sl, [sp]
 800a0c4:	464b      	mov	r3, r9
 800a0c6:	aa03      	add	r2, sp, #12
 800a0c8:	4621      	mov	r1, r4
 800a0ca:	4640      	mov	r0, r8
 800a0cc:	f7ff fee2 	bl	8009e94 <_printf_common>
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	d14c      	bne.n	800a16e <_printf_i+0x1fe>
 800a0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d8:	b004      	add	sp, #16
 800a0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0de:	4835      	ldr	r0, [pc, #212]	; (800a1b4 <_printf_i+0x244>)
 800a0e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0e4:	6829      	ldr	r1, [r5, #0]
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0ec:	6029      	str	r1, [r5, #0]
 800a0ee:	061d      	lsls	r5, r3, #24
 800a0f0:	d514      	bpl.n	800a11c <_printf_i+0x1ac>
 800a0f2:	07df      	lsls	r7, r3, #31
 800a0f4:	bf44      	itt	mi
 800a0f6:	f043 0320 	orrmi.w	r3, r3, #32
 800a0fa:	6023      	strmi	r3, [r4, #0]
 800a0fc:	b91e      	cbnz	r6, 800a106 <_printf_i+0x196>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	f023 0320 	bic.w	r3, r3, #32
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	2310      	movs	r3, #16
 800a108:	e7b0      	b.n	800a06c <_printf_i+0xfc>
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	f043 0320 	orr.w	r3, r3, #32
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	2378      	movs	r3, #120	; 0x78
 800a114:	4828      	ldr	r0, [pc, #160]	; (800a1b8 <_printf_i+0x248>)
 800a116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a11a:	e7e3      	b.n	800a0e4 <_printf_i+0x174>
 800a11c:	0659      	lsls	r1, r3, #25
 800a11e:	bf48      	it	mi
 800a120:	b2b6      	uxthmi	r6, r6
 800a122:	e7e6      	b.n	800a0f2 <_printf_i+0x182>
 800a124:	4615      	mov	r5, r2
 800a126:	e7bb      	b.n	800a0a0 <_printf_i+0x130>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	6826      	ldr	r6, [r4, #0]
 800a12c:	6961      	ldr	r1, [r4, #20]
 800a12e:	1d18      	adds	r0, r3, #4
 800a130:	6028      	str	r0, [r5, #0]
 800a132:	0635      	lsls	r5, r6, #24
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	d501      	bpl.n	800a13c <_printf_i+0x1cc>
 800a138:	6019      	str	r1, [r3, #0]
 800a13a:	e002      	b.n	800a142 <_printf_i+0x1d2>
 800a13c:	0670      	lsls	r0, r6, #25
 800a13e:	d5fb      	bpl.n	800a138 <_printf_i+0x1c8>
 800a140:	8019      	strh	r1, [r3, #0]
 800a142:	2300      	movs	r3, #0
 800a144:	6123      	str	r3, [r4, #16]
 800a146:	4615      	mov	r5, r2
 800a148:	e7ba      	b.n	800a0c0 <_printf_i+0x150>
 800a14a:	682b      	ldr	r3, [r5, #0]
 800a14c:	1d1a      	adds	r2, r3, #4
 800a14e:	602a      	str	r2, [r5, #0]
 800a150:	681d      	ldr	r5, [r3, #0]
 800a152:	6862      	ldr	r2, [r4, #4]
 800a154:	2100      	movs	r1, #0
 800a156:	4628      	mov	r0, r5
 800a158:	f7f6 f842 	bl	80001e0 <memchr>
 800a15c:	b108      	cbz	r0, 800a162 <_printf_i+0x1f2>
 800a15e:	1b40      	subs	r0, r0, r5
 800a160:	6060      	str	r0, [r4, #4]
 800a162:	6863      	ldr	r3, [r4, #4]
 800a164:	6123      	str	r3, [r4, #16]
 800a166:	2300      	movs	r3, #0
 800a168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a16c:	e7a8      	b.n	800a0c0 <_printf_i+0x150>
 800a16e:	6923      	ldr	r3, [r4, #16]
 800a170:	462a      	mov	r2, r5
 800a172:	4649      	mov	r1, r9
 800a174:	4640      	mov	r0, r8
 800a176:	47d0      	blx	sl
 800a178:	3001      	adds	r0, #1
 800a17a:	d0ab      	beq.n	800a0d4 <_printf_i+0x164>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	079b      	lsls	r3, r3, #30
 800a180:	d413      	bmi.n	800a1aa <_printf_i+0x23a>
 800a182:	68e0      	ldr	r0, [r4, #12]
 800a184:	9b03      	ldr	r3, [sp, #12]
 800a186:	4298      	cmp	r0, r3
 800a188:	bfb8      	it	lt
 800a18a:	4618      	movlt	r0, r3
 800a18c:	e7a4      	b.n	800a0d8 <_printf_i+0x168>
 800a18e:	2301      	movs	r3, #1
 800a190:	4632      	mov	r2, r6
 800a192:	4649      	mov	r1, r9
 800a194:	4640      	mov	r0, r8
 800a196:	47d0      	blx	sl
 800a198:	3001      	adds	r0, #1
 800a19a:	d09b      	beq.n	800a0d4 <_printf_i+0x164>
 800a19c:	3501      	adds	r5, #1
 800a19e:	68e3      	ldr	r3, [r4, #12]
 800a1a0:	9903      	ldr	r1, [sp, #12]
 800a1a2:	1a5b      	subs	r3, r3, r1
 800a1a4:	42ab      	cmp	r3, r5
 800a1a6:	dcf2      	bgt.n	800a18e <_printf_i+0x21e>
 800a1a8:	e7eb      	b.n	800a182 <_printf_i+0x212>
 800a1aa:	2500      	movs	r5, #0
 800a1ac:	f104 0619 	add.w	r6, r4, #25
 800a1b0:	e7f5      	b.n	800a19e <_printf_i+0x22e>
 800a1b2:	bf00      	nop
 800a1b4:	0800adaf 	.word	0x0800adaf
 800a1b8:	0800adc0 	.word	0x0800adc0

0800a1bc <__swbuf_r>:
 800a1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1be:	460e      	mov	r6, r1
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	4605      	mov	r5, r0
 800a1c4:	b118      	cbz	r0, 800a1ce <__swbuf_r+0x12>
 800a1c6:	6983      	ldr	r3, [r0, #24]
 800a1c8:	b90b      	cbnz	r3, 800a1ce <__swbuf_r+0x12>
 800a1ca:	f000 f9d9 	bl	800a580 <__sinit>
 800a1ce:	4b21      	ldr	r3, [pc, #132]	; (800a254 <__swbuf_r+0x98>)
 800a1d0:	429c      	cmp	r4, r3
 800a1d2:	d12b      	bne.n	800a22c <__swbuf_r+0x70>
 800a1d4:	686c      	ldr	r4, [r5, #4]
 800a1d6:	69a3      	ldr	r3, [r4, #24]
 800a1d8:	60a3      	str	r3, [r4, #8]
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	071a      	lsls	r2, r3, #28
 800a1de:	d52f      	bpl.n	800a240 <__swbuf_r+0x84>
 800a1e0:	6923      	ldr	r3, [r4, #16]
 800a1e2:	b36b      	cbz	r3, 800a240 <__swbuf_r+0x84>
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	6820      	ldr	r0, [r4, #0]
 800a1e8:	1ac0      	subs	r0, r0, r3
 800a1ea:	6963      	ldr	r3, [r4, #20]
 800a1ec:	b2f6      	uxtb	r6, r6
 800a1ee:	4283      	cmp	r3, r0
 800a1f0:	4637      	mov	r7, r6
 800a1f2:	dc04      	bgt.n	800a1fe <__swbuf_r+0x42>
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f000 f92e 	bl	800a458 <_fflush_r>
 800a1fc:	bb30      	cbnz	r0, 800a24c <__swbuf_r+0x90>
 800a1fe:	68a3      	ldr	r3, [r4, #8]
 800a200:	3b01      	subs	r3, #1
 800a202:	60a3      	str	r3, [r4, #8]
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	6022      	str	r2, [r4, #0]
 800a20a:	701e      	strb	r6, [r3, #0]
 800a20c:	6963      	ldr	r3, [r4, #20]
 800a20e:	3001      	adds	r0, #1
 800a210:	4283      	cmp	r3, r0
 800a212:	d004      	beq.n	800a21e <__swbuf_r+0x62>
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	07db      	lsls	r3, r3, #31
 800a218:	d506      	bpl.n	800a228 <__swbuf_r+0x6c>
 800a21a:	2e0a      	cmp	r6, #10
 800a21c:	d104      	bne.n	800a228 <__swbuf_r+0x6c>
 800a21e:	4621      	mov	r1, r4
 800a220:	4628      	mov	r0, r5
 800a222:	f000 f919 	bl	800a458 <_fflush_r>
 800a226:	b988      	cbnz	r0, 800a24c <__swbuf_r+0x90>
 800a228:	4638      	mov	r0, r7
 800a22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a22c:	4b0a      	ldr	r3, [pc, #40]	; (800a258 <__swbuf_r+0x9c>)
 800a22e:	429c      	cmp	r4, r3
 800a230:	d101      	bne.n	800a236 <__swbuf_r+0x7a>
 800a232:	68ac      	ldr	r4, [r5, #8]
 800a234:	e7cf      	b.n	800a1d6 <__swbuf_r+0x1a>
 800a236:	4b09      	ldr	r3, [pc, #36]	; (800a25c <__swbuf_r+0xa0>)
 800a238:	429c      	cmp	r4, r3
 800a23a:	bf08      	it	eq
 800a23c:	68ec      	ldreq	r4, [r5, #12]
 800a23e:	e7ca      	b.n	800a1d6 <__swbuf_r+0x1a>
 800a240:	4621      	mov	r1, r4
 800a242:	4628      	mov	r0, r5
 800a244:	f000 f80c 	bl	800a260 <__swsetup_r>
 800a248:	2800      	cmp	r0, #0
 800a24a:	d0cb      	beq.n	800a1e4 <__swbuf_r+0x28>
 800a24c:	f04f 37ff 	mov.w	r7, #4294967295
 800a250:	e7ea      	b.n	800a228 <__swbuf_r+0x6c>
 800a252:	bf00      	nop
 800a254:	0800adf4 	.word	0x0800adf4
 800a258:	0800ae14 	.word	0x0800ae14
 800a25c:	0800add4 	.word	0x0800add4

0800a260 <__swsetup_r>:
 800a260:	4b32      	ldr	r3, [pc, #200]	; (800a32c <__swsetup_r+0xcc>)
 800a262:	b570      	push	{r4, r5, r6, lr}
 800a264:	681d      	ldr	r5, [r3, #0]
 800a266:	4606      	mov	r6, r0
 800a268:	460c      	mov	r4, r1
 800a26a:	b125      	cbz	r5, 800a276 <__swsetup_r+0x16>
 800a26c:	69ab      	ldr	r3, [r5, #24]
 800a26e:	b913      	cbnz	r3, 800a276 <__swsetup_r+0x16>
 800a270:	4628      	mov	r0, r5
 800a272:	f000 f985 	bl	800a580 <__sinit>
 800a276:	4b2e      	ldr	r3, [pc, #184]	; (800a330 <__swsetup_r+0xd0>)
 800a278:	429c      	cmp	r4, r3
 800a27a:	d10f      	bne.n	800a29c <__swsetup_r+0x3c>
 800a27c:	686c      	ldr	r4, [r5, #4]
 800a27e:	89a3      	ldrh	r3, [r4, #12]
 800a280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a284:	0719      	lsls	r1, r3, #28
 800a286:	d42c      	bmi.n	800a2e2 <__swsetup_r+0x82>
 800a288:	06dd      	lsls	r5, r3, #27
 800a28a:	d411      	bmi.n	800a2b0 <__swsetup_r+0x50>
 800a28c:	2309      	movs	r3, #9
 800a28e:	6033      	str	r3, [r6, #0]
 800a290:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a294:	81a3      	strh	r3, [r4, #12]
 800a296:	f04f 30ff 	mov.w	r0, #4294967295
 800a29a:	e03e      	b.n	800a31a <__swsetup_r+0xba>
 800a29c:	4b25      	ldr	r3, [pc, #148]	; (800a334 <__swsetup_r+0xd4>)
 800a29e:	429c      	cmp	r4, r3
 800a2a0:	d101      	bne.n	800a2a6 <__swsetup_r+0x46>
 800a2a2:	68ac      	ldr	r4, [r5, #8]
 800a2a4:	e7eb      	b.n	800a27e <__swsetup_r+0x1e>
 800a2a6:	4b24      	ldr	r3, [pc, #144]	; (800a338 <__swsetup_r+0xd8>)
 800a2a8:	429c      	cmp	r4, r3
 800a2aa:	bf08      	it	eq
 800a2ac:	68ec      	ldreq	r4, [r5, #12]
 800a2ae:	e7e6      	b.n	800a27e <__swsetup_r+0x1e>
 800a2b0:	0758      	lsls	r0, r3, #29
 800a2b2:	d512      	bpl.n	800a2da <__swsetup_r+0x7a>
 800a2b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2b6:	b141      	cbz	r1, 800a2ca <__swsetup_r+0x6a>
 800a2b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2bc:	4299      	cmp	r1, r3
 800a2be:	d002      	beq.n	800a2c6 <__swsetup_r+0x66>
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	f7ff f945 	bl	8009550 <_free_r>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	6363      	str	r3, [r4, #52]	; 0x34
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2d0:	81a3      	strh	r3, [r4, #12]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	6063      	str	r3, [r4, #4]
 800a2d6:	6923      	ldr	r3, [r4, #16]
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	89a3      	ldrh	r3, [r4, #12]
 800a2dc:	f043 0308 	orr.w	r3, r3, #8
 800a2e0:	81a3      	strh	r3, [r4, #12]
 800a2e2:	6923      	ldr	r3, [r4, #16]
 800a2e4:	b94b      	cbnz	r3, 800a2fa <__swsetup_r+0x9a>
 800a2e6:	89a3      	ldrh	r3, [r4, #12]
 800a2e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2f0:	d003      	beq.n	800a2fa <__swsetup_r+0x9a>
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	f000 fa09 	bl	800a70c <__smakebuf_r>
 800a2fa:	89a0      	ldrh	r0, [r4, #12]
 800a2fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a300:	f010 0301 	ands.w	r3, r0, #1
 800a304:	d00a      	beq.n	800a31c <__swsetup_r+0xbc>
 800a306:	2300      	movs	r3, #0
 800a308:	60a3      	str	r3, [r4, #8]
 800a30a:	6963      	ldr	r3, [r4, #20]
 800a30c:	425b      	negs	r3, r3
 800a30e:	61a3      	str	r3, [r4, #24]
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	b943      	cbnz	r3, 800a326 <__swsetup_r+0xc6>
 800a314:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a318:	d1ba      	bne.n	800a290 <__swsetup_r+0x30>
 800a31a:	bd70      	pop	{r4, r5, r6, pc}
 800a31c:	0781      	lsls	r1, r0, #30
 800a31e:	bf58      	it	pl
 800a320:	6963      	ldrpl	r3, [r4, #20]
 800a322:	60a3      	str	r3, [r4, #8]
 800a324:	e7f4      	b.n	800a310 <__swsetup_r+0xb0>
 800a326:	2000      	movs	r0, #0
 800a328:	e7f7      	b.n	800a31a <__swsetup_r+0xba>
 800a32a:	bf00      	nop
 800a32c:	20000070 	.word	0x20000070
 800a330:	0800adf4 	.word	0x0800adf4
 800a334:	0800ae14 	.word	0x0800ae14
 800a338:	0800add4 	.word	0x0800add4

0800a33c <abort>:
 800a33c:	b508      	push	{r3, lr}
 800a33e:	2006      	movs	r0, #6
 800a340:	f000 faa4 	bl	800a88c <raise>
 800a344:	2001      	movs	r0, #1
 800a346:	f7fa fc8f 	bl	8004c68 <_exit>
	...

0800a34c <__sflush_r>:
 800a34c:	898a      	ldrh	r2, [r1, #12]
 800a34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a352:	4605      	mov	r5, r0
 800a354:	0710      	lsls	r0, r2, #28
 800a356:	460c      	mov	r4, r1
 800a358:	d458      	bmi.n	800a40c <__sflush_r+0xc0>
 800a35a:	684b      	ldr	r3, [r1, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	dc05      	bgt.n	800a36c <__sflush_r+0x20>
 800a360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a362:	2b00      	cmp	r3, #0
 800a364:	dc02      	bgt.n	800a36c <__sflush_r+0x20>
 800a366:	2000      	movs	r0, #0
 800a368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a36c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a36e:	2e00      	cmp	r6, #0
 800a370:	d0f9      	beq.n	800a366 <__sflush_r+0x1a>
 800a372:	2300      	movs	r3, #0
 800a374:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a378:	682f      	ldr	r7, [r5, #0]
 800a37a:	602b      	str	r3, [r5, #0]
 800a37c:	d032      	beq.n	800a3e4 <__sflush_r+0x98>
 800a37e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a380:	89a3      	ldrh	r3, [r4, #12]
 800a382:	075a      	lsls	r2, r3, #29
 800a384:	d505      	bpl.n	800a392 <__sflush_r+0x46>
 800a386:	6863      	ldr	r3, [r4, #4]
 800a388:	1ac0      	subs	r0, r0, r3
 800a38a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a38c:	b10b      	cbz	r3, 800a392 <__sflush_r+0x46>
 800a38e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a390:	1ac0      	subs	r0, r0, r3
 800a392:	2300      	movs	r3, #0
 800a394:	4602      	mov	r2, r0
 800a396:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a398:	6a21      	ldr	r1, [r4, #32]
 800a39a:	4628      	mov	r0, r5
 800a39c:	47b0      	blx	r6
 800a39e:	1c43      	adds	r3, r0, #1
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	d106      	bne.n	800a3b2 <__sflush_r+0x66>
 800a3a4:	6829      	ldr	r1, [r5, #0]
 800a3a6:	291d      	cmp	r1, #29
 800a3a8:	d82c      	bhi.n	800a404 <__sflush_r+0xb8>
 800a3aa:	4a2a      	ldr	r2, [pc, #168]	; (800a454 <__sflush_r+0x108>)
 800a3ac:	40ca      	lsrs	r2, r1
 800a3ae:	07d6      	lsls	r6, r2, #31
 800a3b0:	d528      	bpl.n	800a404 <__sflush_r+0xb8>
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	6062      	str	r2, [r4, #4]
 800a3b6:	04d9      	lsls	r1, r3, #19
 800a3b8:	6922      	ldr	r2, [r4, #16]
 800a3ba:	6022      	str	r2, [r4, #0]
 800a3bc:	d504      	bpl.n	800a3c8 <__sflush_r+0x7c>
 800a3be:	1c42      	adds	r2, r0, #1
 800a3c0:	d101      	bne.n	800a3c6 <__sflush_r+0x7a>
 800a3c2:	682b      	ldr	r3, [r5, #0]
 800a3c4:	b903      	cbnz	r3, 800a3c8 <__sflush_r+0x7c>
 800a3c6:	6560      	str	r0, [r4, #84]	; 0x54
 800a3c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3ca:	602f      	str	r7, [r5, #0]
 800a3cc:	2900      	cmp	r1, #0
 800a3ce:	d0ca      	beq.n	800a366 <__sflush_r+0x1a>
 800a3d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3d4:	4299      	cmp	r1, r3
 800a3d6:	d002      	beq.n	800a3de <__sflush_r+0x92>
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f7ff f8b9 	bl	8009550 <_free_r>
 800a3de:	2000      	movs	r0, #0
 800a3e0:	6360      	str	r0, [r4, #52]	; 0x34
 800a3e2:	e7c1      	b.n	800a368 <__sflush_r+0x1c>
 800a3e4:	6a21      	ldr	r1, [r4, #32]
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	47b0      	blx	r6
 800a3ec:	1c41      	adds	r1, r0, #1
 800a3ee:	d1c7      	bne.n	800a380 <__sflush_r+0x34>
 800a3f0:	682b      	ldr	r3, [r5, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d0c4      	beq.n	800a380 <__sflush_r+0x34>
 800a3f6:	2b1d      	cmp	r3, #29
 800a3f8:	d001      	beq.n	800a3fe <__sflush_r+0xb2>
 800a3fa:	2b16      	cmp	r3, #22
 800a3fc:	d101      	bne.n	800a402 <__sflush_r+0xb6>
 800a3fe:	602f      	str	r7, [r5, #0]
 800a400:	e7b1      	b.n	800a366 <__sflush_r+0x1a>
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a408:	81a3      	strh	r3, [r4, #12]
 800a40a:	e7ad      	b.n	800a368 <__sflush_r+0x1c>
 800a40c:	690f      	ldr	r7, [r1, #16]
 800a40e:	2f00      	cmp	r7, #0
 800a410:	d0a9      	beq.n	800a366 <__sflush_r+0x1a>
 800a412:	0793      	lsls	r3, r2, #30
 800a414:	680e      	ldr	r6, [r1, #0]
 800a416:	bf08      	it	eq
 800a418:	694b      	ldreq	r3, [r1, #20]
 800a41a:	600f      	str	r7, [r1, #0]
 800a41c:	bf18      	it	ne
 800a41e:	2300      	movne	r3, #0
 800a420:	eba6 0807 	sub.w	r8, r6, r7
 800a424:	608b      	str	r3, [r1, #8]
 800a426:	f1b8 0f00 	cmp.w	r8, #0
 800a42a:	dd9c      	ble.n	800a366 <__sflush_r+0x1a>
 800a42c:	6a21      	ldr	r1, [r4, #32]
 800a42e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a430:	4643      	mov	r3, r8
 800a432:	463a      	mov	r2, r7
 800a434:	4628      	mov	r0, r5
 800a436:	47b0      	blx	r6
 800a438:	2800      	cmp	r0, #0
 800a43a:	dc06      	bgt.n	800a44a <__sflush_r+0xfe>
 800a43c:	89a3      	ldrh	r3, [r4, #12]
 800a43e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a442:	81a3      	strh	r3, [r4, #12]
 800a444:	f04f 30ff 	mov.w	r0, #4294967295
 800a448:	e78e      	b.n	800a368 <__sflush_r+0x1c>
 800a44a:	4407      	add	r7, r0
 800a44c:	eba8 0800 	sub.w	r8, r8, r0
 800a450:	e7e9      	b.n	800a426 <__sflush_r+0xda>
 800a452:	bf00      	nop
 800a454:	20400001 	.word	0x20400001

0800a458 <_fflush_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	690b      	ldr	r3, [r1, #16]
 800a45c:	4605      	mov	r5, r0
 800a45e:	460c      	mov	r4, r1
 800a460:	b913      	cbnz	r3, 800a468 <_fflush_r+0x10>
 800a462:	2500      	movs	r5, #0
 800a464:	4628      	mov	r0, r5
 800a466:	bd38      	pop	{r3, r4, r5, pc}
 800a468:	b118      	cbz	r0, 800a472 <_fflush_r+0x1a>
 800a46a:	6983      	ldr	r3, [r0, #24]
 800a46c:	b90b      	cbnz	r3, 800a472 <_fflush_r+0x1a>
 800a46e:	f000 f887 	bl	800a580 <__sinit>
 800a472:	4b14      	ldr	r3, [pc, #80]	; (800a4c4 <_fflush_r+0x6c>)
 800a474:	429c      	cmp	r4, r3
 800a476:	d11b      	bne.n	800a4b0 <_fflush_r+0x58>
 800a478:	686c      	ldr	r4, [r5, #4]
 800a47a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d0ef      	beq.n	800a462 <_fflush_r+0xa>
 800a482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a484:	07d0      	lsls	r0, r2, #31
 800a486:	d404      	bmi.n	800a492 <_fflush_r+0x3a>
 800a488:	0599      	lsls	r1, r3, #22
 800a48a:	d402      	bmi.n	800a492 <_fflush_r+0x3a>
 800a48c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a48e:	f000 f915 	bl	800a6bc <__retarget_lock_acquire_recursive>
 800a492:	4628      	mov	r0, r5
 800a494:	4621      	mov	r1, r4
 800a496:	f7ff ff59 	bl	800a34c <__sflush_r>
 800a49a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a49c:	07da      	lsls	r2, r3, #31
 800a49e:	4605      	mov	r5, r0
 800a4a0:	d4e0      	bmi.n	800a464 <_fflush_r+0xc>
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	059b      	lsls	r3, r3, #22
 800a4a6:	d4dd      	bmi.n	800a464 <_fflush_r+0xc>
 800a4a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4aa:	f000 f908 	bl	800a6be <__retarget_lock_release_recursive>
 800a4ae:	e7d9      	b.n	800a464 <_fflush_r+0xc>
 800a4b0:	4b05      	ldr	r3, [pc, #20]	; (800a4c8 <_fflush_r+0x70>)
 800a4b2:	429c      	cmp	r4, r3
 800a4b4:	d101      	bne.n	800a4ba <_fflush_r+0x62>
 800a4b6:	68ac      	ldr	r4, [r5, #8]
 800a4b8:	e7df      	b.n	800a47a <_fflush_r+0x22>
 800a4ba:	4b04      	ldr	r3, [pc, #16]	; (800a4cc <_fflush_r+0x74>)
 800a4bc:	429c      	cmp	r4, r3
 800a4be:	bf08      	it	eq
 800a4c0:	68ec      	ldreq	r4, [r5, #12]
 800a4c2:	e7da      	b.n	800a47a <_fflush_r+0x22>
 800a4c4:	0800adf4 	.word	0x0800adf4
 800a4c8:	0800ae14 	.word	0x0800ae14
 800a4cc:	0800add4 	.word	0x0800add4

0800a4d0 <std>:
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	b510      	push	{r4, lr}
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a4da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4de:	6083      	str	r3, [r0, #8]
 800a4e0:	8181      	strh	r1, [r0, #12]
 800a4e2:	6643      	str	r3, [r0, #100]	; 0x64
 800a4e4:	81c2      	strh	r2, [r0, #14]
 800a4e6:	6183      	str	r3, [r0, #24]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	2208      	movs	r2, #8
 800a4ec:	305c      	adds	r0, #92	; 0x5c
 800a4ee:	f7ff f827 	bl	8009540 <memset>
 800a4f2:	4b05      	ldr	r3, [pc, #20]	; (800a508 <std+0x38>)
 800a4f4:	6263      	str	r3, [r4, #36]	; 0x24
 800a4f6:	4b05      	ldr	r3, [pc, #20]	; (800a50c <std+0x3c>)
 800a4f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4fa:	4b05      	ldr	r3, [pc, #20]	; (800a510 <std+0x40>)
 800a4fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4fe:	4b05      	ldr	r3, [pc, #20]	; (800a514 <std+0x44>)
 800a500:	6224      	str	r4, [r4, #32]
 800a502:	6323      	str	r3, [r4, #48]	; 0x30
 800a504:	bd10      	pop	{r4, pc}
 800a506:	bf00      	nop
 800a508:	0800a8c5 	.word	0x0800a8c5
 800a50c:	0800a8e7 	.word	0x0800a8e7
 800a510:	0800a91f 	.word	0x0800a91f
 800a514:	0800a943 	.word	0x0800a943

0800a518 <_cleanup_r>:
 800a518:	4901      	ldr	r1, [pc, #4]	; (800a520 <_cleanup_r+0x8>)
 800a51a:	f000 b8af 	b.w	800a67c <_fwalk_reent>
 800a51e:	bf00      	nop
 800a520:	0800a459 	.word	0x0800a459

0800a524 <__sfmoreglue>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	2268      	movs	r2, #104	; 0x68
 800a528:	1e4d      	subs	r5, r1, #1
 800a52a:	4355      	muls	r5, r2
 800a52c:	460e      	mov	r6, r1
 800a52e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a532:	f7ff f879 	bl	8009628 <_malloc_r>
 800a536:	4604      	mov	r4, r0
 800a538:	b140      	cbz	r0, 800a54c <__sfmoreglue+0x28>
 800a53a:	2100      	movs	r1, #0
 800a53c:	e9c0 1600 	strd	r1, r6, [r0]
 800a540:	300c      	adds	r0, #12
 800a542:	60a0      	str	r0, [r4, #8]
 800a544:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a548:	f7fe fffa 	bl	8009540 <memset>
 800a54c:	4620      	mov	r0, r4
 800a54e:	bd70      	pop	{r4, r5, r6, pc}

0800a550 <__sfp_lock_acquire>:
 800a550:	4801      	ldr	r0, [pc, #4]	; (800a558 <__sfp_lock_acquire+0x8>)
 800a552:	f000 b8b3 	b.w	800a6bc <__retarget_lock_acquire_recursive>
 800a556:	bf00      	nop
 800a558:	2000076d 	.word	0x2000076d

0800a55c <__sfp_lock_release>:
 800a55c:	4801      	ldr	r0, [pc, #4]	; (800a564 <__sfp_lock_release+0x8>)
 800a55e:	f000 b8ae 	b.w	800a6be <__retarget_lock_release_recursive>
 800a562:	bf00      	nop
 800a564:	2000076d 	.word	0x2000076d

0800a568 <__sinit_lock_acquire>:
 800a568:	4801      	ldr	r0, [pc, #4]	; (800a570 <__sinit_lock_acquire+0x8>)
 800a56a:	f000 b8a7 	b.w	800a6bc <__retarget_lock_acquire_recursive>
 800a56e:	bf00      	nop
 800a570:	2000076e 	.word	0x2000076e

0800a574 <__sinit_lock_release>:
 800a574:	4801      	ldr	r0, [pc, #4]	; (800a57c <__sinit_lock_release+0x8>)
 800a576:	f000 b8a2 	b.w	800a6be <__retarget_lock_release_recursive>
 800a57a:	bf00      	nop
 800a57c:	2000076e 	.word	0x2000076e

0800a580 <__sinit>:
 800a580:	b510      	push	{r4, lr}
 800a582:	4604      	mov	r4, r0
 800a584:	f7ff fff0 	bl	800a568 <__sinit_lock_acquire>
 800a588:	69a3      	ldr	r3, [r4, #24]
 800a58a:	b11b      	cbz	r3, 800a594 <__sinit+0x14>
 800a58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a590:	f7ff bff0 	b.w	800a574 <__sinit_lock_release>
 800a594:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a598:	6523      	str	r3, [r4, #80]	; 0x50
 800a59a:	4b13      	ldr	r3, [pc, #76]	; (800a5e8 <__sinit+0x68>)
 800a59c:	4a13      	ldr	r2, [pc, #76]	; (800a5ec <__sinit+0x6c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5a2:	42a3      	cmp	r3, r4
 800a5a4:	bf04      	itt	eq
 800a5a6:	2301      	moveq	r3, #1
 800a5a8:	61a3      	streq	r3, [r4, #24]
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f000 f820 	bl	800a5f0 <__sfp>
 800a5b0:	6060      	str	r0, [r4, #4]
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f000 f81c 	bl	800a5f0 <__sfp>
 800a5b8:	60a0      	str	r0, [r4, #8]
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 f818 	bl	800a5f0 <__sfp>
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	60e0      	str	r0, [r4, #12]
 800a5c4:	2104      	movs	r1, #4
 800a5c6:	6860      	ldr	r0, [r4, #4]
 800a5c8:	f7ff ff82 	bl	800a4d0 <std>
 800a5cc:	68a0      	ldr	r0, [r4, #8]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	2109      	movs	r1, #9
 800a5d2:	f7ff ff7d 	bl	800a4d0 <std>
 800a5d6:	68e0      	ldr	r0, [r4, #12]
 800a5d8:	2202      	movs	r2, #2
 800a5da:	2112      	movs	r1, #18
 800a5dc:	f7ff ff78 	bl	800a4d0 <std>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	61a3      	str	r3, [r4, #24]
 800a5e4:	e7d2      	b.n	800a58c <__sinit+0xc>
 800a5e6:	bf00      	nop
 800a5e8:	0800acec 	.word	0x0800acec
 800a5ec:	0800a519 	.word	0x0800a519

0800a5f0 <__sfp>:
 800a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f2:	4607      	mov	r7, r0
 800a5f4:	f7ff ffac 	bl	800a550 <__sfp_lock_acquire>
 800a5f8:	4b1e      	ldr	r3, [pc, #120]	; (800a674 <__sfp+0x84>)
 800a5fa:	681e      	ldr	r6, [r3, #0]
 800a5fc:	69b3      	ldr	r3, [r6, #24]
 800a5fe:	b913      	cbnz	r3, 800a606 <__sfp+0x16>
 800a600:	4630      	mov	r0, r6
 800a602:	f7ff ffbd 	bl	800a580 <__sinit>
 800a606:	3648      	adds	r6, #72	; 0x48
 800a608:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a60c:	3b01      	subs	r3, #1
 800a60e:	d503      	bpl.n	800a618 <__sfp+0x28>
 800a610:	6833      	ldr	r3, [r6, #0]
 800a612:	b30b      	cbz	r3, 800a658 <__sfp+0x68>
 800a614:	6836      	ldr	r6, [r6, #0]
 800a616:	e7f7      	b.n	800a608 <__sfp+0x18>
 800a618:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a61c:	b9d5      	cbnz	r5, 800a654 <__sfp+0x64>
 800a61e:	4b16      	ldr	r3, [pc, #88]	; (800a678 <__sfp+0x88>)
 800a620:	60e3      	str	r3, [r4, #12]
 800a622:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a626:	6665      	str	r5, [r4, #100]	; 0x64
 800a628:	f000 f847 	bl	800a6ba <__retarget_lock_init_recursive>
 800a62c:	f7ff ff96 	bl	800a55c <__sfp_lock_release>
 800a630:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a634:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a638:	6025      	str	r5, [r4, #0]
 800a63a:	61a5      	str	r5, [r4, #24]
 800a63c:	2208      	movs	r2, #8
 800a63e:	4629      	mov	r1, r5
 800a640:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a644:	f7fe ff7c 	bl	8009540 <memset>
 800a648:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a64c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a650:	4620      	mov	r0, r4
 800a652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a654:	3468      	adds	r4, #104	; 0x68
 800a656:	e7d9      	b.n	800a60c <__sfp+0x1c>
 800a658:	2104      	movs	r1, #4
 800a65a:	4638      	mov	r0, r7
 800a65c:	f7ff ff62 	bl	800a524 <__sfmoreglue>
 800a660:	4604      	mov	r4, r0
 800a662:	6030      	str	r0, [r6, #0]
 800a664:	2800      	cmp	r0, #0
 800a666:	d1d5      	bne.n	800a614 <__sfp+0x24>
 800a668:	f7ff ff78 	bl	800a55c <__sfp_lock_release>
 800a66c:	230c      	movs	r3, #12
 800a66e:	603b      	str	r3, [r7, #0]
 800a670:	e7ee      	b.n	800a650 <__sfp+0x60>
 800a672:	bf00      	nop
 800a674:	0800acec 	.word	0x0800acec
 800a678:	ffff0001 	.word	0xffff0001

0800a67c <_fwalk_reent>:
 800a67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a680:	4606      	mov	r6, r0
 800a682:	4688      	mov	r8, r1
 800a684:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a688:	2700      	movs	r7, #0
 800a68a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a68e:	f1b9 0901 	subs.w	r9, r9, #1
 800a692:	d505      	bpl.n	800a6a0 <_fwalk_reent+0x24>
 800a694:	6824      	ldr	r4, [r4, #0]
 800a696:	2c00      	cmp	r4, #0
 800a698:	d1f7      	bne.n	800a68a <_fwalk_reent+0xe>
 800a69a:	4638      	mov	r0, r7
 800a69c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6a0:	89ab      	ldrh	r3, [r5, #12]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d907      	bls.n	800a6b6 <_fwalk_reent+0x3a>
 800a6a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	d003      	beq.n	800a6b6 <_fwalk_reent+0x3a>
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	47c0      	blx	r8
 800a6b4:	4307      	orrs	r7, r0
 800a6b6:	3568      	adds	r5, #104	; 0x68
 800a6b8:	e7e9      	b.n	800a68e <_fwalk_reent+0x12>

0800a6ba <__retarget_lock_init_recursive>:
 800a6ba:	4770      	bx	lr

0800a6bc <__retarget_lock_acquire_recursive>:
 800a6bc:	4770      	bx	lr

0800a6be <__retarget_lock_release_recursive>:
 800a6be:	4770      	bx	lr

0800a6c0 <__swhatbuf_r>:
 800a6c0:	b570      	push	{r4, r5, r6, lr}
 800a6c2:	460e      	mov	r6, r1
 800a6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c8:	2900      	cmp	r1, #0
 800a6ca:	b096      	sub	sp, #88	; 0x58
 800a6cc:	4614      	mov	r4, r2
 800a6ce:	461d      	mov	r5, r3
 800a6d0:	da08      	bge.n	800a6e4 <__swhatbuf_r+0x24>
 800a6d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	602a      	str	r2, [r5, #0]
 800a6da:	061a      	lsls	r2, r3, #24
 800a6dc:	d410      	bmi.n	800a700 <__swhatbuf_r+0x40>
 800a6de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6e2:	e00e      	b.n	800a702 <__swhatbuf_r+0x42>
 800a6e4:	466a      	mov	r2, sp
 800a6e6:	f000 f953 	bl	800a990 <_fstat_r>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	dbf1      	blt.n	800a6d2 <__swhatbuf_r+0x12>
 800a6ee:	9a01      	ldr	r2, [sp, #4]
 800a6f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6f8:	425a      	negs	r2, r3
 800a6fa:	415a      	adcs	r2, r3
 800a6fc:	602a      	str	r2, [r5, #0]
 800a6fe:	e7ee      	b.n	800a6de <__swhatbuf_r+0x1e>
 800a700:	2340      	movs	r3, #64	; 0x40
 800a702:	2000      	movs	r0, #0
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	b016      	add	sp, #88	; 0x58
 800a708:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a70c <__smakebuf_r>:
 800a70c:	898b      	ldrh	r3, [r1, #12]
 800a70e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a710:	079d      	lsls	r5, r3, #30
 800a712:	4606      	mov	r6, r0
 800a714:	460c      	mov	r4, r1
 800a716:	d507      	bpl.n	800a728 <__smakebuf_r+0x1c>
 800a718:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	6123      	str	r3, [r4, #16]
 800a720:	2301      	movs	r3, #1
 800a722:	6163      	str	r3, [r4, #20]
 800a724:	b002      	add	sp, #8
 800a726:	bd70      	pop	{r4, r5, r6, pc}
 800a728:	ab01      	add	r3, sp, #4
 800a72a:	466a      	mov	r2, sp
 800a72c:	f7ff ffc8 	bl	800a6c0 <__swhatbuf_r>
 800a730:	9900      	ldr	r1, [sp, #0]
 800a732:	4605      	mov	r5, r0
 800a734:	4630      	mov	r0, r6
 800a736:	f7fe ff77 	bl	8009628 <_malloc_r>
 800a73a:	b948      	cbnz	r0, 800a750 <__smakebuf_r+0x44>
 800a73c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a740:	059a      	lsls	r2, r3, #22
 800a742:	d4ef      	bmi.n	800a724 <__smakebuf_r+0x18>
 800a744:	f023 0303 	bic.w	r3, r3, #3
 800a748:	f043 0302 	orr.w	r3, r3, #2
 800a74c:	81a3      	strh	r3, [r4, #12]
 800a74e:	e7e3      	b.n	800a718 <__smakebuf_r+0xc>
 800a750:	4b0d      	ldr	r3, [pc, #52]	; (800a788 <__smakebuf_r+0x7c>)
 800a752:	62b3      	str	r3, [r6, #40]	; 0x28
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	6020      	str	r0, [r4, #0]
 800a758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a75c:	81a3      	strh	r3, [r4, #12]
 800a75e:	9b00      	ldr	r3, [sp, #0]
 800a760:	6163      	str	r3, [r4, #20]
 800a762:	9b01      	ldr	r3, [sp, #4]
 800a764:	6120      	str	r0, [r4, #16]
 800a766:	b15b      	cbz	r3, 800a780 <__smakebuf_r+0x74>
 800a768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a76c:	4630      	mov	r0, r6
 800a76e:	f000 f921 	bl	800a9b4 <_isatty_r>
 800a772:	b128      	cbz	r0, 800a780 <__smakebuf_r+0x74>
 800a774:	89a3      	ldrh	r3, [r4, #12]
 800a776:	f023 0303 	bic.w	r3, r3, #3
 800a77a:	f043 0301 	orr.w	r3, r3, #1
 800a77e:	81a3      	strh	r3, [r4, #12]
 800a780:	89a0      	ldrh	r0, [r4, #12]
 800a782:	4305      	orrs	r5, r0
 800a784:	81a5      	strh	r5, [r4, #12]
 800a786:	e7cd      	b.n	800a724 <__smakebuf_r+0x18>
 800a788:	0800a519 	.word	0x0800a519

0800a78c <memcpy>:
 800a78c:	440a      	add	r2, r1
 800a78e:	4291      	cmp	r1, r2
 800a790:	f100 33ff 	add.w	r3, r0, #4294967295
 800a794:	d100      	bne.n	800a798 <memcpy+0xc>
 800a796:	4770      	bx	lr
 800a798:	b510      	push	{r4, lr}
 800a79a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a79e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7a2:	4291      	cmp	r1, r2
 800a7a4:	d1f9      	bne.n	800a79a <memcpy+0xe>
 800a7a6:	bd10      	pop	{r4, pc}

0800a7a8 <memmove>:
 800a7a8:	4288      	cmp	r0, r1
 800a7aa:	b510      	push	{r4, lr}
 800a7ac:	eb01 0402 	add.w	r4, r1, r2
 800a7b0:	d902      	bls.n	800a7b8 <memmove+0x10>
 800a7b2:	4284      	cmp	r4, r0
 800a7b4:	4623      	mov	r3, r4
 800a7b6:	d807      	bhi.n	800a7c8 <memmove+0x20>
 800a7b8:	1e43      	subs	r3, r0, #1
 800a7ba:	42a1      	cmp	r1, r4
 800a7bc:	d008      	beq.n	800a7d0 <memmove+0x28>
 800a7be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7c6:	e7f8      	b.n	800a7ba <memmove+0x12>
 800a7c8:	4402      	add	r2, r0
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	428a      	cmp	r2, r1
 800a7ce:	d100      	bne.n	800a7d2 <memmove+0x2a>
 800a7d0:	bd10      	pop	{r4, pc}
 800a7d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7da:	e7f7      	b.n	800a7cc <memmove+0x24>

0800a7dc <_realloc_r>:
 800a7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e0:	4680      	mov	r8, r0
 800a7e2:	4614      	mov	r4, r2
 800a7e4:	460e      	mov	r6, r1
 800a7e6:	b921      	cbnz	r1, 800a7f2 <_realloc_r+0x16>
 800a7e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	f7fe bf1b 	b.w	8009628 <_malloc_r>
 800a7f2:	b92a      	cbnz	r2, 800a800 <_realloc_r+0x24>
 800a7f4:	f7fe feac 	bl	8009550 <_free_r>
 800a7f8:	4625      	mov	r5, r4
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a800:	f000 f8fa 	bl	800a9f8 <_malloc_usable_size_r>
 800a804:	4284      	cmp	r4, r0
 800a806:	4607      	mov	r7, r0
 800a808:	d802      	bhi.n	800a810 <_realloc_r+0x34>
 800a80a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a80e:	d812      	bhi.n	800a836 <_realloc_r+0x5a>
 800a810:	4621      	mov	r1, r4
 800a812:	4640      	mov	r0, r8
 800a814:	f7fe ff08 	bl	8009628 <_malloc_r>
 800a818:	4605      	mov	r5, r0
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d0ed      	beq.n	800a7fa <_realloc_r+0x1e>
 800a81e:	42bc      	cmp	r4, r7
 800a820:	4622      	mov	r2, r4
 800a822:	4631      	mov	r1, r6
 800a824:	bf28      	it	cs
 800a826:	463a      	movcs	r2, r7
 800a828:	f7ff ffb0 	bl	800a78c <memcpy>
 800a82c:	4631      	mov	r1, r6
 800a82e:	4640      	mov	r0, r8
 800a830:	f7fe fe8e 	bl	8009550 <_free_r>
 800a834:	e7e1      	b.n	800a7fa <_realloc_r+0x1e>
 800a836:	4635      	mov	r5, r6
 800a838:	e7df      	b.n	800a7fa <_realloc_r+0x1e>

0800a83a <_raise_r>:
 800a83a:	291f      	cmp	r1, #31
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	4604      	mov	r4, r0
 800a840:	460d      	mov	r5, r1
 800a842:	d904      	bls.n	800a84e <_raise_r+0x14>
 800a844:	2316      	movs	r3, #22
 800a846:	6003      	str	r3, [r0, #0]
 800a848:	f04f 30ff 	mov.w	r0, #4294967295
 800a84c:	bd38      	pop	{r3, r4, r5, pc}
 800a84e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a850:	b112      	cbz	r2, 800a858 <_raise_r+0x1e>
 800a852:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a856:	b94b      	cbnz	r3, 800a86c <_raise_r+0x32>
 800a858:	4620      	mov	r0, r4
 800a85a:	f000 f831 	bl	800a8c0 <_getpid_r>
 800a85e:	462a      	mov	r2, r5
 800a860:	4601      	mov	r1, r0
 800a862:	4620      	mov	r0, r4
 800a864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a868:	f000 b818 	b.w	800a89c <_kill_r>
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d00a      	beq.n	800a886 <_raise_r+0x4c>
 800a870:	1c59      	adds	r1, r3, #1
 800a872:	d103      	bne.n	800a87c <_raise_r+0x42>
 800a874:	2316      	movs	r3, #22
 800a876:	6003      	str	r3, [r0, #0]
 800a878:	2001      	movs	r0, #1
 800a87a:	e7e7      	b.n	800a84c <_raise_r+0x12>
 800a87c:	2400      	movs	r4, #0
 800a87e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a882:	4628      	mov	r0, r5
 800a884:	4798      	blx	r3
 800a886:	2000      	movs	r0, #0
 800a888:	e7e0      	b.n	800a84c <_raise_r+0x12>
	...

0800a88c <raise>:
 800a88c:	4b02      	ldr	r3, [pc, #8]	; (800a898 <raise+0xc>)
 800a88e:	4601      	mov	r1, r0
 800a890:	6818      	ldr	r0, [r3, #0]
 800a892:	f7ff bfd2 	b.w	800a83a <_raise_r>
 800a896:	bf00      	nop
 800a898:	20000070 	.word	0x20000070

0800a89c <_kill_r>:
 800a89c:	b538      	push	{r3, r4, r5, lr}
 800a89e:	4d07      	ldr	r5, [pc, #28]	; (800a8bc <_kill_r+0x20>)
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	4608      	mov	r0, r1
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	602b      	str	r3, [r5, #0]
 800a8aa:	f7fa f9cd 	bl	8004c48 <_kill>
 800a8ae:	1c43      	adds	r3, r0, #1
 800a8b0:	d102      	bne.n	800a8b8 <_kill_r+0x1c>
 800a8b2:	682b      	ldr	r3, [r5, #0]
 800a8b4:	b103      	cbz	r3, 800a8b8 <_kill_r+0x1c>
 800a8b6:	6023      	str	r3, [r4, #0]
 800a8b8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ba:	bf00      	nop
 800a8bc:	20000768 	.word	0x20000768

0800a8c0 <_getpid_r>:
 800a8c0:	f7fa b9ba 	b.w	8004c38 <_getpid>

0800a8c4 <__sread>:
 800a8c4:	b510      	push	{r4, lr}
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8cc:	f000 f89c 	bl	800aa08 <_read_r>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	bfab      	itete	ge
 800a8d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a8d8:	181b      	addge	r3, r3, r0
 800a8da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8de:	bfac      	ite	ge
 800a8e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8e2:	81a3      	strhlt	r3, [r4, #12]
 800a8e4:	bd10      	pop	{r4, pc}

0800a8e6 <__swrite>:
 800a8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ea:	461f      	mov	r7, r3
 800a8ec:	898b      	ldrh	r3, [r1, #12]
 800a8ee:	05db      	lsls	r3, r3, #23
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	460c      	mov	r4, r1
 800a8f4:	4616      	mov	r6, r2
 800a8f6:	d505      	bpl.n	800a904 <__swrite+0x1e>
 800a8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8fc:	2302      	movs	r3, #2
 800a8fe:	2200      	movs	r2, #0
 800a900:	f000 f868 	bl	800a9d4 <_lseek_r>
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a90a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a90e:	81a3      	strh	r3, [r4, #12]
 800a910:	4632      	mov	r2, r6
 800a912:	463b      	mov	r3, r7
 800a914:	4628      	mov	r0, r5
 800a916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a91a:	f000 b817 	b.w	800a94c <_write_r>

0800a91e <__sseek>:
 800a91e:	b510      	push	{r4, lr}
 800a920:	460c      	mov	r4, r1
 800a922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a926:	f000 f855 	bl	800a9d4 <_lseek_r>
 800a92a:	1c43      	adds	r3, r0, #1
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	bf15      	itete	ne
 800a930:	6560      	strne	r0, [r4, #84]	; 0x54
 800a932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a93a:	81a3      	strheq	r3, [r4, #12]
 800a93c:	bf18      	it	ne
 800a93e:	81a3      	strhne	r3, [r4, #12]
 800a940:	bd10      	pop	{r4, pc}

0800a942 <__sclose>:
 800a942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a946:	f000 b813 	b.w	800a970 <_close_r>
	...

0800a94c <_write_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	4d07      	ldr	r5, [pc, #28]	; (800a96c <_write_r+0x20>)
 800a950:	4604      	mov	r4, r0
 800a952:	4608      	mov	r0, r1
 800a954:	4611      	mov	r1, r2
 800a956:	2200      	movs	r2, #0
 800a958:	602a      	str	r2, [r5, #0]
 800a95a:	461a      	mov	r2, r3
 800a95c:	f7fa f9ab 	bl	8004cb6 <_write>
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	d102      	bne.n	800a96a <_write_r+0x1e>
 800a964:	682b      	ldr	r3, [r5, #0]
 800a966:	b103      	cbz	r3, 800a96a <_write_r+0x1e>
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	bd38      	pop	{r3, r4, r5, pc}
 800a96c:	20000768 	.word	0x20000768

0800a970 <_close_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	4d06      	ldr	r5, [pc, #24]	; (800a98c <_close_r+0x1c>)
 800a974:	2300      	movs	r3, #0
 800a976:	4604      	mov	r4, r0
 800a978:	4608      	mov	r0, r1
 800a97a:	602b      	str	r3, [r5, #0]
 800a97c:	f7fa f9b7 	bl	8004cee <_close>
 800a980:	1c43      	adds	r3, r0, #1
 800a982:	d102      	bne.n	800a98a <_close_r+0x1a>
 800a984:	682b      	ldr	r3, [r5, #0]
 800a986:	b103      	cbz	r3, 800a98a <_close_r+0x1a>
 800a988:	6023      	str	r3, [r4, #0]
 800a98a:	bd38      	pop	{r3, r4, r5, pc}
 800a98c:	20000768 	.word	0x20000768

0800a990 <_fstat_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4d07      	ldr	r5, [pc, #28]	; (800a9b0 <_fstat_r+0x20>)
 800a994:	2300      	movs	r3, #0
 800a996:	4604      	mov	r4, r0
 800a998:	4608      	mov	r0, r1
 800a99a:	4611      	mov	r1, r2
 800a99c:	602b      	str	r3, [r5, #0]
 800a99e:	f7fa f9b2 	bl	8004d06 <_fstat>
 800a9a2:	1c43      	adds	r3, r0, #1
 800a9a4:	d102      	bne.n	800a9ac <_fstat_r+0x1c>
 800a9a6:	682b      	ldr	r3, [r5, #0]
 800a9a8:	b103      	cbz	r3, 800a9ac <_fstat_r+0x1c>
 800a9aa:	6023      	str	r3, [r4, #0]
 800a9ac:	bd38      	pop	{r3, r4, r5, pc}
 800a9ae:	bf00      	nop
 800a9b0:	20000768 	.word	0x20000768

0800a9b4 <_isatty_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	4d06      	ldr	r5, [pc, #24]	; (800a9d0 <_isatty_r+0x1c>)
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	4608      	mov	r0, r1
 800a9be:	602b      	str	r3, [r5, #0]
 800a9c0:	f7fa f9b1 	bl	8004d26 <_isatty>
 800a9c4:	1c43      	adds	r3, r0, #1
 800a9c6:	d102      	bne.n	800a9ce <_isatty_r+0x1a>
 800a9c8:	682b      	ldr	r3, [r5, #0]
 800a9ca:	b103      	cbz	r3, 800a9ce <_isatty_r+0x1a>
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	bd38      	pop	{r3, r4, r5, pc}
 800a9d0:	20000768 	.word	0x20000768

0800a9d4 <_lseek_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	4d07      	ldr	r5, [pc, #28]	; (800a9f4 <_lseek_r+0x20>)
 800a9d8:	4604      	mov	r4, r0
 800a9da:	4608      	mov	r0, r1
 800a9dc:	4611      	mov	r1, r2
 800a9de:	2200      	movs	r2, #0
 800a9e0:	602a      	str	r2, [r5, #0]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	f7fa f9aa 	bl	8004d3c <_lseek>
 800a9e8:	1c43      	adds	r3, r0, #1
 800a9ea:	d102      	bne.n	800a9f2 <_lseek_r+0x1e>
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	b103      	cbz	r3, 800a9f2 <_lseek_r+0x1e>
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	bd38      	pop	{r3, r4, r5, pc}
 800a9f4:	20000768 	.word	0x20000768

0800a9f8 <_malloc_usable_size_r>:
 800a9f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9fc:	1f18      	subs	r0, r3, #4
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	bfbc      	itt	lt
 800aa02:	580b      	ldrlt	r3, [r1, r0]
 800aa04:	18c0      	addlt	r0, r0, r3
 800aa06:	4770      	bx	lr

0800aa08 <_read_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4d07      	ldr	r5, [pc, #28]	; (800aa28 <_read_r+0x20>)
 800aa0c:	4604      	mov	r4, r0
 800aa0e:	4608      	mov	r0, r1
 800aa10:	4611      	mov	r1, r2
 800aa12:	2200      	movs	r2, #0
 800aa14:	602a      	str	r2, [r5, #0]
 800aa16:	461a      	mov	r2, r3
 800aa18:	f7fa f930 	bl	8004c7c <_read>
 800aa1c:	1c43      	adds	r3, r0, #1
 800aa1e:	d102      	bne.n	800aa26 <_read_r+0x1e>
 800aa20:	682b      	ldr	r3, [r5, #0]
 800aa22:	b103      	cbz	r3, 800aa26 <_read_r+0x1e>
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	bd38      	pop	{r3, r4, r5, pc}
 800aa28:	20000768 	.word	0x20000768

0800aa2c <_init>:
 800aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2e:	bf00      	nop
 800aa30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa32:	bc08      	pop	{r3}
 800aa34:	469e      	mov	lr, r3
 800aa36:	4770      	bx	lr

0800aa38 <_fini>:
 800aa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3a:	bf00      	nop
 800aa3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3e:	bc08      	pop	{r3}
 800aa40:	469e      	mov	lr, r3
 800aa42:	4770      	bx	lr
